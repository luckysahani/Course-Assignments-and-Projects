Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    FLOAT_CONST
    COMMENT
    ELLIPSIS
    GOTO
    ENUM
    STRCITFP
    OPERATOR
    WHITESPACE
    INT_CONST
    CONST
    KEYWORD
    ASSERT
    CHAR_CONST
    STRING
    SEPERATOR

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     CompilationUnit -> ProgramFile
Rule 2     OP_DIM -> LSQPAREN RSQPAREN
Rule 3     TypeSpecifier -> TypeName
Rule 4     TypeSpecifier -> TypeName Dims
Rule 5     TypeName -> PrimitiveType
Rule 6     TypeName -> QualifiedName
Rule 7     ClassNameList -> QualifiedName
Rule 8     ClassNameList -> ClassNameList COMMA QualifiedName
Rule 9     PrimitiveType -> BOOLEAN
Rule 10    PrimitiveType -> CHAR
Rule 11    PrimitiveType -> BYTE
Rule 12    PrimitiveType -> SHORT
Rule 13    PrimitiveType -> INT
Rule 14    PrimitiveType -> LONG
Rule 15    PrimitiveType -> FLOAT
Rule 16    PrimitiveType -> DOUBLE
Rule 17    PrimitiveType -> VOID
Rule 18    SemiColons -> SEMICOLON
Rule 19    SemiColons -> SemiColons SEMICOLON
Rule 20    ProgramFile -> PackageStatement ImportStatements TypeDeclarations
Rule 21    ProgramFile -> PackageStatement ImportStatements
Rule 22    ProgramFile -> PackageStatement TypeDeclarations
Rule 23    ProgramFile -> ImportStatements TypeDeclarations
Rule 24    ProgramFile -> PackageStatement
Rule 25    ProgramFile -> ImportStatements
Rule 26    ProgramFile -> TypeDeclarations
Rule 27    PackageStatement -> PACKAGE QualifiedName SemiColons
Rule 28    TypeDeclarations -> TypeDeclarationOptSemi
Rule 29    TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi
Rule 30    TypeDeclarationOptSemi -> TypeDeclaration
Rule 31    TypeDeclarationOptSemi -> TypeDeclaration SemiColons
Rule 32    ImportStatements -> ImportStatement
Rule 33    ImportStatements -> ImportStatements ImportStatement
Rule 34    ImportStatement -> IMPORT QualifiedName SemiColons
Rule 35    ImportStatement -> IMPORT QualifiedName DOT * SemiColons
Rule 36    QualifiedName -> IDENTIFIER
Rule 37    QualifiedName -> QualifiedName DOT IDENTIFIER
Rule 38    TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN
Rule 39    TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN
Rule 40    ClassHeader -> Modifiers ClassWord IDENTIFIER Extends Interfaces
Rule 41    ClassHeader -> Modifiers ClassWord IDENTIFIER Extends
Rule 42    ClassHeader -> Modifiers ClassWord IDENTIFIER Interfaces
Rule 43    ClassHeader -> ClassWord IDENTIFIER Extends Interfaces
Rule 44    ClassHeader -> Modifiers ClassWord IDENTIFIER
Rule 45    ClassHeader -> ClassWord IDENTIFIER Extends
Rule 46    ClassHeader -> ClassWord IDENTIFIER Interfaces
Rule 47    ClassHeader -> ClassWord IDENTIFIER
Rule 48    Modifiers -> Modifier
Rule 49    Modifiers -> Modifiers Modifier
Rule 50    Modifier -> ABSTRACT
Rule 51    Modifier -> FINAL
Rule 52    Modifier -> PUBLIC
Rule 53    Modifier -> PROTECTED
Rule 54    Modifier -> PRIVATE
Rule 55    Modifier -> STATIC
Rule 56    Modifier -> TRANSIENT
Rule 57    Modifier -> VOLATILE
Rule 58    Modifier -> NATIVE
Rule 59    Modifier -> SYNCHRONIZED
Rule 60    ClassWord -> CLASS
Rule 61    ClassWord -> INTERFACE
Rule 62    Interfaces -> IMPLEMENTS ClassNameList
Rule 63    FieldDeclarations -> FieldDeclarationOptSemi
Rule 64    FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi
Rule 65    FieldDeclarationOptSemi -> FieldDeclaration
Rule 66    FieldDeclarationOptSemi -> FieldDeclaration SemiColons
Rule 67    FieldDeclaration -> FieldVariableDeclaration SEMICOLON
Rule 68    FieldDeclaration -> MethodDeclaration
Rule 69    FieldDeclaration -> ConstructorDeclaration
Rule 70    FieldDeclaration -> StaticInitializer
Rule 71    FieldDeclaration -> NonStaticInitializer
Rule 72    FieldDeclaration -> TypeDeclaration
Rule 73    FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators
Rule 74    FieldVariableDeclaration -> TypeSpecifier VariableDeclarators
Rule 75    VariableDeclarators -> VariableDeclarator
Rule 76    VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator
Rule 77    VariableDeclarator -> DeclaratorName
Rule 78    VariableDeclarator -> DeclaratorName = VariableInitializer
Rule 79    VariableInitializer -> Expression
Rule 80    VariableInitializer -> LCURPAREN RCURPAREN
Rule 81    VariableInitializer -> LCURPAREN ArrayInitializers RCURPAREN
Rule 82    ArrayInitializers -> VariableInitializer
Rule 83    ArrayInitializers -> ArrayInitializers COMMA VariableInitializer
Rule 84    ArrayInitializers -> ArrayInitializers COMMA
Rule 85    MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody
Rule 86    MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody
Rule 87    MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody
Rule 88    MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody
Rule 89    MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN
Rule 90    MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN
Rule 91    MethodDeclarator -> MethodDeclarator OP_DIM
Rule 92    ParameterList -> Parameter
Rule 93    ParameterList -> ParameterList COMMA Parameter
Rule 94    Parameter -> TypeSpecifier DeclaratorName
Rule 95    Parameter -> FINAL TypeSpecifier DeclaratorName
Rule 96    DeclaratorName -> IDENTIFIER
Rule 97    DeclaratorName -> DeclaratorName OP_DIM
Rule 98    Throws -> THROWS ClassNameList
Rule 99    MethodBody -> Block
Rule 100   MethodBody -> SEMICOLON
Rule 101   ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block
Rule 102   ConstructorDeclaration -> Modifiers ConstructorDeclarator Block
Rule 103   ConstructorDeclaration -> ConstructorDeclarator Throws Block
Rule 104   ConstructorDeclaration -> ConstructorDeclarator Block
Rule 105   ConstructorDeclarator -> IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
Rule 106   ConstructorDeclarator -> IDENTIFIER LROUNPAREN RROUNPAREN
Rule 107   StaticInitializer -> STATIC Block
Rule 108   NonStaticInitializer -> Block
Rule 109   Extends -> EXTENDS TypeName
Rule 110   Extends -> Extends COMMA TypeName
Rule 111   Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
Rule 112   Block -> LCURPAREN RCURPAREN
Rule 113   LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement
Rule 114   LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
Rule 115   LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement
Rule 116   LocalVariableDeclarationOrStatement -> Statement
Rule 117   LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON
Rule 118   LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON
Rule 119   Statement -> EmptyStatement
Rule 120   Statement -> LabelStatement
Rule 121   Statement -> ExpressionStatement SEMICOLON
Rule 122   Statement -> SelectionStatement
Rule 123   Statement -> IterationStatement
Rule 124   Statement -> JumpStatement
Rule 125   Statement -> GuardingStatement
Rule 126   Statement -> Block
Rule 127   EmptyStatement -> SEMICOLON
Rule 128   LabelStatement -> IDENTIFIER COLON
Rule 129   LabelStatement -> CASE ConstantExpression COLON
Rule 130   LabelStatement -> DEFAULT COLON
Rule 131   ExpressionStatement -> Expression
Rule 132   SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement
Rule 133   SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement
Rule 134   SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block
Rule 135   IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement
Rule 136   IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON
Rule 137   IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement
Rule 138   IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
Rule 139   ForInit -> ExpressionStatements SEMICOLON
Rule 140   ForInit -> LocalVariableDeclarationStatement
Rule 141   ForInit -> SEMICOLON
Rule 142   ForExpr -> Expression SEMICOLON
Rule 143   ForExpr -> SEMICOLON
Rule 144   ForIncr -> ExpressionStatements
Rule 145   ExpressionStatements -> ExpressionStatement
Rule 146   ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement
Rule 147   JumpStatement -> BREAK IDENTIFIER SEMICOLON
Rule 148   JumpStatement -> BREAK SEMICOLON
Rule 149   JumpStatement -> CONTINUE IDENTIFIER SEMICOLON
Rule 150   JumpStatement -> CONTINUE SEMICOLON
Rule 151   JumpStatement -> RETURN Expression SEMICOLON
Rule 152   JumpStatement -> RETURN SEMICOLON
Rule 153   JumpStatement -> THROW Expression SEMICOLON
Rule 154   GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement
Rule 155   GuardingStatement -> TRY Block Finally
Rule 156   GuardingStatement -> TRY Block Catches
Rule 157   GuardingStatement -> TRY Block Catches Finally
Rule 158   Catches -> Catch
Rule 159   Catches -> Catches Catch
Rule 160   Catch -> CatchHeader Block
Rule 161   CatchHeader -> CATCH LROUNPAREN TypeSpecifier IDENTIFIER RROUNPAREN
Rule 162   CatchHeader -> CATCH LROUNPAREN TypeSpecifier RROUNPAREN
Rule 163   Finally -> FINALLY Block
Rule 164   PrimaryExpression -> QualifiedName
Rule 165   PrimaryExpression -> NotJustName
Rule 166   NotJustName -> SpecialName
Rule 167   NotJustName -> NewAllocationExpression
Rule 168   NotJustName -> ComplexPrimary
Rule 169   ComplexPrimary -> LROUNPAREN Expression RROUNPAREN
Rule 170   ComplexPrimary -> ComplexPrimaryNoParenthesis
Rule 171   ComplexPrimaryNoParenthesis -> LITERAL
Rule 172   ComplexPrimaryNoParenthesis -> BOOLEAN_CONST
Rule 173   ComplexPrimaryNoParenthesis -> ArrayAccess
Rule 174   ComplexPrimaryNoParenthesis -> FieldAccess
Rule 175   ComplexPrimaryNoParenthesis -> MethodCall
Rule 176   ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN
Rule 177   ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN
Rule 178   FieldAccess -> NotJustName DOT IDENTIFIER
Rule 179   FieldAccess -> RealPostfixExpression DOT IDENTIFIER
Rule 180   FieldAccess -> QualifiedName DOT THIS
Rule 181   FieldAccess -> QualifiedName DOT CLASS
Rule 182   FieldAccess -> PrimitiveType DOT CLASS
Rule 183   MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN
Rule 184   MethodCall -> MethodAccess LROUNPAREN RROUNPAREN
Rule 185   MethodAccess -> ComplexPrimaryNoParenthesis
Rule 186   MethodAccess -> SpecialName
Rule 187   MethodAccess -> QualifiedName
Rule 188   SpecialName -> THIS
Rule 189   SpecialName -> SUPER
Rule 190   SpecialName -> NULL
Rule 191   ArgumentList -> Expression
Rule 192   ArgumentList -> ArgumentList COMMA Expression
Rule 193   NewAllocationExpression -> PlainNewAllocationExpression
Rule 194   NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression
Rule 195   PlainNewAllocationExpression -> ArrayAllocationExpression
Rule 196   PlainNewAllocationExpression -> ClassAllocationExpression
Rule 197   PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN
Rule 198   PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN
Rule 199   PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
Rule 200   PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
Rule 201   ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
Rule 202   ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN
Rule 203   ArrayAllocationExpression -> NEW TypeName DimExprs Dims
Rule 204   ArrayAllocationExpression -> NEW TypeName DimExprs
Rule 205   ArrayAllocationExpression -> NEW TypeName Dims
Rule 206   DimExprs -> DimExpr
Rule 207   DimExprs -> DimExprs DimExpr
Rule 208   DimExpr -> LSQPAREN Expression RSQPAREN
Rule 209   Dims -> OP_DIM
Rule 210   Dims -> Dims OP_DIM
Rule 211   PostfixExpression -> PrimaryExpression
Rule 212   PostfixExpression -> RealPostfixExpression
Rule 213   RealPostfixExpression -> PostfixExpression OP_INC
Rule 214   RealPostfixExpression -> PostfixExpression OP_DEC
Rule 215   UnaryExpression -> OP_INC UnaryExpression
Rule 216   UnaryExpression -> OP_DEC UnaryExpression
Rule 217   UnaryExpression -> ArithmeticUnaryOperator CastExpression
Rule 218   UnaryExpression -> LogicalUnaryExpression
Rule 219   LogicalUnaryExpression -> PostfixExpression
Rule 220   LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression
Rule 221   LogicalUnaryOperator -> ~
Rule 222   LogicalUnaryOperator -> !
Rule 223   ArithmeticUnaryOperator -> +
Rule 224   ArithmeticUnaryOperator -> -
Rule 225   CastExpression -> UnaryExpression
Rule 226   CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
Rule 227   CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
Rule 228   CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
Rule 229   PrimitiveTypeExpression -> PrimitiveType
Rule 230   PrimitiveTypeExpression -> PrimitiveType Dims
Rule 231   ClassTypeExpression -> QualifiedName Dims
Rule 232   MultiplicativeExpression -> CastExpression
Rule 233   MultiplicativeExpression -> MultiplicativeExpression * CastExpression
Rule 234   MultiplicativeExpression -> MultiplicativeExpression / CastExpression
Rule 235   MultiplicativeExpression -> MultiplicativeExpression % CastExpression
Rule 236   AdditiveExpression -> MultiplicativeExpression
Rule 237   AdditiveExpression -> AdditiveExpression + MultiplicativeExpression
Rule 238   AdditiveExpression -> AdditiveExpression - MultiplicativeExpression
Rule 239   ShiftExpression -> AdditiveExpression
Rule 240   ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression
Rule 241   ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression
Rule 242   ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression
Rule 243   RelationalExpression -> ShiftExpression
Rule 244   RelationalExpression -> RelationalExpression < ShiftExpression
Rule 245   RelationalExpression -> RelationalExpression > ShiftExpression
Rule 246   RelationalExpression -> RelationalExpression OP_LE ShiftExpression
Rule 247   RelationalExpression -> RelationalExpression OP_GE ShiftExpression
Rule 248   RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier
Rule 249   EqualityExpression -> RelationalExpression
Rule 250   EqualityExpression -> EqualityExpression OP_EQ RelationalExpression
Rule 251   EqualityExpression -> EqualityExpression OP_NE RelationalExpression
Rule 252   AndExpression -> EqualityExpression
Rule 253   AndExpression -> AndExpression & EqualityExpression
Rule 254   ExclusiveOrExpression -> AndExpression
Rule 255   ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression
Rule 256   InclusiveOrExpression -> ExclusiveOrExpression
Rule 257   InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression
Rule 258   ConditionalAndExpression -> InclusiveOrExpression
Rule 259   ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression
Rule 260   ConditionalOrExpression -> ConditionalAndExpression
Rule 261   ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression
Rule 262   ConditionalExpression -> ConditionalOrExpression
Rule 263   ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression
Rule 264   AssignmentExpression -> ConditionalExpression
Rule 265   AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression
Rule 266   AssignmentOperator -> =
Rule 267   AssignmentOperator -> ASS_MUL
Rule 268   AssignmentOperator -> ASS_DIV
Rule 269   AssignmentOperator -> ASS_MOD
Rule 270   AssignmentOperator -> ASS_ADD
Rule 271   AssignmentOperator -> ASS_SUB
Rule 272   AssignmentOperator -> ASS_SHL
Rule 273   AssignmentOperator -> ASS_SHR
Rule 274   AssignmentOperator -> ASS_SHRR
Rule 275   AssignmentOperator -> ASS_AND
Rule 276   AssignmentOperator -> ASS_XOR
Rule 277   AssignmentOperator -> ASS_OR
Rule 278   Expression -> AssignmentExpression
Rule 279   ConstantExpression -> ConditionalExpression

Terminals, with rules where they appear

!                    : 222
%                    : 235
&                    : 253
*                    : 35 233
+                    : 223 237
-                    : 224 238
/                    : 234
<                    : 244
=                    : 78 266
>                    : 245
?                    : 263
ABSTRACT             : 50
ASSERT               : 
ASS_ADD              : 270
ASS_AND              : 275
ASS_DIV              : 268
ASS_MOD              : 269
ASS_MUL              : 267
ASS_OR               : 277
ASS_SHL              : 272
ASS_SHR              : 273
ASS_SHRR             : 274
ASS_SUB              : 271
ASS_XOR              : 276
BOOLEAN              : 9
BOOLEAN_CONST        : 172
BREAK                : 147 148
BYTE                 : 11
CASE                 : 129
CATCH                : 161 162
CHAR                 : 10
CHAR_CONST           : 
CLASS                : 60 181 182
COLON                : 128 129 130 263
COMMA                : 8 76 83 84 93 110 146 192
COMMENT              : 
CONST                : 
CONTINUE             : 149 150
DEFAULT              : 130
DO                   : 136
DOT                  : 35 37 178 179 180 181 182 194
DOUBLE               : 16
ELLIPSIS             : 
ELSE                 : 133
ENUM                 : 
EXTENDS              : 109
FINAL                : 51 95 118
FINALLY              : 163
FLOAT                : 15
FLOAT_CONST          : 
FOR                  : 137 138
GOTO                 : 
IDENTIFIER           : 36 37 40 41 42 43 44 45 46 47 96 105 106 128 147 149 161 178 179
IF                   : 132 133
IMPLEMENTS           : 62
IMPORT               : 34 35
INSTANCEOF           : 248
INT                  : 13
INTERFACE            : 61
INT_CONST            : 
KEYWORD              : 
LCURPAREN            : 38 39 80 81 111 112 197 198 199 200
LITERAL              : 171
LONG                 : 14
LROUNPAREN           : 89 90 105 106 132 133 134 135 136 137 138 154 161 162 169 183 184 201 202 226 227 228
LSQPAREN             : 2 176 177 208
NATIVE               : 58
NEW                  : 201 202 203 204 205
NULL                 : 190
OPERATOR             : 
OP_DEC               : 214 216
OP_EQ                : 250
OP_GE                : 247
OP_INC               : 213 215
OP_LAND              : 259
OP_LE                : 246
OP_LOR               : 261
OP_NE                : 251
OP_SHL               : 240
OP_SHR               : 241
OP_SHRR              : 242
PACKAGE              : 27
PRIVATE              : 54
PROTECTED            : 53
PUBLIC               : 52
RCURPAREN            : 38 39 80 81 111 112 197 198 199 200
RETURN               : 151 152
RROUNPAREN           : 89 90 105 106 132 133 134 135 136 137 138 154 161 162 169 183 184 201 202 226 227 228
RSQPAREN             : 2 176 177 208
SEMICOLON            : 18 19 67 100 117 118 121 127 136 139 141 142 143 147 148 149 150 151 152 153
SEPERATOR            : 
SHORT                : 12
STATIC               : 55 107
STRCITFP             : 
STRING               : 
SUPER                : 189
SWITCH               : 134
SYNCHRONIZED         : 59 154
THIS                 : 180 188
THROW                : 153
THROWS               : 98
TRANSIENT            : 56
TRY                  : 155 156 157
VOID                 : 17
VOLATILE             : 57
WHILE                : 135 136
WHITESPACE           : 
^                    : 255
error                : 
|                    : 257
~                    : 221

Nonterminals, with rules where they appear

AdditiveExpression   : 237 238 239 240 241 242
AndExpression        : 253 254 255
ArgumentList         : 183 192 201
ArithmeticUnaryOperator : 217
ArrayAccess          : 173
ArrayAllocationExpression : 195 197 199
ArrayInitializers    : 81 83 84 199
AssignmentExpression : 265 278
AssignmentOperator   : 265
Block                : 99 101 102 103 104 107 108 126 134 155 156 157 160 163
CastExpression       : 217 226 227 232 233 234 235
Catch                : 158 159
CatchHeader          : 160
Catches              : 156 157 159
ClassAllocationExpression : 196 198 200
ClassHeader          : 38 39
ClassNameList        : 8 62 98
ClassTypeExpression  : 227
ClassWord            : 40 41 42 43 44 45 46 47
CompilationUnit      : 0
ComplexPrimary       : 168 177
ComplexPrimaryNoParenthesis : 170 185
ConditionalAndExpression : 259 260 261
ConditionalExpression : 263 264 279
ConditionalOrExpression : 261 262 263
ConstantExpression   : 129
ConstructorDeclaration : 69
ConstructorDeclarator : 101 102 103 104
DeclaratorName       : 77 78 89 90 94 95 97
DimExpr              : 206 207
DimExprs             : 203 204 207
Dims                 : 4 203 205 210 230 231
EmptyStatement       : 119
EqualityExpression   : 250 251 252 253
ExclusiveOrExpression : 255 256 257
Expression           : 79 131 132 133 134 135 136 142 151 153 154 169 176 177 191 192 208 228 263
ExpressionStatement  : 121 145 146
ExpressionStatements : 139 144 146
Extends              : 40 41 43 45 110
FieldAccess          : 174
FieldDeclaration     : 65 66
FieldDeclarationOptSemi : 63 64
FieldDeclarations    : 38 64 200
FieldVariableDeclaration : 67
Finally              : 155 157
ForExpr              : 137 138
ForIncr              : 137
ForInit              : 137 138
GuardingStatement    : 125
ImportStatement      : 32 33
ImportStatements     : 20 21 23 25 33
InclusiveOrExpression : 257 258 259
Interfaces           : 40 42 43 46
IterationStatement   : 123
JumpStatement        : 124
LabelStatement       : 120
LocalVariableDeclarationOrStatement : 113 114
LocalVariableDeclarationStatement : 115 140
LocalVariableDeclarationsAndStatements : 111 114
LogicalUnaryExpression : 218 228
LogicalUnaryOperator : 220
MethodAccess         : 183 184
MethodBody           : 85 86 87 88
MethodCall           : 175
MethodDeclaration    : 68
MethodDeclarator     : 85 86 87 88 91
Modifier             : 48 49
Modifiers            : 40 41 42 44 49 73 85 86 101 102
MultiplicativeExpression : 233 234 235 236 237 238
NewAllocationExpression : 167
NonStaticInitializer : 71
NotJustName          : 165 178
OP_DIM               : 91 97 209 210
PackageStatement     : 20 21 22 24
Parameter            : 92 93
ParameterList        : 89 93 105
PlainNewAllocationExpression : 193 194
PostfixExpression    : 213 214 219
PrimaryExpression    : 211
PrimitiveType        : 5 182 229 230
PrimitiveTypeExpression : 226
ProgramFile          : 1
QualifiedName        : 6 7 8 27 34 35 37 164 176 180 181 187 194 231
RealPostfixExpression : 179 212
RelationalExpression : 244 245 246 247 248 249 250 251
SelectionStatement   : 122
SemiColons           : 19 27 31 34 35 66
ShiftExpression      : 240 241 242 243 244 245 246 247
SpecialName          : 166 186
Statement            : 116 132 133 133 135 136 137 138 154
StaticInitializer    : 70
Throws               : 85 87 101 103
TypeDeclaration      : 30 31 72
TypeDeclarationOptSemi : 28 29
TypeDeclarations     : 20 22 23 26 29
TypeName             : 3 4 109 110 201 202 203 204 205
TypeSpecifier        : 73 74 85 86 87 88 94 95 117 118 161 162 248
UnaryExpression      : 215 216 220 225 265
VariableDeclarator   : 75 76
VariableDeclarators  : 73 74 76 117 118
VariableInitializer  : 78 82 83

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (1) CompilationUnit -> . ProgramFile
    (20) ProgramFile -> . PackageStatement ImportStatements TypeDeclarations
    (21) ProgramFile -> . PackageStatement ImportStatements
    (22) ProgramFile -> . PackageStatement TypeDeclarations
    (23) ProgramFile -> . ImportStatements TypeDeclarations
    (24) ProgramFile -> . PackageStatement
    (25) ProgramFile -> . ImportStatements
    (26) ProgramFile -> . TypeDeclarations
    (27) PackageStatement -> . PACKAGE QualifiedName SemiColons
    (32) ImportStatements -> . ImportStatement
    (33) ImportStatements -> . ImportStatements ImportStatement
    (28) TypeDeclarations -> . TypeDeclarationOptSemi
    (29) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (34) ImportStatement -> . IMPORT QualifiedName SemiColons
    (35) ImportStatement -> . IMPORT QualifiedName DOT * SemiColons
    (30) TypeDeclarationOptSemi -> . TypeDeclaration
    (31) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (38) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (42) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (44) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (45) ClassHeader -> . ClassWord IDENTIFIER Extends
    (46) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (47) ClassHeader -> . ClassWord IDENTIFIER
    (48) Modifiers -> . Modifier
    (49) Modifiers -> . Modifiers Modifier
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED

    PACKAGE         shift and go to state 14
    IMPORT          shift and go to state 11
    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 6
    ProgramFile                    shift and go to state 1
    Modifier                       shift and go to state 17
    TypeDeclaration                shift and go to state 5
    ImportStatements               shift and go to state 20
    TypeDeclarations               shift and go to state 21
    ImportStatement                shift and go to state 16
    ClassHeader                    shift and go to state 23
    PackageStatement               shift and go to state 15
    CompilationUnit                shift and go to state 18
    TypeDeclarationOptSemi         shift and go to state 13

state 1

    (1) CompilationUnit -> ProgramFile .

    $end            reduce using rule 1 (CompilationUnit -> ProgramFile .)


state 2

    (59) Modifier -> SYNCHRONIZED .

    CLASS           reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    INTERFACE       reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    ABSTRACT        reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    FINAL           reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    PUBLIC          reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    PROTECTED       reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    PRIVATE         reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    STATIC          reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    TRANSIENT       reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    VOLATILE        reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    NATIVE          reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    SYNCHRONIZED    reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    IDENTIFIER      reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    BOOLEAN         reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    CHAR            reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    BYTE            reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    SHORT           reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    INT             reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    LONG            reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    FLOAT           reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    DOUBLE          reduce using rule 59 (Modifier -> SYNCHRONIZED .)
    VOID            reduce using rule 59 (Modifier -> SYNCHRONIZED .)


state 3

    (57) Modifier -> VOLATILE .

    CLASS           reduce using rule 57 (Modifier -> VOLATILE .)
    INTERFACE       reduce using rule 57 (Modifier -> VOLATILE .)
    ABSTRACT        reduce using rule 57 (Modifier -> VOLATILE .)
    FINAL           reduce using rule 57 (Modifier -> VOLATILE .)
    PUBLIC          reduce using rule 57 (Modifier -> VOLATILE .)
    PROTECTED       reduce using rule 57 (Modifier -> VOLATILE .)
    PRIVATE         reduce using rule 57 (Modifier -> VOLATILE .)
    STATIC          reduce using rule 57 (Modifier -> VOLATILE .)
    TRANSIENT       reduce using rule 57 (Modifier -> VOLATILE .)
    VOLATILE        reduce using rule 57 (Modifier -> VOLATILE .)
    NATIVE          reduce using rule 57 (Modifier -> VOLATILE .)
    SYNCHRONIZED    reduce using rule 57 (Modifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 57 (Modifier -> VOLATILE .)
    BOOLEAN         reduce using rule 57 (Modifier -> VOLATILE .)
    CHAR            reduce using rule 57 (Modifier -> VOLATILE .)
    BYTE            reduce using rule 57 (Modifier -> VOLATILE .)
    SHORT           reduce using rule 57 (Modifier -> VOLATILE .)
    INT             reduce using rule 57 (Modifier -> VOLATILE .)
    LONG            reduce using rule 57 (Modifier -> VOLATILE .)
    FLOAT           reduce using rule 57 (Modifier -> VOLATILE .)
    DOUBLE          reduce using rule 57 (Modifier -> VOLATILE .)
    VOID            reduce using rule 57 (Modifier -> VOLATILE .)


state 4

    (50) Modifier -> ABSTRACT .

    CLASS           reduce using rule 50 (Modifier -> ABSTRACT .)
    INTERFACE       reduce using rule 50 (Modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 50 (Modifier -> ABSTRACT .)
    FINAL           reduce using rule 50 (Modifier -> ABSTRACT .)
    PUBLIC          reduce using rule 50 (Modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 50 (Modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 50 (Modifier -> ABSTRACT .)
    STATIC          reduce using rule 50 (Modifier -> ABSTRACT .)
    TRANSIENT       reduce using rule 50 (Modifier -> ABSTRACT .)
    VOLATILE        reduce using rule 50 (Modifier -> ABSTRACT .)
    NATIVE          reduce using rule 50 (Modifier -> ABSTRACT .)
    SYNCHRONIZED    reduce using rule 50 (Modifier -> ABSTRACT .)
    IDENTIFIER      reduce using rule 50 (Modifier -> ABSTRACT .)
    BOOLEAN         reduce using rule 50 (Modifier -> ABSTRACT .)
    CHAR            reduce using rule 50 (Modifier -> ABSTRACT .)
    BYTE            reduce using rule 50 (Modifier -> ABSTRACT .)
    SHORT           reduce using rule 50 (Modifier -> ABSTRACT .)
    INT             reduce using rule 50 (Modifier -> ABSTRACT .)
    LONG            reduce using rule 50 (Modifier -> ABSTRACT .)
    FLOAT           reduce using rule 50 (Modifier -> ABSTRACT .)
    DOUBLE          reduce using rule 50 (Modifier -> ABSTRACT .)
    VOID            reduce using rule 50 (Modifier -> ABSTRACT .)


state 5

    (30) TypeDeclarationOptSemi -> TypeDeclaration .
    (31) TypeDeclarationOptSemi -> TypeDeclaration . SemiColons
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    CLASS           reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration .)
    INTERFACE       reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration .)
    ABSTRACT        reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration .)
    FINAL           reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PUBLIC          reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PROTECTED       reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PRIVATE         reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration .)
    STATIC          reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration .)
    TRANSIENT       reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration .)
    VOLATILE        reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration .)
    NATIVE          reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration .)
    SYNCHRONIZED    reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration .)
    $end            reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration .)
    SEMICOLON       shift and go to state 28

    SemiColons                     shift and go to state 27

state 6

    (40) ClassHeader -> Modifiers . ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> Modifiers . ClassWord IDENTIFIER Extends
    (42) ClassHeader -> Modifiers . ClassWord IDENTIFIER Interfaces
    (44) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (49) Modifiers -> Modifiers . Modifier
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED

    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 29
    Modifier                       shift and go to state 30

state 7

    (51) Modifier -> FINAL .

    CLASS           reduce using rule 51 (Modifier -> FINAL .)
    INTERFACE       reduce using rule 51 (Modifier -> FINAL .)
    ABSTRACT        reduce using rule 51 (Modifier -> FINAL .)
    FINAL           reduce using rule 51 (Modifier -> FINAL .)
    PUBLIC          reduce using rule 51 (Modifier -> FINAL .)
    PROTECTED       reduce using rule 51 (Modifier -> FINAL .)
    PRIVATE         reduce using rule 51 (Modifier -> FINAL .)
    STATIC          reduce using rule 51 (Modifier -> FINAL .)
    TRANSIENT       reduce using rule 51 (Modifier -> FINAL .)
    VOLATILE        reduce using rule 51 (Modifier -> FINAL .)
    NATIVE          reduce using rule 51 (Modifier -> FINAL .)
    SYNCHRONIZED    reduce using rule 51 (Modifier -> FINAL .)
    IDENTIFIER      reduce using rule 51 (Modifier -> FINAL .)
    BOOLEAN         reduce using rule 51 (Modifier -> FINAL .)
    CHAR            reduce using rule 51 (Modifier -> FINAL .)
    BYTE            reduce using rule 51 (Modifier -> FINAL .)
    SHORT           reduce using rule 51 (Modifier -> FINAL .)
    INT             reduce using rule 51 (Modifier -> FINAL .)
    LONG            reduce using rule 51 (Modifier -> FINAL .)
    FLOAT           reduce using rule 51 (Modifier -> FINAL .)
    DOUBLE          reduce using rule 51 (Modifier -> FINAL .)
    VOID            reduce using rule 51 (Modifier -> FINAL .)


state 8

    (58) Modifier -> NATIVE .

    CLASS           reduce using rule 58 (Modifier -> NATIVE .)
    INTERFACE       reduce using rule 58 (Modifier -> NATIVE .)
    ABSTRACT        reduce using rule 58 (Modifier -> NATIVE .)
    FINAL           reduce using rule 58 (Modifier -> NATIVE .)
    PUBLIC          reduce using rule 58 (Modifier -> NATIVE .)
    PROTECTED       reduce using rule 58 (Modifier -> NATIVE .)
    PRIVATE         reduce using rule 58 (Modifier -> NATIVE .)
    STATIC          reduce using rule 58 (Modifier -> NATIVE .)
    TRANSIENT       reduce using rule 58 (Modifier -> NATIVE .)
    VOLATILE        reduce using rule 58 (Modifier -> NATIVE .)
    NATIVE          reduce using rule 58 (Modifier -> NATIVE .)
    SYNCHRONIZED    reduce using rule 58 (Modifier -> NATIVE .)
    IDENTIFIER      reduce using rule 58 (Modifier -> NATIVE .)
    BOOLEAN         reduce using rule 58 (Modifier -> NATIVE .)
    CHAR            reduce using rule 58 (Modifier -> NATIVE .)
    BYTE            reduce using rule 58 (Modifier -> NATIVE .)
    SHORT           reduce using rule 58 (Modifier -> NATIVE .)
    INT             reduce using rule 58 (Modifier -> NATIVE .)
    LONG            reduce using rule 58 (Modifier -> NATIVE .)
    FLOAT           reduce using rule 58 (Modifier -> NATIVE .)
    DOUBLE          reduce using rule 58 (Modifier -> NATIVE .)
    VOID            reduce using rule 58 (Modifier -> NATIVE .)


state 9

    (54) Modifier -> PRIVATE .

    CLASS           reduce using rule 54 (Modifier -> PRIVATE .)
    INTERFACE       reduce using rule 54 (Modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 54 (Modifier -> PRIVATE .)
    FINAL           reduce using rule 54 (Modifier -> PRIVATE .)
    PUBLIC          reduce using rule 54 (Modifier -> PRIVATE .)
    PROTECTED       reduce using rule 54 (Modifier -> PRIVATE .)
    PRIVATE         reduce using rule 54 (Modifier -> PRIVATE .)
    STATIC          reduce using rule 54 (Modifier -> PRIVATE .)
    TRANSIENT       reduce using rule 54 (Modifier -> PRIVATE .)
    VOLATILE        reduce using rule 54 (Modifier -> PRIVATE .)
    NATIVE          reduce using rule 54 (Modifier -> PRIVATE .)
    SYNCHRONIZED    reduce using rule 54 (Modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 54 (Modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 54 (Modifier -> PRIVATE .)
    CHAR            reduce using rule 54 (Modifier -> PRIVATE .)
    BYTE            reduce using rule 54 (Modifier -> PRIVATE .)
    SHORT           reduce using rule 54 (Modifier -> PRIVATE .)
    INT             reduce using rule 54 (Modifier -> PRIVATE .)
    LONG            reduce using rule 54 (Modifier -> PRIVATE .)
    FLOAT           reduce using rule 54 (Modifier -> PRIVATE .)
    DOUBLE          reduce using rule 54 (Modifier -> PRIVATE .)
    VOID            reduce using rule 54 (Modifier -> PRIVATE .)


state 10

    (56) Modifier -> TRANSIENT .

    CLASS           reduce using rule 56 (Modifier -> TRANSIENT .)
    INTERFACE       reduce using rule 56 (Modifier -> TRANSIENT .)
    ABSTRACT        reduce using rule 56 (Modifier -> TRANSIENT .)
    FINAL           reduce using rule 56 (Modifier -> TRANSIENT .)
    PUBLIC          reduce using rule 56 (Modifier -> TRANSIENT .)
    PROTECTED       reduce using rule 56 (Modifier -> TRANSIENT .)
    PRIVATE         reduce using rule 56 (Modifier -> TRANSIENT .)
    STATIC          reduce using rule 56 (Modifier -> TRANSIENT .)
    TRANSIENT       reduce using rule 56 (Modifier -> TRANSIENT .)
    VOLATILE        reduce using rule 56 (Modifier -> TRANSIENT .)
    NATIVE          reduce using rule 56 (Modifier -> TRANSIENT .)
    SYNCHRONIZED    reduce using rule 56 (Modifier -> TRANSIENT .)
    IDENTIFIER      reduce using rule 56 (Modifier -> TRANSIENT .)
    BOOLEAN         reduce using rule 56 (Modifier -> TRANSIENT .)
    CHAR            reduce using rule 56 (Modifier -> TRANSIENT .)
    BYTE            reduce using rule 56 (Modifier -> TRANSIENT .)
    SHORT           reduce using rule 56 (Modifier -> TRANSIENT .)
    INT             reduce using rule 56 (Modifier -> TRANSIENT .)
    LONG            reduce using rule 56 (Modifier -> TRANSIENT .)
    FLOAT           reduce using rule 56 (Modifier -> TRANSIENT .)
    DOUBLE          reduce using rule 56 (Modifier -> TRANSIENT .)
    VOID            reduce using rule 56 (Modifier -> TRANSIENT .)


state 11

    (34) ImportStatement -> IMPORT . QualifiedName SemiColons
    (35) ImportStatement -> IMPORT . QualifiedName DOT * SemiColons
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    IDENTIFIER      shift and go to state 32

    QualifiedName                  shift and go to state 31

state 12

    (60) ClassWord -> CLASS .

    IDENTIFIER      reduce using rule 60 (ClassWord -> CLASS .)


state 13

    (28) TypeDeclarations -> TypeDeclarationOptSemi .

    CLASS           reduce using rule 28 (TypeDeclarations -> TypeDeclarationOptSemi .)
    INTERFACE       reduce using rule 28 (TypeDeclarations -> TypeDeclarationOptSemi .)
    ABSTRACT        reduce using rule 28 (TypeDeclarations -> TypeDeclarationOptSemi .)
    FINAL           reduce using rule 28 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 28 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PROTECTED       reduce using rule 28 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 28 (TypeDeclarations -> TypeDeclarationOptSemi .)
    STATIC          reduce using rule 28 (TypeDeclarations -> TypeDeclarationOptSemi .)
    TRANSIENT       reduce using rule 28 (TypeDeclarations -> TypeDeclarationOptSemi .)
    VOLATILE        reduce using rule 28 (TypeDeclarations -> TypeDeclarationOptSemi .)
    NATIVE          reduce using rule 28 (TypeDeclarations -> TypeDeclarationOptSemi .)
    SYNCHRONIZED    reduce using rule 28 (TypeDeclarations -> TypeDeclarationOptSemi .)
    $end            reduce using rule 28 (TypeDeclarations -> TypeDeclarationOptSemi .)


state 14

    (27) PackageStatement -> PACKAGE . QualifiedName SemiColons
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    IDENTIFIER      shift and go to state 32

    QualifiedName                  shift and go to state 33

state 15

    (20) ProgramFile -> PackageStatement . ImportStatements TypeDeclarations
    (21) ProgramFile -> PackageStatement . ImportStatements
    (22) ProgramFile -> PackageStatement . TypeDeclarations
    (24) ProgramFile -> PackageStatement .
    (32) ImportStatements -> . ImportStatement
    (33) ImportStatements -> . ImportStatements ImportStatement
    (28) TypeDeclarations -> . TypeDeclarationOptSemi
    (29) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (34) ImportStatement -> . IMPORT QualifiedName SemiColons
    (35) ImportStatement -> . IMPORT QualifiedName DOT * SemiColons
    (30) TypeDeclarationOptSemi -> . TypeDeclaration
    (31) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (38) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (42) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (44) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (45) ClassHeader -> . ClassWord IDENTIFIER Extends
    (46) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (47) ClassHeader -> . ClassWord IDENTIFIER
    (48) Modifiers -> . Modifier
    (49) Modifiers -> . Modifiers Modifier
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 24 (ProgramFile -> PackageStatement .)
    IMPORT          shift and go to state 11
    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 6
    Modifier                       shift and go to state 17
    TypeDeclaration                shift and go to state 5
    ImportStatements               shift and go to state 34
    TypeDeclarations               shift and go to state 35
    ImportStatement                shift and go to state 16
    ClassHeader                    shift and go to state 23
    TypeDeclarationOptSemi         shift and go to state 13

state 16

    (32) ImportStatements -> ImportStatement .

    IMPORT          reduce using rule 32 (ImportStatements -> ImportStatement .)
    CLASS           reduce using rule 32 (ImportStatements -> ImportStatement .)
    INTERFACE       reduce using rule 32 (ImportStatements -> ImportStatement .)
    ABSTRACT        reduce using rule 32 (ImportStatements -> ImportStatement .)
    FINAL           reduce using rule 32 (ImportStatements -> ImportStatement .)
    PUBLIC          reduce using rule 32 (ImportStatements -> ImportStatement .)
    PROTECTED       reduce using rule 32 (ImportStatements -> ImportStatement .)
    PRIVATE         reduce using rule 32 (ImportStatements -> ImportStatement .)
    STATIC          reduce using rule 32 (ImportStatements -> ImportStatement .)
    TRANSIENT       reduce using rule 32 (ImportStatements -> ImportStatement .)
    VOLATILE        reduce using rule 32 (ImportStatements -> ImportStatement .)
    NATIVE          reduce using rule 32 (ImportStatements -> ImportStatement .)
    SYNCHRONIZED    reduce using rule 32 (ImportStatements -> ImportStatement .)
    $end            reduce using rule 32 (ImportStatements -> ImportStatement .)


state 17

    (48) Modifiers -> Modifier .

    CLASS           reduce using rule 48 (Modifiers -> Modifier .)
    INTERFACE       reduce using rule 48 (Modifiers -> Modifier .)
    ABSTRACT        reduce using rule 48 (Modifiers -> Modifier .)
    FINAL           reduce using rule 48 (Modifiers -> Modifier .)
    PUBLIC          reduce using rule 48 (Modifiers -> Modifier .)
    PROTECTED       reduce using rule 48 (Modifiers -> Modifier .)
    PRIVATE         reduce using rule 48 (Modifiers -> Modifier .)
    STATIC          reduce using rule 48 (Modifiers -> Modifier .)
    TRANSIENT       reduce using rule 48 (Modifiers -> Modifier .)
    VOLATILE        reduce using rule 48 (Modifiers -> Modifier .)
    NATIVE          reduce using rule 48 (Modifiers -> Modifier .)
    SYNCHRONIZED    reduce using rule 48 (Modifiers -> Modifier .)
    IDENTIFIER      reduce using rule 48 (Modifiers -> Modifier .)
    BOOLEAN         reduce using rule 48 (Modifiers -> Modifier .)
    CHAR            reduce using rule 48 (Modifiers -> Modifier .)
    BYTE            reduce using rule 48 (Modifiers -> Modifier .)
    SHORT           reduce using rule 48 (Modifiers -> Modifier .)
    INT             reduce using rule 48 (Modifiers -> Modifier .)
    LONG            reduce using rule 48 (Modifiers -> Modifier .)
    FLOAT           reduce using rule 48 (Modifiers -> Modifier .)
    DOUBLE          reduce using rule 48 (Modifiers -> Modifier .)
    VOID            reduce using rule 48 (Modifiers -> Modifier .)


state 18

    (0) S' -> CompilationUnit .



state 19

    (43) ClassHeader -> ClassWord . IDENTIFIER Extends Interfaces
    (45) ClassHeader -> ClassWord . IDENTIFIER Extends
    (46) ClassHeader -> ClassWord . IDENTIFIER Interfaces
    (47) ClassHeader -> ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 36


state 20

    (23) ProgramFile -> ImportStatements . TypeDeclarations
    (25) ProgramFile -> ImportStatements .
    (33) ImportStatements -> ImportStatements . ImportStatement
    (28) TypeDeclarations -> . TypeDeclarationOptSemi
    (29) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (34) ImportStatement -> . IMPORT QualifiedName SemiColons
    (35) ImportStatement -> . IMPORT QualifiedName DOT * SemiColons
    (30) TypeDeclarationOptSemi -> . TypeDeclaration
    (31) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (38) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (42) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (44) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (45) ClassHeader -> . ClassWord IDENTIFIER Extends
    (46) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (47) ClassHeader -> . ClassWord IDENTIFIER
    (48) Modifiers -> . Modifier
    (49) Modifiers -> . Modifiers Modifier
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 25 (ProgramFile -> ImportStatements .)
    IMPORT          shift and go to state 11
    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 6
    TypeDeclaration                shift and go to state 5
    TypeDeclarations               shift and go to state 38
    ImportStatement                shift and go to state 37
    ClassHeader                    shift and go to state 23
    Modifier                       shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 13

state 21

    (26) ProgramFile -> TypeDeclarations .
    (29) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (30) TypeDeclarationOptSemi -> . TypeDeclaration
    (31) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (38) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (42) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (44) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (45) ClassHeader -> . ClassWord IDENTIFIER Extends
    (46) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (47) ClassHeader -> . ClassWord IDENTIFIER
    (48) Modifiers -> . Modifier
    (49) Modifiers -> . Modifiers Modifier
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 26 (ProgramFile -> TypeDeclarations .)
    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 6
    TypeDeclaration                shift and go to state 5
    ClassHeader                    shift and go to state 23
    Modifier                       shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 39

state 22

    (53) Modifier -> PROTECTED .

    CLASS           reduce using rule 53 (Modifier -> PROTECTED .)
    INTERFACE       reduce using rule 53 (Modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 53 (Modifier -> PROTECTED .)
    FINAL           reduce using rule 53 (Modifier -> PROTECTED .)
    PUBLIC          reduce using rule 53 (Modifier -> PROTECTED .)
    PROTECTED       reduce using rule 53 (Modifier -> PROTECTED .)
    PRIVATE         reduce using rule 53 (Modifier -> PROTECTED .)
    STATIC          reduce using rule 53 (Modifier -> PROTECTED .)
    TRANSIENT       reduce using rule 53 (Modifier -> PROTECTED .)
    VOLATILE        reduce using rule 53 (Modifier -> PROTECTED .)
    NATIVE          reduce using rule 53 (Modifier -> PROTECTED .)
    SYNCHRONIZED    reduce using rule 53 (Modifier -> PROTECTED .)
    IDENTIFIER      reduce using rule 53 (Modifier -> PROTECTED .)
    BOOLEAN         reduce using rule 53 (Modifier -> PROTECTED .)
    CHAR            reduce using rule 53 (Modifier -> PROTECTED .)
    BYTE            reduce using rule 53 (Modifier -> PROTECTED .)
    SHORT           reduce using rule 53 (Modifier -> PROTECTED .)
    INT             reduce using rule 53 (Modifier -> PROTECTED .)
    LONG            reduce using rule 53 (Modifier -> PROTECTED .)
    FLOAT           reduce using rule 53 (Modifier -> PROTECTED .)
    DOUBLE          reduce using rule 53 (Modifier -> PROTECTED .)
    VOID            reduce using rule 53 (Modifier -> PROTECTED .)


state 23

    (38) TypeDeclaration -> ClassHeader . LCURPAREN FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> ClassHeader . LCURPAREN RCURPAREN

    LCURPAREN       shift and go to state 40


state 24

    (61) ClassWord -> INTERFACE .

    IDENTIFIER      reduce using rule 61 (ClassWord -> INTERFACE .)


state 25

    (55) Modifier -> STATIC .

    CLASS           reduce using rule 55 (Modifier -> STATIC .)
    INTERFACE       reduce using rule 55 (Modifier -> STATIC .)
    ABSTRACT        reduce using rule 55 (Modifier -> STATIC .)
    FINAL           reduce using rule 55 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 55 (Modifier -> STATIC .)
    PROTECTED       reduce using rule 55 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 55 (Modifier -> STATIC .)
    STATIC          reduce using rule 55 (Modifier -> STATIC .)
    TRANSIENT       reduce using rule 55 (Modifier -> STATIC .)
    VOLATILE        reduce using rule 55 (Modifier -> STATIC .)
    NATIVE          reduce using rule 55 (Modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 55 (Modifier -> STATIC .)
    IDENTIFIER      reduce using rule 55 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 55 (Modifier -> STATIC .)
    CHAR            reduce using rule 55 (Modifier -> STATIC .)
    BYTE            reduce using rule 55 (Modifier -> STATIC .)
    SHORT           reduce using rule 55 (Modifier -> STATIC .)
    INT             reduce using rule 55 (Modifier -> STATIC .)
    LONG            reduce using rule 55 (Modifier -> STATIC .)
    FLOAT           reduce using rule 55 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 55 (Modifier -> STATIC .)
    VOID            reduce using rule 55 (Modifier -> STATIC .)


state 26

    (52) Modifier -> PUBLIC .

    CLASS           reduce using rule 52 (Modifier -> PUBLIC .)
    INTERFACE       reduce using rule 52 (Modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 52 (Modifier -> PUBLIC .)
    FINAL           reduce using rule 52 (Modifier -> PUBLIC .)
    PUBLIC          reduce using rule 52 (Modifier -> PUBLIC .)
    PROTECTED       reduce using rule 52 (Modifier -> PUBLIC .)
    PRIVATE         reduce using rule 52 (Modifier -> PUBLIC .)
    STATIC          reduce using rule 52 (Modifier -> PUBLIC .)
    TRANSIENT       reduce using rule 52 (Modifier -> PUBLIC .)
    VOLATILE        reduce using rule 52 (Modifier -> PUBLIC .)
    NATIVE          reduce using rule 52 (Modifier -> PUBLIC .)
    SYNCHRONIZED    reduce using rule 52 (Modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 52 (Modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 52 (Modifier -> PUBLIC .)
    CHAR            reduce using rule 52 (Modifier -> PUBLIC .)
    BYTE            reduce using rule 52 (Modifier -> PUBLIC .)
    SHORT           reduce using rule 52 (Modifier -> PUBLIC .)
    INT             reduce using rule 52 (Modifier -> PUBLIC .)
    LONG            reduce using rule 52 (Modifier -> PUBLIC .)
    FLOAT           reduce using rule 52 (Modifier -> PUBLIC .)
    DOUBLE          reduce using rule 52 (Modifier -> PUBLIC .)
    VOID            reduce using rule 52 (Modifier -> PUBLIC .)


state 27

    (31) TypeDeclarationOptSemi -> TypeDeclaration SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    CLASS           reduce using rule 31 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    INTERFACE       reduce using rule 31 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    ABSTRACT        reduce using rule 31 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    FINAL           reduce using rule 31 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PUBLIC          reduce using rule 31 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PROTECTED       reduce using rule 31 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PRIVATE         reduce using rule 31 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    STATIC          reduce using rule 31 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    TRANSIENT       reduce using rule 31 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    VOLATILE        reduce using rule 31 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    NATIVE          reduce using rule 31 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    SYNCHRONIZED    reduce using rule 31 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    $end            reduce using rule 31 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    SEMICOLON       shift and go to state 41


state 28

    (18) SemiColons -> SEMICOLON .

    SEMICOLON       reduce using rule 18 (SemiColons -> SEMICOLON .)
    IMPORT          reduce using rule 18 (SemiColons -> SEMICOLON .)
    CLASS           reduce using rule 18 (SemiColons -> SEMICOLON .)
    INTERFACE       reduce using rule 18 (SemiColons -> SEMICOLON .)
    ABSTRACT        reduce using rule 18 (SemiColons -> SEMICOLON .)
    FINAL           reduce using rule 18 (SemiColons -> SEMICOLON .)
    PUBLIC          reduce using rule 18 (SemiColons -> SEMICOLON .)
    PROTECTED       reduce using rule 18 (SemiColons -> SEMICOLON .)
    PRIVATE         reduce using rule 18 (SemiColons -> SEMICOLON .)
    STATIC          reduce using rule 18 (SemiColons -> SEMICOLON .)
    TRANSIENT       reduce using rule 18 (SemiColons -> SEMICOLON .)
    VOLATILE        reduce using rule 18 (SemiColons -> SEMICOLON .)
    NATIVE          reduce using rule 18 (SemiColons -> SEMICOLON .)
    SYNCHRONIZED    reduce using rule 18 (SemiColons -> SEMICOLON .)
    $end            reduce using rule 18 (SemiColons -> SEMICOLON .)
    RCURPAREN       reduce using rule 18 (SemiColons -> SEMICOLON .)
    IDENTIFIER      reduce using rule 18 (SemiColons -> SEMICOLON .)
    LCURPAREN       reduce using rule 18 (SemiColons -> SEMICOLON .)
    BOOLEAN         reduce using rule 18 (SemiColons -> SEMICOLON .)
    CHAR            reduce using rule 18 (SemiColons -> SEMICOLON .)
    BYTE            reduce using rule 18 (SemiColons -> SEMICOLON .)
    SHORT           reduce using rule 18 (SemiColons -> SEMICOLON .)
    INT             reduce using rule 18 (SemiColons -> SEMICOLON .)
    LONG            reduce using rule 18 (SemiColons -> SEMICOLON .)
    FLOAT           reduce using rule 18 (SemiColons -> SEMICOLON .)
    DOUBLE          reduce using rule 18 (SemiColons -> SEMICOLON .)
    VOID            reduce using rule 18 (SemiColons -> SEMICOLON .)


state 29

    (40) ClassHeader -> Modifiers ClassWord . IDENTIFIER Extends Interfaces
    (41) ClassHeader -> Modifiers ClassWord . IDENTIFIER Extends
    (42) ClassHeader -> Modifiers ClassWord . IDENTIFIER Interfaces
    (44) ClassHeader -> Modifiers ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 42


state 30

    (49) Modifiers -> Modifiers Modifier .

    CLASS           reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    INTERFACE       reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    ABSTRACT        reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    FINAL           reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    PUBLIC          reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    PROTECTED       reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    PRIVATE         reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    STATIC          reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    TRANSIENT       reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    VOLATILE        reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    NATIVE          reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    SYNCHRONIZED    reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    IDENTIFIER      reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    BOOLEAN         reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    CHAR            reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    BYTE            reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    SHORT           reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    INT             reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    LONG            reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    FLOAT           reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    DOUBLE          reduce using rule 49 (Modifiers -> Modifiers Modifier .)
    VOID            reduce using rule 49 (Modifiers -> Modifiers Modifier .)


state 31

    (34) ImportStatement -> IMPORT QualifiedName . SemiColons
    (35) ImportStatement -> IMPORT QualifiedName . DOT * SemiColons
    (37) QualifiedName -> QualifiedName . DOT IDENTIFIER
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    DOT             shift and go to state 44
    SEMICOLON       shift and go to state 28

    SemiColons                     shift and go to state 43

state 32

    (36) QualifiedName -> IDENTIFIER .

    DOT             reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    LSQPAREN        reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_INC          reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_DEC          reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    =               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_MUL         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_DIV         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_MOD         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_ADD         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_SUB         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_SHL         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_SHR         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_SHRR        reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_AND         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_XOR         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_OR          reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    *               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    /               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    %               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    +               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    -               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_SHL          reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_SHR          reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_SHRR         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    <               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    >               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    INSTANCEOF      reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    RSQPAREN        reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    LROUNPAREN      reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    RCURPAREN       reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    COMMA           reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    RROUNPAREN      reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    COLON           reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    LCURPAREN       reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    IMPLEMENTS      reduce using rule 36 (QualifiedName -> IDENTIFIER .)


state 33

    (27) PackageStatement -> PACKAGE QualifiedName . SemiColons
    (37) QualifiedName -> QualifiedName . DOT IDENTIFIER
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    DOT             shift and go to state 46
    SEMICOLON       shift and go to state 28

    SemiColons                     shift and go to state 45

state 34

    (20) ProgramFile -> PackageStatement ImportStatements . TypeDeclarations
    (21) ProgramFile -> PackageStatement ImportStatements .
    (33) ImportStatements -> ImportStatements . ImportStatement
    (28) TypeDeclarations -> . TypeDeclarationOptSemi
    (29) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (34) ImportStatement -> . IMPORT QualifiedName SemiColons
    (35) ImportStatement -> . IMPORT QualifiedName DOT * SemiColons
    (30) TypeDeclarationOptSemi -> . TypeDeclaration
    (31) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (38) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (42) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (44) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (45) ClassHeader -> . ClassWord IDENTIFIER Extends
    (46) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (47) ClassHeader -> . ClassWord IDENTIFIER
    (48) Modifiers -> . Modifier
    (49) Modifiers -> . Modifiers Modifier
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 21 (ProgramFile -> PackageStatement ImportStatements .)
    IMPORT          shift and go to state 11
    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 6
    Modifier                       shift and go to state 17
    TypeDeclaration                shift and go to state 5
    TypeDeclarations               shift and go to state 47
    ImportStatement                shift and go to state 37
    ClassHeader                    shift and go to state 23
    TypeDeclarationOptSemi         shift and go to state 13

state 35

    (22) ProgramFile -> PackageStatement TypeDeclarations .
    (29) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (30) TypeDeclarationOptSemi -> . TypeDeclaration
    (31) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (38) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (42) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (44) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (45) ClassHeader -> . ClassWord IDENTIFIER Extends
    (46) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (47) ClassHeader -> . ClassWord IDENTIFIER
    (48) Modifiers -> . Modifier
    (49) Modifiers -> . Modifiers Modifier
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 22 (ProgramFile -> PackageStatement TypeDeclarations .)
    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 6
    Modifier                       shift and go to state 17
    TypeDeclaration                shift and go to state 5
    ClassHeader                    shift and go to state 23
    TypeDeclarationOptSemi         shift and go to state 39

state 36

    (43) ClassHeader -> ClassWord IDENTIFIER . Extends Interfaces
    (45) ClassHeader -> ClassWord IDENTIFIER . Extends
    (46) ClassHeader -> ClassWord IDENTIFIER . Interfaces
    (47) ClassHeader -> ClassWord IDENTIFIER .
    (109) Extends -> . EXTENDS TypeName
    (110) Extends -> . Extends COMMA TypeName
    (62) Interfaces -> . IMPLEMENTS ClassNameList

    LCURPAREN       reduce using rule 47 (ClassHeader -> ClassWord IDENTIFIER .)
    EXTENDS         shift and go to state 50
    IMPLEMENTS      shift and go to state 48

    Interfaces                     shift and go to state 49
    Extends                        shift and go to state 51

state 37

    (33) ImportStatements -> ImportStatements ImportStatement .

    IMPORT          reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)
    CLASS           reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)
    INTERFACE       reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)
    ABSTRACT        reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)
    FINAL           reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)
    PUBLIC          reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)
    PROTECTED       reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)
    PRIVATE         reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)
    STATIC          reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)
    TRANSIENT       reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)
    VOLATILE        reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)
    NATIVE          reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)
    SYNCHRONIZED    reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)
    $end            reduce using rule 33 (ImportStatements -> ImportStatements ImportStatement .)


state 38

    (23) ProgramFile -> ImportStatements TypeDeclarations .
    (29) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (30) TypeDeclarationOptSemi -> . TypeDeclaration
    (31) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (38) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (42) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (44) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (45) ClassHeader -> . ClassWord IDENTIFIER Extends
    (46) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (47) ClassHeader -> . ClassWord IDENTIFIER
    (48) Modifiers -> . Modifier
    (49) Modifiers -> . Modifiers Modifier
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 23 (ProgramFile -> ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 6
    TypeDeclaration                shift and go to state 5
    ClassHeader                    shift and go to state 23
    Modifier                       shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 39

state 39

    (29) TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .

    CLASS           reduce using rule 29 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    INTERFACE       reduce using rule 29 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    ABSTRACT        reduce using rule 29 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    FINAL           reduce using rule 29 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 29 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PROTECTED       reduce using rule 29 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 29 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    STATIC          reduce using rule 29 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    TRANSIENT       reduce using rule 29 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    VOLATILE        reduce using rule 29 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    NATIVE          reduce using rule 29 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    SYNCHRONIZED    reduce using rule 29 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    $end            reduce using rule 29 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)


state 40

    (38) TypeDeclaration -> ClassHeader LCURPAREN . FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> ClassHeader LCURPAREN . RCURPAREN
    (63) FieldDeclarations -> . FieldDeclarationOptSemi
    (64) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (65) FieldDeclarationOptSemi -> . FieldDeclaration
    (66) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (67) FieldDeclaration -> . FieldVariableDeclaration SEMICOLON
    (68) FieldDeclaration -> . MethodDeclaration
    (69) FieldDeclaration -> . ConstructorDeclaration
    (70) FieldDeclaration -> . StaticInitializer
    (71) FieldDeclaration -> . NonStaticInitializer
    (72) FieldDeclaration -> . TypeDeclaration
    (73) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (74) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (85) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator Throws MethodBody
    (86) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (87) MethodDeclaration -> . TypeSpecifier MethodDeclarator Throws MethodBody
    (88) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (101) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Throws Block
    (102) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (103) ConstructorDeclaration -> . ConstructorDeclarator Throws Block
    (104) ConstructorDeclaration -> . ConstructorDeclarator Block
    (107) StaticInitializer -> . STATIC Block
    (108) NonStaticInitializer -> . Block
    (38) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (48) Modifiers -> . Modifier
    (49) Modifiers -> . Modifiers Modifier
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (105) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (106) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (42) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (44) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (45) ClassHeader -> . ClassWord IDENTIFIER Extends
    (46) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (47) ClassHeader -> . ClassWord IDENTIFIER
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RCURPAREN       shift and go to state 71
    STATIC          shift and go to state 60
    IDENTIFIER      shift and go to state 66
    LCURPAREN       shift and go to state 69
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2
    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    ConstructorDeclaration         shift and go to state 53
    FieldVariableDeclaration       shift and go to state 54
    TypeDeclaration                shift and go to state 55
    PrimitiveType                  shift and go to state 56
    StaticInitializer              shift and go to state 57
    NonStaticInitializer           shift and go to state 62
    TypeSpecifier                  shift and go to state 63
    QualifiedName                  shift and go to state 64
    TypeName                       shift and go to state 65
    MethodDeclaration              shift and go to state 67
    Modifiers                      shift and go to state 59
    FieldDeclarations              shift and go to state 72
    Modifier                       shift and go to state 17
    Block                          shift and go to state 73
    ClassWord                      shift and go to state 19
    FieldDeclarationOptSemi        shift and go to state 74
    ConstructorDeclarator          shift and go to state 75
    ClassHeader                    shift and go to state 23
    FieldDeclaration               shift and go to state 80

state 41

    (19) SemiColons -> SemiColons SEMICOLON .

    SEMICOLON       reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    IMPORT          reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    CLASS           reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    INTERFACE       reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    ABSTRACT        reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    FINAL           reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    PUBLIC          reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    PROTECTED       reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    PRIVATE         reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    STATIC          reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    TRANSIENT       reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    VOLATILE        reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    NATIVE          reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    SYNCHRONIZED    reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    $end            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    RCURPAREN       reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    IDENTIFIER      reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    LCURPAREN       reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    BOOLEAN         reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    CHAR            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    BYTE            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    SHORT           reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    INT             reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    LONG            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    FLOAT           reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    DOUBLE          reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    VOID            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)


state 42

    (40) ClassHeader -> Modifiers ClassWord IDENTIFIER . Extends Interfaces
    (41) ClassHeader -> Modifiers ClassWord IDENTIFIER . Extends
    (42) ClassHeader -> Modifiers ClassWord IDENTIFIER . Interfaces
    (44) ClassHeader -> Modifiers ClassWord IDENTIFIER .
    (109) Extends -> . EXTENDS TypeName
    (110) Extends -> . Extends COMMA TypeName
    (62) Interfaces -> . IMPLEMENTS ClassNameList

    LCURPAREN       reduce using rule 44 (ClassHeader -> Modifiers ClassWord IDENTIFIER .)
    EXTENDS         shift and go to state 50
    IMPLEMENTS      shift and go to state 48

    Interfaces                     shift and go to state 81
    Extends                        shift and go to state 82

state 43

    (34) ImportStatement -> IMPORT QualifiedName SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    IMPORT          reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    CLASS           reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    INTERFACE       reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    ABSTRACT        reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    FINAL           reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PUBLIC          reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PROTECTED       reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PRIVATE         reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    STATIC          reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    TRANSIENT       reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    VOLATILE        reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    NATIVE          reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    SYNCHRONIZED    reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    $end            reduce using rule 34 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    SEMICOLON       shift and go to state 41


state 44

    (35) ImportStatement -> IMPORT QualifiedName DOT . * SemiColons
    (37) QualifiedName -> QualifiedName DOT . IDENTIFIER

    *               shift and go to state 83
    IDENTIFIER      shift and go to state 84


state 45

    (27) PackageStatement -> PACKAGE QualifiedName SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    IMPORT          reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    CLASS           reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    INTERFACE       reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    ABSTRACT        reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    FINAL           reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PUBLIC          reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PROTECTED       reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PRIVATE         reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    STATIC          reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    TRANSIENT       reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    VOLATILE        reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    NATIVE          reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    SYNCHRONIZED    reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    $end            reduce using rule 27 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    SEMICOLON       shift and go to state 41


state 46

    (37) QualifiedName -> QualifiedName DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 84


state 47

    (20) ProgramFile -> PackageStatement ImportStatements TypeDeclarations .
    (29) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (30) TypeDeclarationOptSemi -> . TypeDeclaration
    (31) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (38) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (42) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (44) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (45) ClassHeader -> . ClassWord IDENTIFIER Extends
    (46) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (47) ClassHeader -> . ClassWord IDENTIFIER
    (48) Modifiers -> . Modifier
    (49) Modifiers -> . Modifiers Modifier
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 20 (ProgramFile -> PackageStatement ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 6
    Modifier                       shift and go to state 17
    TypeDeclaration                shift and go to state 5
    ClassHeader                    shift and go to state 23
    TypeDeclarationOptSemi         shift and go to state 39

state 48

    (62) Interfaces -> IMPLEMENTS . ClassNameList
    (7) ClassNameList -> . QualifiedName
    (8) ClassNameList -> . ClassNameList COMMA QualifiedName
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    IDENTIFIER      shift and go to state 32

    QualifiedName                  shift and go to state 85
    ClassNameList                  shift and go to state 86

state 49

    (46) ClassHeader -> ClassWord IDENTIFIER Interfaces .

    LCURPAREN       reduce using rule 46 (ClassHeader -> ClassWord IDENTIFIER Interfaces .)


state 50

    (109) Extends -> EXTENDS . TypeName
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    IDENTIFIER      shift and go to state 32

    TypeName                       shift and go to state 87
    QualifiedName                  shift and go to state 64
    PrimitiveType                  shift and go to state 56

state 51

    (43) ClassHeader -> ClassWord IDENTIFIER Extends . Interfaces
    (45) ClassHeader -> ClassWord IDENTIFIER Extends .
    (110) Extends -> Extends . COMMA TypeName
    (62) Interfaces -> . IMPLEMENTS ClassNameList

    LCURPAREN       reduce using rule 45 (ClassHeader -> ClassWord IDENTIFIER Extends .)
    COMMA           shift and go to state 89
    IMPLEMENTS      shift and go to state 48

    Interfaces                     shift and go to state 88

state 52

    (12) PrimitiveType -> SHORT .

    DOT             reduce using rule 12 (PrimitiveType -> SHORT .)
    LSQPAREN        reduce using rule 12 (PrimitiveType -> SHORT .)
    IDENTIFIER      reduce using rule 12 (PrimitiveType -> SHORT .)
    COMMA           reduce using rule 12 (PrimitiveType -> SHORT .)
    IMPLEMENTS      reduce using rule 12 (PrimitiveType -> SHORT .)
    LCURPAREN       reduce using rule 12 (PrimitiveType -> SHORT .)
    RROUNPAREN      reduce using rule 12 (PrimitiveType -> SHORT .)
    LROUNPAREN      reduce using rule 12 (PrimitiveType -> SHORT .)
    <               reduce using rule 12 (PrimitiveType -> SHORT .)
    >               reduce using rule 12 (PrimitiveType -> SHORT .)
    OP_LE           reduce using rule 12 (PrimitiveType -> SHORT .)
    OP_GE           reduce using rule 12 (PrimitiveType -> SHORT .)
    INSTANCEOF      reduce using rule 12 (PrimitiveType -> SHORT .)
    OP_EQ           reduce using rule 12 (PrimitiveType -> SHORT .)
    OP_NE           reduce using rule 12 (PrimitiveType -> SHORT .)
    &               reduce using rule 12 (PrimitiveType -> SHORT .)
    ^               reduce using rule 12 (PrimitiveType -> SHORT .)
    |               reduce using rule 12 (PrimitiveType -> SHORT .)
    OP_LAND         reduce using rule 12 (PrimitiveType -> SHORT .)
    ?               reduce using rule 12 (PrimitiveType -> SHORT .)
    OP_LOR          reduce using rule 12 (PrimitiveType -> SHORT .)
    SEMICOLON       reduce using rule 12 (PrimitiveType -> SHORT .)
    COLON           reduce using rule 12 (PrimitiveType -> SHORT .)
    RCURPAREN       reduce using rule 12 (PrimitiveType -> SHORT .)
    RSQPAREN        reduce using rule 12 (PrimitiveType -> SHORT .)


state 53

    (69) FieldDeclaration -> ConstructorDeclaration .

    SEMICOLON       reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    RCURPAREN       reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    STATIC          reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    IDENTIFIER      reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    LCURPAREN       reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    ABSTRACT        reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    FINAL           reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    PUBLIC          reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    PROTECTED       reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    PRIVATE         reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    TRANSIENT       reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    VOLATILE        reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    NATIVE          reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    SYNCHRONIZED    reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    CLASS           reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    INTERFACE       reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    BOOLEAN         reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    CHAR            reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    BYTE            reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    SHORT           reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    INT             reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    LONG            reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    FLOAT           reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    DOUBLE          reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)
    VOID            reduce using rule 69 (FieldDeclaration -> ConstructorDeclaration .)


state 54

    (67) FieldDeclaration -> FieldVariableDeclaration . SEMICOLON

    SEMICOLON       shift and go to state 90


state 55

    (72) FieldDeclaration -> TypeDeclaration .

    SEMICOLON       reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    RCURPAREN       reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    STATIC          reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    IDENTIFIER      reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    LCURPAREN       reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    ABSTRACT        reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    FINAL           reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    PUBLIC          reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    PROTECTED       reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    PRIVATE         reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    TRANSIENT       reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    VOLATILE        reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    NATIVE          reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    SYNCHRONIZED    reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    CLASS           reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    INTERFACE       reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    BOOLEAN         reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    CHAR            reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    BYTE            reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    SHORT           reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    INT             reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    LONG            reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    FLOAT           reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    DOUBLE          reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)
    VOID            reduce using rule 72 (FieldDeclaration -> TypeDeclaration .)


state 56

    (5) TypeName -> PrimitiveType .

    LSQPAREN        reduce using rule 5 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 5 (TypeName -> PrimitiveType .)
    <               reduce using rule 5 (TypeName -> PrimitiveType .)
    >               reduce using rule 5 (TypeName -> PrimitiveType .)
    OP_LE           reduce using rule 5 (TypeName -> PrimitiveType .)
    OP_GE           reduce using rule 5 (TypeName -> PrimitiveType .)
    INSTANCEOF      reduce using rule 5 (TypeName -> PrimitiveType .)
    OP_EQ           reduce using rule 5 (TypeName -> PrimitiveType .)
    OP_NE           reduce using rule 5 (TypeName -> PrimitiveType .)
    &               reduce using rule 5 (TypeName -> PrimitiveType .)
    ^               reduce using rule 5 (TypeName -> PrimitiveType .)
    |               reduce using rule 5 (TypeName -> PrimitiveType .)
    OP_LAND         reduce using rule 5 (TypeName -> PrimitiveType .)
    ?               reduce using rule 5 (TypeName -> PrimitiveType .)
    OP_LOR          reduce using rule 5 (TypeName -> PrimitiveType .)
    SEMICOLON       reduce using rule 5 (TypeName -> PrimitiveType .)
    RROUNPAREN      reduce using rule 5 (TypeName -> PrimitiveType .)
    COLON           reduce using rule 5 (TypeName -> PrimitiveType .)
    COMMA           reduce using rule 5 (TypeName -> PrimitiveType .)
    RCURPAREN       reduce using rule 5 (TypeName -> PrimitiveType .)
    RSQPAREN        reduce using rule 5 (TypeName -> PrimitiveType .)
    LROUNPAREN      reduce using rule 5 (TypeName -> PrimitiveType .)
    IMPLEMENTS      reduce using rule 5 (TypeName -> PrimitiveType .)
    LCURPAREN       reduce using rule 5 (TypeName -> PrimitiveType .)


state 57

    (70) FieldDeclaration -> StaticInitializer .

    SEMICOLON       reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    RCURPAREN       reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    STATIC          reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    IDENTIFIER      reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    LCURPAREN       reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    ABSTRACT        reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    FINAL           reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    PUBLIC          reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    PROTECTED       reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    PRIVATE         reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    TRANSIENT       reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    VOLATILE        reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    NATIVE          reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    SYNCHRONIZED    reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    CLASS           reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    INTERFACE       reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    BOOLEAN         reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    CHAR            reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    BYTE            reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    SHORT           reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    INT             reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    LONG            reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    FLOAT           reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    DOUBLE          reduce using rule 70 (FieldDeclaration -> StaticInitializer .)
    VOID            reduce using rule 70 (FieldDeclaration -> StaticInitializer .)


state 58

    (9) PrimitiveType -> BOOLEAN .

    DOT             reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    LSQPAREN        reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    IDENTIFIER      reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    COMMA           reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    IMPLEMENTS      reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    LCURPAREN       reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    RROUNPAREN      reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    LROUNPAREN      reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    <               reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    >               reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    OP_LE           reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    OP_GE           reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    INSTANCEOF      reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    OP_EQ           reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    OP_NE           reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    &               reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    ^               reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    |               reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    OP_LAND         reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    ?               reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    OP_LOR          reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    SEMICOLON       reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    COLON           reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    RCURPAREN       reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    RSQPAREN        reduce using rule 9 (PrimitiveType -> BOOLEAN .)


state 59

    (73) FieldVariableDeclaration -> Modifiers . TypeSpecifier VariableDeclarators
    (85) MethodDeclaration -> Modifiers . TypeSpecifier MethodDeclarator Throws MethodBody
    (86) MethodDeclaration -> Modifiers . TypeSpecifier MethodDeclarator MethodBody
    (101) ConstructorDeclaration -> Modifiers . ConstructorDeclarator Throws Block
    (102) ConstructorDeclaration -> Modifiers . ConstructorDeclarator Block
    (49) Modifiers -> Modifiers . Modifier
    (40) ClassHeader -> Modifiers . ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> Modifiers . ClassWord IDENTIFIER Extends
    (42) ClassHeader -> Modifiers . ClassWord IDENTIFIER Interfaces
    (44) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (105) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (106) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    IDENTIFIER      shift and go to state 66
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2
    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    QualifiedName                  shift and go to state 64
    ConstructorDeclarator          shift and go to state 92
    ClassWord                      shift and go to state 29
    PrimitiveType                  shift and go to state 56
    TypeSpecifier                  shift and go to state 91
    TypeName                       shift and go to state 65
    Modifier                       shift and go to state 30

state 60

    (107) StaticInitializer -> STATIC . Block
    (55) Modifier -> STATIC .
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN

    IDENTIFIER      reduce using rule 55 (Modifier -> STATIC .)
    ABSTRACT        reduce using rule 55 (Modifier -> STATIC .)
    FINAL           reduce using rule 55 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 55 (Modifier -> STATIC .)
    PROTECTED       reduce using rule 55 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 55 (Modifier -> STATIC .)
    STATIC          reduce using rule 55 (Modifier -> STATIC .)
    TRANSIENT       reduce using rule 55 (Modifier -> STATIC .)
    VOLATILE        reduce using rule 55 (Modifier -> STATIC .)
    NATIVE          reduce using rule 55 (Modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 55 (Modifier -> STATIC .)
    CLASS           reduce using rule 55 (Modifier -> STATIC .)
    INTERFACE       reduce using rule 55 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 55 (Modifier -> STATIC .)
    CHAR            reduce using rule 55 (Modifier -> STATIC .)
    BYTE            reduce using rule 55 (Modifier -> STATIC .)
    SHORT           reduce using rule 55 (Modifier -> STATIC .)
    INT             reduce using rule 55 (Modifier -> STATIC .)
    LONG            reduce using rule 55 (Modifier -> STATIC .)
    FLOAT           reduce using rule 55 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 55 (Modifier -> STATIC .)
    VOID            reduce using rule 55 (Modifier -> STATIC .)
    LCURPAREN       shift and go to state 69

    Block                          shift and go to state 93

state 61

    (14) PrimitiveType -> LONG .

    DOT             reduce using rule 14 (PrimitiveType -> LONG .)
    LSQPAREN        reduce using rule 14 (PrimitiveType -> LONG .)
    IDENTIFIER      reduce using rule 14 (PrimitiveType -> LONG .)
    COMMA           reduce using rule 14 (PrimitiveType -> LONG .)
    IMPLEMENTS      reduce using rule 14 (PrimitiveType -> LONG .)
    LCURPAREN       reduce using rule 14 (PrimitiveType -> LONG .)
    RROUNPAREN      reduce using rule 14 (PrimitiveType -> LONG .)
    LROUNPAREN      reduce using rule 14 (PrimitiveType -> LONG .)
    <               reduce using rule 14 (PrimitiveType -> LONG .)
    >               reduce using rule 14 (PrimitiveType -> LONG .)
    OP_LE           reduce using rule 14 (PrimitiveType -> LONG .)
    OP_GE           reduce using rule 14 (PrimitiveType -> LONG .)
    INSTANCEOF      reduce using rule 14 (PrimitiveType -> LONG .)
    OP_EQ           reduce using rule 14 (PrimitiveType -> LONG .)
    OP_NE           reduce using rule 14 (PrimitiveType -> LONG .)
    &               reduce using rule 14 (PrimitiveType -> LONG .)
    ^               reduce using rule 14 (PrimitiveType -> LONG .)
    |               reduce using rule 14 (PrimitiveType -> LONG .)
    OP_LAND         reduce using rule 14 (PrimitiveType -> LONG .)
    ?               reduce using rule 14 (PrimitiveType -> LONG .)
    OP_LOR          reduce using rule 14 (PrimitiveType -> LONG .)
    SEMICOLON       reduce using rule 14 (PrimitiveType -> LONG .)
    COLON           reduce using rule 14 (PrimitiveType -> LONG .)
    RCURPAREN       reduce using rule 14 (PrimitiveType -> LONG .)
    RSQPAREN        reduce using rule 14 (PrimitiveType -> LONG .)


state 62

    (71) FieldDeclaration -> NonStaticInitializer .

    SEMICOLON       reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    RCURPAREN       reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    STATIC          reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    IDENTIFIER      reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    LCURPAREN       reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    ABSTRACT        reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    FINAL           reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    PUBLIC          reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    PROTECTED       reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    PRIVATE         reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    TRANSIENT       reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    VOLATILE        reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    NATIVE          reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    SYNCHRONIZED    reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    CLASS           reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    INTERFACE       reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    BOOLEAN         reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    CHAR            reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    BYTE            reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    SHORT           reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    INT             reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    LONG            reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    FLOAT           reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    DOUBLE          reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)
    VOID            reduce using rule 71 (FieldDeclaration -> NonStaticInitializer .)


state 63

    (74) FieldVariableDeclaration -> TypeSpecifier . VariableDeclarators
    (87) MethodDeclaration -> TypeSpecifier . MethodDeclarator Throws MethodBody
    (88) MethodDeclaration -> TypeSpecifier . MethodDeclarator MethodBody
    (75) VariableDeclarators -> . VariableDeclarator
    (76) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (89) MethodDeclarator -> . DeclaratorName LROUNPAREN ParameterList RROUNPAREN
    (90) MethodDeclarator -> . DeclaratorName LROUNPAREN RROUNPAREN
    (91) MethodDeclarator -> . MethodDeclarator OP_DIM
    (77) VariableDeclarator -> . DeclaratorName
    (78) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (96) DeclaratorName -> . IDENTIFIER
    (97) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 97

    VariableDeclarators            shift and go to state 94
    DeclaratorName                 shift and go to state 95
    MethodDeclarator               shift and go to state 96
    VariableDeclarator             shift and go to state 98

state 64

    (6) TypeName -> QualifiedName .
    (37) QualifiedName -> QualifiedName . DOT IDENTIFIER

    LSQPAREN        reduce using rule 6 (TypeName -> QualifiedName .)
    IDENTIFIER      reduce using rule 6 (TypeName -> QualifiedName .)
    <               reduce using rule 6 (TypeName -> QualifiedName .)
    >               reduce using rule 6 (TypeName -> QualifiedName .)
    OP_LE           reduce using rule 6 (TypeName -> QualifiedName .)
    OP_GE           reduce using rule 6 (TypeName -> QualifiedName .)
    INSTANCEOF      reduce using rule 6 (TypeName -> QualifiedName .)
    OP_EQ           reduce using rule 6 (TypeName -> QualifiedName .)
    OP_NE           reduce using rule 6 (TypeName -> QualifiedName .)
    &               reduce using rule 6 (TypeName -> QualifiedName .)
    ^               reduce using rule 6 (TypeName -> QualifiedName .)
    |               reduce using rule 6 (TypeName -> QualifiedName .)
    OP_LAND         reduce using rule 6 (TypeName -> QualifiedName .)
    ?               reduce using rule 6 (TypeName -> QualifiedName .)
    OP_LOR          reduce using rule 6 (TypeName -> QualifiedName .)
    SEMICOLON       reduce using rule 6 (TypeName -> QualifiedName .)
    RROUNPAREN      reduce using rule 6 (TypeName -> QualifiedName .)
    COLON           reduce using rule 6 (TypeName -> QualifiedName .)
    COMMA           reduce using rule 6 (TypeName -> QualifiedName .)
    RCURPAREN       reduce using rule 6 (TypeName -> QualifiedName .)
    RSQPAREN        reduce using rule 6 (TypeName -> QualifiedName .)
    LROUNPAREN      reduce using rule 6 (TypeName -> QualifiedName .)
    IMPLEMENTS      reduce using rule 6 (TypeName -> QualifiedName .)
    LCURPAREN       reduce using rule 6 (TypeName -> QualifiedName .)
    DOT             shift and go to state 46


state 65

    (3) TypeSpecifier -> TypeName .
    (4) TypeSpecifier -> TypeName . Dims
    (209) Dims -> . OP_DIM
    (210) Dims -> . Dims OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    IDENTIFIER      reduce using rule 3 (TypeSpecifier -> TypeName .)
    <               reduce using rule 3 (TypeSpecifier -> TypeName .)
    >               reduce using rule 3 (TypeSpecifier -> TypeName .)
    OP_LE           reduce using rule 3 (TypeSpecifier -> TypeName .)
    OP_GE           reduce using rule 3 (TypeSpecifier -> TypeName .)
    INSTANCEOF      reduce using rule 3 (TypeSpecifier -> TypeName .)
    OP_EQ           reduce using rule 3 (TypeSpecifier -> TypeName .)
    OP_NE           reduce using rule 3 (TypeSpecifier -> TypeName .)
    &               reduce using rule 3 (TypeSpecifier -> TypeName .)
    ^               reduce using rule 3 (TypeSpecifier -> TypeName .)
    |               reduce using rule 3 (TypeSpecifier -> TypeName .)
    OP_LAND         reduce using rule 3 (TypeSpecifier -> TypeName .)
    ?               reduce using rule 3 (TypeSpecifier -> TypeName .)
    OP_LOR          reduce using rule 3 (TypeSpecifier -> TypeName .)
    SEMICOLON       reduce using rule 3 (TypeSpecifier -> TypeName .)
    RROUNPAREN      reduce using rule 3 (TypeSpecifier -> TypeName .)
    COLON           reduce using rule 3 (TypeSpecifier -> TypeName .)
    COMMA           reduce using rule 3 (TypeSpecifier -> TypeName .)
    RCURPAREN       reduce using rule 3 (TypeSpecifier -> TypeName .)
    RSQPAREN        reduce using rule 3 (TypeSpecifier -> TypeName .)
    LSQPAREN        shift and go to state 99

    OP_DIM                         shift and go to state 100
    Dims                           shift and go to state 101

state 66

    (105) ConstructorDeclarator -> IDENTIFIER . LROUNPAREN ParameterList RROUNPAREN
    (106) ConstructorDeclarator -> IDENTIFIER . LROUNPAREN RROUNPAREN
    (36) QualifiedName -> IDENTIFIER .

    LROUNPAREN      shift and go to state 102
    DOT             reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    LSQPAREN        reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 36 (QualifiedName -> IDENTIFIER .)


state 67

    (68) FieldDeclaration -> MethodDeclaration .

    SEMICOLON       reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    RCURPAREN       reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    STATIC          reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    IDENTIFIER      reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    LCURPAREN       reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    ABSTRACT        reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    FINAL           reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    PUBLIC          reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    PROTECTED       reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    PRIVATE         reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    TRANSIENT       reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    VOLATILE        reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    NATIVE          reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    SYNCHRONIZED    reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    CLASS           reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    INTERFACE       reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    BOOLEAN         reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    CHAR            reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    BYTE            reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    SHORT           reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    INT             reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    LONG            reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    FLOAT           reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    DOUBLE          reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)
    VOID            reduce using rule 68 (FieldDeclaration -> MethodDeclaration .)


state 68

    (10) PrimitiveType -> CHAR .

    DOT             reduce using rule 10 (PrimitiveType -> CHAR .)
    LSQPAREN        reduce using rule 10 (PrimitiveType -> CHAR .)
    IDENTIFIER      reduce using rule 10 (PrimitiveType -> CHAR .)
    COMMA           reduce using rule 10 (PrimitiveType -> CHAR .)
    IMPLEMENTS      reduce using rule 10 (PrimitiveType -> CHAR .)
    LCURPAREN       reduce using rule 10 (PrimitiveType -> CHAR .)
    RROUNPAREN      reduce using rule 10 (PrimitiveType -> CHAR .)
    LROUNPAREN      reduce using rule 10 (PrimitiveType -> CHAR .)
    <               reduce using rule 10 (PrimitiveType -> CHAR .)
    >               reduce using rule 10 (PrimitiveType -> CHAR .)
    OP_LE           reduce using rule 10 (PrimitiveType -> CHAR .)
    OP_GE           reduce using rule 10 (PrimitiveType -> CHAR .)
    INSTANCEOF      reduce using rule 10 (PrimitiveType -> CHAR .)
    OP_EQ           reduce using rule 10 (PrimitiveType -> CHAR .)
    OP_NE           reduce using rule 10 (PrimitiveType -> CHAR .)
    &               reduce using rule 10 (PrimitiveType -> CHAR .)
    ^               reduce using rule 10 (PrimitiveType -> CHAR .)
    |               reduce using rule 10 (PrimitiveType -> CHAR .)
    OP_LAND         reduce using rule 10 (PrimitiveType -> CHAR .)
    ?               reduce using rule 10 (PrimitiveType -> CHAR .)
    OP_LOR          reduce using rule 10 (PrimitiveType -> CHAR .)
    SEMICOLON       reduce using rule 10 (PrimitiveType -> CHAR .)
    COLON           reduce using rule 10 (PrimitiveType -> CHAR .)
    RCURPAREN       reduce using rule 10 (PrimitiveType -> CHAR .)
    RSQPAREN        reduce using rule 10 (PrimitiveType -> CHAR .)


state 69

    (111) Block -> LCURPAREN . LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> LCURPAREN . RCURPAREN
    (113) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationOrStatement
    (114) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
    (115) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (116) LocalVariableDeclarationOrStatement -> . Statement
    (117) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators SEMICOLON
    (118) LocalVariableDeclarationStatement -> . FINAL TypeSpecifier VariableDeclarators SEMICOLON
    (119) Statement -> . EmptyStatement
    (120) Statement -> . LabelStatement
    (121) Statement -> . ExpressionStatement SEMICOLON
    (122) Statement -> . SelectionStatement
    (123) Statement -> . IterationStatement
    (124) Statement -> . JumpStatement
    (125) Statement -> . GuardingStatement
    (126) Statement -> . Block
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (127) EmptyStatement -> . SEMICOLON
    (128) LabelStatement -> . IDENTIFIER COLON
    (129) LabelStatement -> . CASE ConstantExpression COLON
    (130) LabelStatement -> . DEFAULT COLON
    (131) ExpressionStatement -> . Expression
    (132) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement
    (133) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement
    (134) SelectionStatement -> . SWITCH LROUNPAREN Expression RROUNPAREN Block
    (135) IterationStatement -> . WHILE LROUNPAREN Expression RROUNPAREN Statement
    (136) IterationStatement -> . DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON
    (137) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement
    (138) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (147) JumpStatement -> . BREAK IDENTIFIER SEMICOLON
    (148) JumpStatement -> . BREAK SEMICOLON
    (149) JumpStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (150) JumpStatement -> . CONTINUE SEMICOLON
    (151) JumpStatement -> . RETURN Expression SEMICOLON
    (152) JumpStatement -> . RETURN SEMICOLON
    (153) JumpStatement -> . THROW Expression SEMICOLON
    (154) GuardingStatement -> . SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (278) Expression -> . AssignmentExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    RCURPAREN       shift and go to state 128
    FINAL           shift and go to state 116
    SEMICOLON       shift and go to state 150
    IDENTIFIER      shift and go to state 154
    CASE            shift and go to state 149
    DEFAULT         shift and go to state 142
    IF              shift and go to state 175
    SWITCH          shift and go to state 152
    WHILE           shift and go to state 144
    DO              shift and go to state 163
    FOR             shift and go to state 124
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 137
    RETURN          shift and go to state 112
    THROW           shift and go to state 179
    SYNCHRONIZED    shift and go to state 113
    TRY             shift and go to state 126
    LCURPAREN       shift and go to state 69
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146

    PostfixExpression              shift and go to state 133
    LabelStatement                 shift and go to state 111
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    ExpressionStatement            shift and go to state 103
    JumpStatement                  shift and go to state 143
    RealPostfixExpression          shift and go to state 114
    Statement                      shift and go to state 105
    AndExpression                  shift and go to state 106
    MultiplicativeExpression       shift and go to state 119
    TypeSpecifier                  shift and go to state 147
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    QualifiedName                  shift and go to state 167
    ComplexPrimaryNoParenthesis    shift and go to state 118
    GuardingStatement              shift and go to state 151
    ArrayAccess                    shift and go to state 129
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    TypeName                       shift and go to state 65
    ConditionalOrExpression        shift and go to state 153
    LocalVariableDeclarationStatement shift and go to state 169
    ShiftExpression                shift and go to state 170
    SelectionStatement             shift and go to state 122
    LocalVariableDeclarationsAndStatements shift and go to state 171
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimary                 shift and go to state 140
    PrimitiveType                  shift and go to state 104
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 159
    Expression                     shift and go to state 156
    Block                          shift and go to state 130
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    InclusiveOrExpression          shift and go to state 160
    PrimaryExpression              shift and go to state 148
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    LocalVariableDeclarationOrStatement shift and go to state 138
    FieldAccess                    shift and go to state 176
    EmptyStatement                 shift and go to state 109
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139
    IterationStatement             shift and go to state 180

state 70

    (17) PrimitiveType -> VOID .

    DOT             reduce using rule 17 (PrimitiveType -> VOID .)
    LSQPAREN        reduce using rule 17 (PrimitiveType -> VOID .)
    IDENTIFIER      reduce using rule 17 (PrimitiveType -> VOID .)
    COMMA           reduce using rule 17 (PrimitiveType -> VOID .)
    IMPLEMENTS      reduce using rule 17 (PrimitiveType -> VOID .)
    LCURPAREN       reduce using rule 17 (PrimitiveType -> VOID .)
    RROUNPAREN      reduce using rule 17 (PrimitiveType -> VOID .)
    LROUNPAREN      reduce using rule 17 (PrimitiveType -> VOID .)
    <               reduce using rule 17 (PrimitiveType -> VOID .)
    >               reduce using rule 17 (PrimitiveType -> VOID .)
    OP_LE           reduce using rule 17 (PrimitiveType -> VOID .)
    OP_GE           reduce using rule 17 (PrimitiveType -> VOID .)
    INSTANCEOF      reduce using rule 17 (PrimitiveType -> VOID .)
    OP_EQ           reduce using rule 17 (PrimitiveType -> VOID .)
    OP_NE           reduce using rule 17 (PrimitiveType -> VOID .)
    &               reduce using rule 17 (PrimitiveType -> VOID .)
    ^               reduce using rule 17 (PrimitiveType -> VOID .)
    |               reduce using rule 17 (PrimitiveType -> VOID .)
    OP_LAND         reduce using rule 17 (PrimitiveType -> VOID .)
    ?               reduce using rule 17 (PrimitiveType -> VOID .)
    OP_LOR          reduce using rule 17 (PrimitiveType -> VOID .)
    SEMICOLON       reduce using rule 17 (PrimitiveType -> VOID .)
    COLON           reduce using rule 17 (PrimitiveType -> VOID .)
    RCURPAREN       reduce using rule 17 (PrimitiveType -> VOID .)
    RSQPAREN        reduce using rule 17 (PrimitiveType -> VOID .)


state 71

    (39) TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .

    SEMICOLON       reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    CLASS           reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    INTERFACE       reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    ABSTRACT        reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    FINAL           reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    PUBLIC          reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    PROTECTED       reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    PRIVATE         reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    STATIC          reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    TRANSIENT       reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    VOLATILE        reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    NATIVE          reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    SYNCHRONIZED    reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    $end            reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    RCURPAREN       reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    IDENTIFIER      reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    LCURPAREN       reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    BOOLEAN         reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    CHAR            reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    BYTE            reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    SHORT           reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    INT             reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    LONG            reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    FLOAT           reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    DOUBLE          reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    VOID            reduce using rule 39 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)


state 72

    (38) TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations . RCURPAREN
    (64) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (65) FieldDeclarationOptSemi -> . FieldDeclaration
    (66) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (67) FieldDeclaration -> . FieldVariableDeclaration SEMICOLON
    (68) FieldDeclaration -> . MethodDeclaration
    (69) FieldDeclaration -> . ConstructorDeclaration
    (70) FieldDeclaration -> . StaticInitializer
    (71) FieldDeclaration -> . NonStaticInitializer
    (72) FieldDeclaration -> . TypeDeclaration
    (73) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (74) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (85) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator Throws MethodBody
    (86) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (87) MethodDeclaration -> . TypeSpecifier MethodDeclarator Throws MethodBody
    (88) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (101) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Throws Block
    (102) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (103) ConstructorDeclaration -> . ConstructorDeclarator Throws Block
    (104) ConstructorDeclaration -> . ConstructorDeclarator Block
    (107) StaticInitializer -> . STATIC Block
    (108) NonStaticInitializer -> . Block
    (38) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (48) Modifiers -> . Modifier
    (49) Modifiers -> . Modifiers Modifier
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (105) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (106) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (42) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (44) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (45) ClassHeader -> . ClassWord IDENTIFIER Extends
    (46) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (47) ClassHeader -> . ClassWord IDENTIFIER
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RCURPAREN       shift and go to state 181
    STATIC          shift and go to state 60
    IDENTIFIER      shift and go to state 66
    LCURPAREN       shift and go to state 69
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2
    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    ConstructorDeclaration         shift and go to state 53
    FieldVariableDeclaration       shift and go to state 54
    TypeDeclaration                shift and go to state 55
    PrimitiveType                  shift and go to state 56
    StaticInitializer              shift and go to state 57
    NonStaticInitializer           shift and go to state 62
    TypeSpecifier                  shift and go to state 63
    QualifiedName                  shift and go to state 64
    TypeName                       shift and go to state 65
    MethodDeclaration              shift and go to state 67
    Modifiers                      shift and go to state 59
    Modifier                       shift and go to state 17
    Block                          shift and go to state 73
    ClassWord                      shift and go to state 19
    FieldDeclarationOptSemi        shift and go to state 182
    ConstructorDeclarator          shift and go to state 75
    ClassHeader                    shift and go to state 23
    FieldDeclaration               shift and go to state 80

state 73

    (108) NonStaticInitializer -> Block .

    SEMICOLON       reduce using rule 108 (NonStaticInitializer -> Block .)
    RCURPAREN       reduce using rule 108 (NonStaticInitializer -> Block .)
    STATIC          reduce using rule 108 (NonStaticInitializer -> Block .)
    IDENTIFIER      reduce using rule 108 (NonStaticInitializer -> Block .)
    LCURPAREN       reduce using rule 108 (NonStaticInitializer -> Block .)
    ABSTRACT        reduce using rule 108 (NonStaticInitializer -> Block .)
    FINAL           reduce using rule 108 (NonStaticInitializer -> Block .)
    PUBLIC          reduce using rule 108 (NonStaticInitializer -> Block .)
    PROTECTED       reduce using rule 108 (NonStaticInitializer -> Block .)
    PRIVATE         reduce using rule 108 (NonStaticInitializer -> Block .)
    TRANSIENT       reduce using rule 108 (NonStaticInitializer -> Block .)
    VOLATILE        reduce using rule 108 (NonStaticInitializer -> Block .)
    NATIVE          reduce using rule 108 (NonStaticInitializer -> Block .)
    SYNCHRONIZED    reduce using rule 108 (NonStaticInitializer -> Block .)
    CLASS           reduce using rule 108 (NonStaticInitializer -> Block .)
    INTERFACE       reduce using rule 108 (NonStaticInitializer -> Block .)
    BOOLEAN         reduce using rule 108 (NonStaticInitializer -> Block .)
    CHAR            reduce using rule 108 (NonStaticInitializer -> Block .)
    BYTE            reduce using rule 108 (NonStaticInitializer -> Block .)
    SHORT           reduce using rule 108 (NonStaticInitializer -> Block .)
    INT             reduce using rule 108 (NonStaticInitializer -> Block .)
    LONG            reduce using rule 108 (NonStaticInitializer -> Block .)
    FLOAT           reduce using rule 108 (NonStaticInitializer -> Block .)
    DOUBLE          reduce using rule 108 (NonStaticInitializer -> Block .)
    VOID            reduce using rule 108 (NonStaticInitializer -> Block .)


state 74

    (63) FieldDeclarations -> FieldDeclarationOptSemi .

    RCURPAREN       reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    STATIC          reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    LCURPAREN       reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    ABSTRACT        reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    FINAL           reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PROTECTED       reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    TRANSIENT       reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    VOLATILE        reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    NATIVE          reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    SYNCHRONIZED    reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CLASS           reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INTERFACE       reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CHAR            reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BYTE            reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    SHORT           reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INT             reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    LONG            reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)
    VOID            reduce using rule 63 (FieldDeclarations -> FieldDeclarationOptSemi .)


state 75

    (103) ConstructorDeclaration -> ConstructorDeclarator . Throws Block
    (104) ConstructorDeclaration -> ConstructorDeclarator . Block
    (98) Throws -> . THROWS ClassNameList
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN

    THROWS          shift and go to state 183
    LCURPAREN       shift and go to state 69

    Throws                         shift and go to state 184
    Block                          shift and go to state 185

state 76

    (13) PrimitiveType -> INT .

    DOT             reduce using rule 13 (PrimitiveType -> INT .)
    LSQPAREN        reduce using rule 13 (PrimitiveType -> INT .)
    IDENTIFIER      reduce using rule 13 (PrimitiveType -> INT .)
    COMMA           reduce using rule 13 (PrimitiveType -> INT .)
    IMPLEMENTS      reduce using rule 13 (PrimitiveType -> INT .)
    LCURPAREN       reduce using rule 13 (PrimitiveType -> INT .)
    RROUNPAREN      reduce using rule 13 (PrimitiveType -> INT .)
    LROUNPAREN      reduce using rule 13 (PrimitiveType -> INT .)
    <               reduce using rule 13 (PrimitiveType -> INT .)
    >               reduce using rule 13 (PrimitiveType -> INT .)
    OP_LE           reduce using rule 13 (PrimitiveType -> INT .)
    OP_GE           reduce using rule 13 (PrimitiveType -> INT .)
    INSTANCEOF      reduce using rule 13 (PrimitiveType -> INT .)
    OP_EQ           reduce using rule 13 (PrimitiveType -> INT .)
    OP_NE           reduce using rule 13 (PrimitiveType -> INT .)
    &               reduce using rule 13 (PrimitiveType -> INT .)
    ^               reduce using rule 13 (PrimitiveType -> INT .)
    |               reduce using rule 13 (PrimitiveType -> INT .)
    OP_LAND         reduce using rule 13 (PrimitiveType -> INT .)
    ?               reduce using rule 13 (PrimitiveType -> INT .)
    OP_LOR          reduce using rule 13 (PrimitiveType -> INT .)
    SEMICOLON       reduce using rule 13 (PrimitiveType -> INT .)
    COLON           reduce using rule 13 (PrimitiveType -> INT .)
    RCURPAREN       reduce using rule 13 (PrimitiveType -> INT .)
    RSQPAREN        reduce using rule 13 (PrimitiveType -> INT .)


state 77

    (16) PrimitiveType -> DOUBLE .

    DOT             reduce using rule 16 (PrimitiveType -> DOUBLE .)
    LSQPAREN        reduce using rule 16 (PrimitiveType -> DOUBLE .)
    IDENTIFIER      reduce using rule 16 (PrimitiveType -> DOUBLE .)
    COMMA           reduce using rule 16 (PrimitiveType -> DOUBLE .)
    IMPLEMENTS      reduce using rule 16 (PrimitiveType -> DOUBLE .)
    LCURPAREN       reduce using rule 16 (PrimitiveType -> DOUBLE .)
    RROUNPAREN      reduce using rule 16 (PrimitiveType -> DOUBLE .)
    LROUNPAREN      reduce using rule 16 (PrimitiveType -> DOUBLE .)
    <               reduce using rule 16 (PrimitiveType -> DOUBLE .)
    >               reduce using rule 16 (PrimitiveType -> DOUBLE .)
    OP_LE           reduce using rule 16 (PrimitiveType -> DOUBLE .)
    OP_GE           reduce using rule 16 (PrimitiveType -> DOUBLE .)
    INSTANCEOF      reduce using rule 16 (PrimitiveType -> DOUBLE .)
    OP_EQ           reduce using rule 16 (PrimitiveType -> DOUBLE .)
    OP_NE           reduce using rule 16 (PrimitiveType -> DOUBLE .)
    &               reduce using rule 16 (PrimitiveType -> DOUBLE .)
    ^               reduce using rule 16 (PrimitiveType -> DOUBLE .)
    |               reduce using rule 16 (PrimitiveType -> DOUBLE .)
    OP_LAND         reduce using rule 16 (PrimitiveType -> DOUBLE .)
    ?               reduce using rule 16 (PrimitiveType -> DOUBLE .)
    OP_LOR          reduce using rule 16 (PrimitiveType -> DOUBLE .)
    SEMICOLON       reduce using rule 16 (PrimitiveType -> DOUBLE .)
    COLON           reduce using rule 16 (PrimitiveType -> DOUBLE .)
    RCURPAREN       reduce using rule 16 (PrimitiveType -> DOUBLE .)
    RSQPAREN        reduce using rule 16 (PrimitiveType -> DOUBLE .)


state 78

    (15) PrimitiveType -> FLOAT .

    DOT             reduce using rule 15 (PrimitiveType -> FLOAT .)
    LSQPAREN        reduce using rule 15 (PrimitiveType -> FLOAT .)
    IDENTIFIER      reduce using rule 15 (PrimitiveType -> FLOAT .)
    COMMA           reduce using rule 15 (PrimitiveType -> FLOAT .)
    IMPLEMENTS      reduce using rule 15 (PrimitiveType -> FLOAT .)
    LCURPAREN       reduce using rule 15 (PrimitiveType -> FLOAT .)
    RROUNPAREN      reduce using rule 15 (PrimitiveType -> FLOAT .)
    LROUNPAREN      reduce using rule 15 (PrimitiveType -> FLOAT .)
    <               reduce using rule 15 (PrimitiveType -> FLOAT .)
    >               reduce using rule 15 (PrimitiveType -> FLOAT .)
    OP_LE           reduce using rule 15 (PrimitiveType -> FLOAT .)
    OP_GE           reduce using rule 15 (PrimitiveType -> FLOAT .)
    INSTANCEOF      reduce using rule 15 (PrimitiveType -> FLOAT .)
    OP_EQ           reduce using rule 15 (PrimitiveType -> FLOAT .)
    OP_NE           reduce using rule 15 (PrimitiveType -> FLOAT .)
    &               reduce using rule 15 (PrimitiveType -> FLOAT .)
    ^               reduce using rule 15 (PrimitiveType -> FLOAT .)
    |               reduce using rule 15 (PrimitiveType -> FLOAT .)
    OP_LAND         reduce using rule 15 (PrimitiveType -> FLOAT .)
    ?               reduce using rule 15 (PrimitiveType -> FLOAT .)
    OP_LOR          reduce using rule 15 (PrimitiveType -> FLOAT .)
    SEMICOLON       reduce using rule 15 (PrimitiveType -> FLOAT .)
    COLON           reduce using rule 15 (PrimitiveType -> FLOAT .)
    RCURPAREN       reduce using rule 15 (PrimitiveType -> FLOAT .)
    RSQPAREN        reduce using rule 15 (PrimitiveType -> FLOAT .)


state 79

    (11) PrimitiveType -> BYTE .

    DOT             reduce using rule 11 (PrimitiveType -> BYTE .)
    LSQPAREN        reduce using rule 11 (PrimitiveType -> BYTE .)
    IDENTIFIER      reduce using rule 11 (PrimitiveType -> BYTE .)
    COMMA           reduce using rule 11 (PrimitiveType -> BYTE .)
    IMPLEMENTS      reduce using rule 11 (PrimitiveType -> BYTE .)
    LCURPAREN       reduce using rule 11 (PrimitiveType -> BYTE .)
    RROUNPAREN      reduce using rule 11 (PrimitiveType -> BYTE .)
    LROUNPAREN      reduce using rule 11 (PrimitiveType -> BYTE .)
    <               reduce using rule 11 (PrimitiveType -> BYTE .)
    >               reduce using rule 11 (PrimitiveType -> BYTE .)
    OP_LE           reduce using rule 11 (PrimitiveType -> BYTE .)
    OP_GE           reduce using rule 11 (PrimitiveType -> BYTE .)
    INSTANCEOF      reduce using rule 11 (PrimitiveType -> BYTE .)
    OP_EQ           reduce using rule 11 (PrimitiveType -> BYTE .)
    OP_NE           reduce using rule 11 (PrimitiveType -> BYTE .)
    &               reduce using rule 11 (PrimitiveType -> BYTE .)
    ^               reduce using rule 11 (PrimitiveType -> BYTE .)
    |               reduce using rule 11 (PrimitiveType -> BYTE .)
    OP_LAND         reduce using rule 11 (PrimitiveType -> BYTE .)
    ?               reduce using rule 11 (PrimitiveType -> BYTE .)
    OP_LOR          reduce using rule 11 (PrimitiveType -> BYTE .)
    SEMICOLON       reduce using rule 11 (PrimitiveType -> BYTE .)
    COLON           reduce using rule 11 (PrimitiveType -> BYTE .)
    RCURPAREN       reduce using rule 11 (PrimitiveType -> BYTE .)
    RSQPAREN        reduce using rule 11 (PrimitiveType -> BYTE .)


state 80

    (65) FieldDeclarationOptSemi -> FieldDeclaration .
    (66) FieldDeclarationOptSemi -> FieldDeclaration . SemiColons
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    RCURPAREN       reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    STATIC          reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    IDENTIFIER      reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    LCURPAREN       reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    ABSTRACT        reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    FINAL           reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PUBLIC          reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PROTECTED       reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PRIVATE         reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    TRANSIENT       reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    VOLATILE        reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    NATIVE          reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    SYNCHRONIZED    reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CLASS           reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INTERFACE       reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BOOLEAN         reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CHAR            reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BYTE            reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    SHORT           reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INT             reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    LONG            reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    FLOAT           reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    DOUBLE          reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    VOID            reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration .)
    SEMICOLON       shift and go to state 28

    SemiColons                     shift and go to state 186

state 81

    (42) ClassHeader -> Modifiers ClassWord IDENTIFIER Interfaces .

    LCURPAREN       reduce using rule 42 (ClassHeader -> Modifiers ClassWord IDENTIFIER Interfaces .)


state 82

    (40) ClassHeader -> Modifiers ClassWord IDENTIFIER Extends . Interfaces
    (41) ClassHeader -> Modifiers ClassWord IDENTIFIER Extends .
    (110) Extends -> Extends . COMMA TypeName
    (62) Interfaces -> . IMPLEMENTS ClassNameList

    LCURPAREN       reduce using rule 41 (ClassHeader -> Modifiers ClassWord IDENTIFIER Extends .)
    COMMA           shift and go to state 89
    IMPLEMENTS      shift and go to state 48

    Interfaces                     shift and go to state 187

state 83

    (35) ImportStatement -> IMPORT QualifiedName DOT * . SemiColons
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    SEMICOLON       shift and go to state 28

    SemiColons                     shift and go to state 188

state 84

    (37) QualifiedName -> QualifiedName DOT IDENTIFIER .

    DOT             reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    LSQPAREN        reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_INC          reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_DEC          reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    =               reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_MUL         reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_DIV         reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_MOD         reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_ADD         reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_SUB         reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_SHL         reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_SHR         reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_SHRR        reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_AND         reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_XOR         reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_OR          reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    *               reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    /               reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    %               reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    +               reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    -               reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_SHL          reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_SHR          reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_SHRR         reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    <               reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    >               reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_LE           reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_GE           reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    INSTANCEOF      reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_EQ           reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_NE           reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    &               reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ^               reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    |               reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_LAND         reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ?               reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_LOR          reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    RSQPAREN        reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    LROUNPAREN      reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    RCURPAREN       reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    COMMA           reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    RROUNPAREN      reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    COLON           reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    LCURPAREN       reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    IMPLEMENTS      reduce using rule 37 (QualifiedName -> QualifiedName DOT IDENTIFIER .)


state 85

    (7) ClassNameList -> QualifiedName .
    (37) QualifiedName -> QualifiedName . DOT IDENTIFIER

    COMMA           reduce using rule 7 (ClassNameList -> QualifiedName .)
    LCURPAREN       reduce using rule 7 (ClassNameList -> QualifiedName .)
    SEMICOLON       reduce using rule 7 (ClassNameList -> QualifiedName .)
    DOT             shift and go to state 46


state 86

    (62) Interfaces -> IMPLEMENTS ClassNameList .
    (8) ClassNameList -> ClassNameList . COMMA QualifiedName

    LCURPAREN       reduce using rule 62 (Interfaces -> IMPLEMENTS ClassNameList .)
    COMMA           shift and go to state 189


state 87

    (109) Extends -> EXTENDS TypeName .

    COMMA           reduce using rule 109 (Extends -> EXTENDS TypeName .)
    IMPLEMENTS      reduce using rule 109 (Extends -> EXTENDS TypeName .)
    LCURPAREN       reduce using rule 109 (Extends -> EXTENDS TypeName .)


state 88

    (43) ClassHeader -> ClassWord IDENTIFIER Extends Interfaces .

    LCURPAREN       reduce using rule 43 (ClassHeader -> ClassWord IDENTIFIER Extends Interfaces .)


state 89

    (110) Extends -> Extends COMMA . TypeName
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    IDENTIFIER      shift and go to state 32

    TypeName                       shift and go to state 190
    QualifiedName                  shift and go to state 64
    PrimitiveType                  shift and go to state 56

state 90

    (67) FieldDeclaration -> FieldVariableDeclaration SEMICOLON .

    SEMICOLON       reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    RCURPAREN       reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    STATIC          reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    IDENTIFIER      reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    LCURPAREN       reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    ABSTRACT        reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    FINAL           reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    PUBLIC          reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    PROTECTED       reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    PRIVATE         reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    TRANSIENT       reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    VOLATILE        reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    NATIVE          reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    SYNCHRONIZED    reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    CLASS           reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    INTERFACE       reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    BOOLEAN         reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    CHAR            reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    BYTE            reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    SHORT           reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    INT             reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    LONG            reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    FLOAT           reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    DOUBLE          reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    VOID            reduce using rule 67 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)


state 91

    (73) FieldVariableDeclaration -> Modifiers TypeSpecifier . VariableDeclarators
    (85) MethodDeclaration -> Modifiers TypeSpecifier . MethodDeclarator Throws MethodBody
    (86) MethodDeclaration -> Modifiers TypeSpecifier . MethodDeclarator MethodBody
    (75) VariableDeclarators -> . VariableDeclarator
    (76) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (89) MethodDeclarator -> . DeclaratorName LROUNPAREN ParameterList RROUNPAREN
    (90) MethodDeclarator -> . DeclaratorName LROUNPAREN RROUNPAREN
    (91) MethodDeclarator -> . MethodDeclarator OP_DIM
    (77) VariableDeclarator -> . DeclaratorName
    (78) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (96) DeclaratorName -> . IDENTIFIER
    (97) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 97

    VariableDeclarators            shift and go to state 191
    DeclaratorName                 shift and go to state 95
    MethodDeclarator               shift and go to state 192
    VariableDeclarator             shift and go to state 98

state 92

    (101) ConstructorDeclaration -> Modifiers ConstructorDeclarator . Throws Block
    (102) ConstructorDeclaration -> Modifiers ConstructorDeclarator . Block
    (98) Throws -> . THROWS ClassNameList
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN

    THROWS          shift and go to state 183
    LCURPAREN       shift and go to state 69

    Throws                         shift and go to state 193
    Block                          shift and go to state 194

state 93

    (107) StaticInitializer -> STATIC Block .

    SEMICOLON       reduce using rule 107 (StaticInitializer -> STATIC Block .)
    RCURPAREN       reduce using rule 107 (StaticInitializer -> STATIC Block .)
    STATIC          reduce using rule 107 (StaticInitializer -> STATIC Block .)
    IDENTIFIER      reduce using rule 107 (StaticInitializer -> STATIC Block .)
    LCURPAREN       reduce using rule 107 (StaticInitializer -> STATIC Block .)
    ABSTRACT        reduce using rule 107 (StaticInitializer -> STATIC Block .)
    FINAL           reduce using rule 107 (StaticInitializer -> STATIC Block .)
    PUBLIC          reduce using rule 107 (StaticInitializer -> STATIC Block .)
    PROTECTED       reduce using rule 107 (StaticInitializer -> STATIC Block .)
    PRIVATE         reduce using rule 107 (StaticInitializer -> STATIC Block .)
    TRANSIENT       reduce using rule 107 (StaticInitializer -> STATIC Block .)
    VOLATILE        reduce using rule 107 (StaticInitializer -> STATIC Block .)
    NATIVE          reduce using rule 107 (StaticInitializer -> STATIC Block .)
    SYNCHRONIZED    reduce using rule 107 (StaticInitializer -> STATIC Block .)
    CLASS           reduce using rule 107 (StaticInitializer -> STATIC Block .)
    INTERFACE       reduce using rule 107 (StaticInitializer -> STATIC Block .)
    BOOLEAN         reduce using rule 107 (StaticInitializer -> STATIC Block .)
    CHAR            reduce using rule 107 (StaticInitializer -> STATIC Block .)
    BYTE            reduce using rule 107 (StaticInitializer -> STATIC Block .)
    SHORT           reduce using rule 107 (StaticInitializer -> STATIC Block .)
    INT             reduce using rule 107 (StaticInitializer -> STATIC Block .)
    LONG            reduce using rule 107 (StaticInitializer -> STATIC Block .)
    FLOAT           reduce using rule 107 (StaticInitializer -> STATIC Block .)
    DOUBLE          reduce using rule 107 (StaticInitializer -> STATIC Block .)
    VOID            reduce using rule 107 (StaticInitializer -> STATIC Block .)


state 94

    (74) FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .
    (76) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMICOLON       reduce using rule 74 (FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .)
    COMMA           shift and go to state 195


state 95

    (89) MethodDeclarator -> DeclaratorName . LROUNPAREN ParameterList RROUNPAREN
    (90) MethodDeclarator -> DeclaratorName . LROUNPAREN RROUNPAREN
    (77) VariableDeclarator -> DeclaratorName .
    (78) VariableDeclarator -> DeclaratorName . = VariableInitializer
    (97) DeclaratorName -> DeclaratorName . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LROUNPAREN      shift and go to state 198
    COMMA           reduce using rule 77 (VariableDeclarator -> DeclaratorName .)
    SEMICOLON       reduce using rule 77 (VariableDeclarator -> DeclaratorName .)
    =               shift and go to state 197
    LSQPAREN        shift and go to state 99

    OP_DIM                         shift and go to state 196

state 96

    (87) MethodDeclaration -> TypeSpecifier MethodDeclarator . Throws MethodBody
    (88) MethodDeclaration -> TypeSpecifier MethodDeclarator . MethodBody
    (91) MethodDeclarator -> MethodDeclarator . OP_DIM
    (98) Throws -> . THROWS ClassNameList
    (99) MethodBody -> . Block
    (100) MethodBody -> . SEMICOLON
    (2) OP_DIM -> . LSQPAREN RSQPAREN
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN

    THROWS          shift and go to state 183
    SEMICOLON       shift and go to state 200
    LSQPAREN        shift and go to state 99
    LCURPAREN       shift and go to state 69

    MethodBody                     shift and go to state 199
    Throws                         shift and go to state 203
    OP_DIM                         shift and go to state 202
    Block                          shift and go to state 201

state 97

    (96) DeclaratorName -> IDENTIFIER .

    LROUNPAREN      reduce using rule 96 (DeclaratorName -> IDENTIFIER .)
    =               reduce using rule 96 (DeclaratorName -> IDENTIFIER .)
    LSQPAREN        reduce using rule 96 (DeclaratorName -> IDENTIFIER .)
    COMMA           reduce using rule 96 (DeclaratorName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 96 (DeclaratorName -> IDENTIFIER .)
    RROUNPAREN      reduce using rule 96 (DeclaratorName -> IDENTIFIER .)


state 98

    (75) VariableDeclarators -> VariableDeclarator .

    SEMICOLON       reduce using rule 75 (VariableDeclarators -> VariableDeclarator .)
    COMMA           reduce using rule 75 (VariableDeclarators -> VariableDeclarator .)


state 99

    (2) OP_DIM -> LSQPAREN . RSQPAREN

    RSQPAREN        shift and go to state 204


state 100

    (209) Dims -> OP_DIM .

    LSQPAREN        reduce using rule 209 (Dims -> OP_DIM .)
    LCURPAREN       reduce using rule 209 (Dims -> OP_DIM .)
    DOT             reduce using rule 209 (Dims -> OP_DIM .)
    OP_INC          reduce using rule 209 (Dims -> OP_DIM .)
    OP_DEC          reduce using rule 209 (Dims -> OP_DIM .)
    =               reduce using rule 209 (Dims -> OP_DIM .)
    ASS_MUL         reduce using rule 209 (Dims -> OP_DIM .)
    ASS_DIV         reduce using rule 209 (Dims -> OP_DIM .)
    ASS_MOD         reduce using rule 209 (Dims -> OP_DIM .)
    ASS_ADD         reduce using rule 209 (Dims -> OP_DIM .)
    ASS_SUB         reduce using rule 209 (Dims -> OP_DIM .)
    ASS_SHL         reduce using rule 209 (Dims -> OP_DIM .)
    ASS_SHR         reduce using rule 209 (Dims -> OP_DIM .)
    ASS_SHRR        reduce using rule 209 (Dims -> OP_DIM .)
    ASS_AND         reduce using rule 209 (Dims -> OP_DIM .)
    ASS_XOR         reduce using rule 209 (Dims -> OP_DIM .)
    ASS_OR          reduce using rule 209 (Dims -> OP_DIM .)
    *               reduce using rule 209 (Dims -> OP_DIM .)
    /               reduce using rule 209 (Dims -> OP_DIM .)
    %               reduce using rule 209 (Dims -> OP_DIM .)
    +               reduce using rule 209 (Dims -> OP_DIM .)
    -               reduce using rule 209 (Dims -> OP_DIM .)
    OP_SHL          reduce using rule 209 (Dims -> OP_DIM .)
    OP_SHR          reduce using rule 209 (Dims -> OP_DIM .)
    OP_SHRR         reduce using rule 209 (Dims -> OP_DIM .)
    <               reduce using rule 209 (Dims -> OP_DIM .)
    >               reduce using rule 209 (Dims -> OP_DIM .)
    OP_LE           reduce using rule 209 (Dims -> OP_DIM .)
    OP_GE           reduce using rule 209 (Dims -> OP_DIM .)
    INSTANCEOF      reduce using rule 209 (Dims -> OP_DIM .)
    OP_EQ           reduce using rule 209 (Dims -> OP_DIM .)
    OP_NE           reduce using rule 209 (Dims -> OP_DIM .)
    &               reduce using rule 209 (Dims -> OP_DIM .)
    ^               reduce using rule 209 (Dims -> OP_DIM .)
    |               reduce using rule 209 (Dims -> OP_DIM .)
    OP_LAND         reduce using rule 209 (Dims -> OP_DIM .)
    ?               reduce using rule 209 (Dims -> OP_DIM .)
    OP_LOR          reduce using rule 209 (Dims -> OP_DIM .)
    SEMICOLON       reduce using rule 209 (Dims -> OP_DIM .)
    RROUNPAREN      reduce using rule 209 (Dims -> OP_DIM .)
    COLON           reduce using rule 209 (Dims -> OP_DIM .)
    COMMA           reduce using rule 209 (Dims -> OP_DIM .)
    RCURPAREN       reduce using rule 209 (Dims -> OP_DIM .)
    RSQPAREN        reduce using rule 209 (Dims -> OP_DIM .)
    IDENTIFIER      reduce using rule 209 (Dims -> OP_DIM .)


state 101

    (4) TypeSpecifier -> TypeName Dims .
    (210) Dims -> Dims . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    IDENTIFIER      reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    <               reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    >               reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    OP_LE           reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    OP_GE           reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    INSTANCEOF      reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    OP_EQ           reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    OP_NE           reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    &               reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    ^               reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    |               reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    OP_LAND         reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    ?               reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    OP_LOR          reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    SEMICOLON       reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    RROUNPAREN      reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    COLON           reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    COMMA           reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    RCURPAREN       reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    RSQPAREN        reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    LSQPAREN        shift and go to state 99

    OP_DIM                         shift and go to state 205

state 102

    (105) ConstructorDeclarator -> IDENTIFIER LROUNPAREN . ParameterList RROUNPAREN
    (106) ConstructorDeclarator -> IDENTIFIER LROUNPAREN . RROUNPAREN
    (92) ParameterList -> . Parameter
    (93) ParameterList -> . ParameterList COMMA Parameter
    (94) Parameter -> . TypeSpecifier DeclaratorName
    (95) Parameter -> . FINAL TypeSpecifier DeclaratorName
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RROUNPAREN      shift and go to state 206
    FINAL           shift and go to state 208
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    IDENTIFIER      shift and go to state 32

    QualifiedName                  shift and go to state 64
    PrimitiveType                  shift and go to state 56
    ParameterList                  shift and go to state 210
    TypeName                       shift and go to state 65
    Parameter                      shift and go to state 207
    TypeSpecifier                  shift and go to state 209

state 103

    (121) Statement -> ExpressionStatement . SEMICOLON

    SEMICOLON       shift and go to state 211


state 104

    (5) TypeName -> PrimitiveType .
    (182) FieldAccess -> PrimitiveType . DOT CLASS

    LSQPAREN        reduce using rule 5 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 5 (TypeName -> PrimitiveType .)
    DOT             shift and go to state 212


state 105

    (116) LocalVariableDeclarationOrStatement -> Statement .

    RCURPAREN       reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    FINAL           reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    SEMICOLON       reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    IDENTIFIER      reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    CASE            reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    DEFAULT         reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    IF              reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    SWITCH          reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    WHILE           reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    DO              reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    FOR             reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    BREAK           reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    CONTINUE        reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    RETURN          reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    THROW           reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    SYNCHRONIZED    reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    TRY             reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    LCURPAREN       reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOLEAN         reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR            reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    BYTE            reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    SHORT           reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    INT             reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    LONG            reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT           reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    DOUBLE          reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    VOID            reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    OP_INC          reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    OP_DEC          reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    +               reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    -               reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    ~               reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    !               reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    THIS            reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    SUPER           reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    NULL            reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    LROUNPAREN      reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    LITERAL         reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOLEAN_CONST   reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)
    NEW             reduce using rule 116 (LocalVariableDeclarationOrStatement -> Statement .)


state 106

    (254) ExclusiveOrExpression -> AndExpression .
    (253) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    |               reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    OP_LAND         reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    ?               reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    OP_LOR          reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    RCURPAREN       reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    COMMA           reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    SEMICOLON       reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    RROUNPAREN      reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    COLON           reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    RSQPAREN        reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    &               shift and go to state 213


state 107

    (188) SpecialName -> THIS .

    DOT             reduce using rule 188 (SpecialName -> THIS .)
    OP_INC          reduce using rule 188 (SpecialName -> THIS .)
    OP_DEC          reduce using rule 188 (SpecialName -> THIS .)
    =               reduce using rule 188 (SpecialName -> THIS .)
    ASS_MUL         reduce using rule 188 (SpecialName -> THIS .)
    ASS_DIV         reduce using rule 188 (SpecialName -> THIS .)
    ASS_MOD         reduce using rule 188 (SpecialName -> THIS .)
    ASS_ADD         reduce using rule 188 (SpecialName -> THIS .)
    ASS_SUB         reduce using rule 188 (SpecialName -> THIS .)
    ASS_SHL         reduce using rule 188 (SpecialName -> THIS .)
    ASS_SHR         reduce using rule 188 (SpecialName -> THIS .)
    ASS_SHRR        reduce using rule 188 (SpecialName -> THIS .)
    ASS_AND         reduce using rule 188 (SpecialName -> THIS .)
    ASS_XOR         reduce using rule 188 (SpecialName -> THIS .)
    ASS_OR          reduce using rule 188 (SpecialName -> THIS .)
    *               reduce using rule 188 (SpecialName -> THIS .)
    /               reduce using rule 188 (SpecialName -> THIS .)
    %               reduce using rule 188 (SpecialName -> THIS .)
    +               reduce using rule 188 (SpecialName -> THIS .)
    -               reduce using rule 188 (SpecialName -> THIS .)
    OP_SHL          reduce using rule 188 (SpecialName -> THIS .)
    OP_SHR          reduce using rule 188 (SpecialName -> THIS .)
    OP_SHRR         reduce using rule 188 (SpecialName -> THIS .)
    <               reduce using rule 188 (SpecialName -> THIS .)
    >               reduce using rule 188 (SpecialName -> THIS .)
    OP_LE           reduce using rule 188 (SpecialName -> THIS .)
    OP_GE           reduce using rule 188 (SpecialName -> THIS .)
    INSTANCEOF      reduce using rule 188 (SpecialName -> THIS .)
    OP_EQ           reduce using rule 188 (SpecialName -> THIS .)
    OP_NE           reduce using rule 188 (SpecialName -> THIS .)
    &               reduce using rule 188 (SpecialName -> THIS .)
    ^               reduce using rule 188 (SpecialName -> THIS .)
    |               reduce using rule 188 (SpecialName -> THIS .)
    OP_LAND         reduce using rule 188 (SpecialName -> THIS .)
    ?               reduce using rule 188 (SpecialName -> THIS .)
    OP_LOR          reduce using rule 188 (SpecialName -> THIS .)
    SEMICOLON       reduce using rule 188 (SpecialName -> THIS .)
    LROUNPAREN      reduce using rule 188 (SpecialName -> THIS .)
    COMMA           reduce using rule 188 (SpecialName -> THIS .)
    RROUNPAREN      reduce using rule 188 (SpecialName -> THIS .)
    COLON           reduce using rule 188 (SpecialName -> THIS .)
    RCURPAREN       reduce using rule 188 (SpecialName -> THIS .)
    RSQPAREN        reduce using rule 188 (SpecialName -> THIS .)


state 108

    (260) ConditionalOrExpression -> ConditionalAndExpression .
    (259) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND InclusiveOrExpression

    ?               reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LOR          reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    COLON           reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    RSQPAREN        reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    SEMICOLON       reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    RROUNPAREN      reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    COMMA           reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    RCURPAREN       reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LAND         shift and go to state 214


state 109

    (119) Statement -> EmptyStatement .

    RCURPAREN       reduce using rule 119 (Statement -> EmptyStatement .)
    FINAL           reduce using rule 119 (Statement -> EmptyStatement .)
    SEMICOLON       reduce using rule 119 (Statement -> EmptyStatement .)
    IDENTIFIER      reduce using rule 119 (Statement -> EmptyStatement .)
    CASE            reduce using rule 119 (Statement -> EmptyStatement .)
    DEFAULT         reduce using rule 119 (Statement -> EmptyStatement .)
    IF              reduce using rule 119 (Statement -> EmptyStatement .)
    SWITCH          reduce using rule 119 (Statement -> EmptyStatement .)
    WHILE           reduce using rule 119 (Statement -> EmptyStatement .)
    DO              reduce using rule 119 (Statement -> EmptyStatement .)
    FOR             reduce using rule 119 (Statement -> EmptyStatement .)
    BREAK           reduce using rule 119 (Statement -> EmptyStatement .)
    CONTINUE        reduce using rule 119 (Statement -> EmptyStatement .)
    RETURN          reduce using rule 119 (Statement -> EmptyStatement .)
    THROW           reduce using rule 119 (Statement -> EmptyStatement .)
    SYNCHRONIZED    reduce using rule 119 (Statement -> EmptyStatement .)
    TRY             reduce using rule 119 (Statement -> EmptyStatement .)
    LCURPAREN       reduce using rule 119 (Statement -> EmptyStatement .)
    BOOLEAN         reduce using rule 119 (Statement -> EmptyStatement .)
    CHAR            reduce using rule 119 (Statement -> EmptyStatement .)
    BYTE            reduce using rule 119 (Statement -> EmptyStatement .)
    SHORT           reduce using rule 119 (Statement -> EmptyStatement .)
    INT             reduce using rule 119 (Statement -> EmptyStatement .)
    LONG            reduce using rule 119 (Statement -> EmptyStatement .)
    FLOAT           reduce using rule 119 (Statement -> EmptyStatement .)
    DOUBLE          reduce using rule 119 (Statement -> EmptyStatement .)
    VOID            reduce using rule 119 (Statement -> EmptyStatement .)
    OP_INC          reduce using rule 119 (Statement -> EmptyStatement .)
    OP_DEC          reduce using rule 119 (Statement -> EmptyStatement .)
    +               reduce using rule 119 (Statement -> EmptyStatement .)
    -               reduce using rule 119 (Statement -> EmptyStatement .)
    ~               reduce using rule 119 (Statement -> EmptyStatement .)
    !               reduce using rule 119 (Statement -> EmptyStatement .)
    THIS            reduce using rule 119 (Statement -> EmptyStatement .)
    SUPER           reduce using rule 119 (Statement -> EmptyStatement .)
    NULL            reduce using rule 119 (Statement -> EmptyStatement .)
    LROUNPAREN      reduce using rule 119 (Statement -> EmptyStatement .)
    LITERAL         reduce using rule 119 (Statement -> EmptyStatement .)
    BOOLEAN_CONST   reduce using rule 119 (Statement -> EmptyStatement .)
    NEW             reduce using rule 119 (Statement -> EmptyStatement .)
    ELSE            reduce using rule 119 (Statement -> EmptyStatement .)


state 110

    (169) ComplexPrimary -> LROUNPAREN . Expression RROUNPAREN
    (226) CastExpression -> LROUNPAREN . PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> LROUNPAREN . ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> LROUNPAREN . Expression RROUNPAREN LogicalUnaryExpression
    (278) Expression -> . AssignmentExpression
    (229) PrimitiveTypeExpression -> . PrimitiveType
    (230) PrimitiveTypeExpression -> . PrimitiveType Dims
    (231) ClassTypeExpression -> . QualifiedName Dims
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    IDENTIFIER      shift and go to state 32
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 215
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 219
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 217
    AdditiveExpression             shift and go to state 157
    PrimitiveTypeExpression        shift and go to state 218
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    ClassTypeExpression            shift and go to state 216
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 111

    (120) Statement -> LabelStatement .

    RCURPAREN       reduce using rule 120 (Statement -> LabelStatement .)
    FINAL           reduce using rule 120 (Statement -> LabelStatement .)
    SEMICOLON       reduce using rule 120 (Statement -> LabelStatement .)
    IDENTIFIER      reduce using rule 120 (Statement -> LabelStatement .)
    CASE            reduce using rule 120 (Statement -> LabelStatement .)
    DEFAULT         reduce using rule 120 (Statement -> LabelStatement .)
    IF              reduce using rule 120 (Statement -> LabelStatement .)
    SWITCH          reduce using rule 120 (Statement -> LabelStatement .)
    WHILE           reduce using rule 120 (Statement -> LabelStatement .)
    DO              reduce using rule 120 (Statement -> LabelStatement .)
    FOR             reduce using rule 120 (Statement -> LabelStatement .)
    BREAK           reduce using rule 120 (Statement -> LabelStatement .)
    CONTINUE        reduce using rule 120 (Statement -> LabelStatement .)
    RETURN          reduce using rule 120 (Statement -> LabelStatement .)
    THROW           reduce using rule 120 (Statement -> LabelStatement .)
    SYNCHRONIZED    reduce using rule 120 (Statement -> LabelStatement .)
    TRY             reduce using rule 120 (Statement -> LabelStatement .)
    LCURPAREN       reduce using rule 120 (Statement -> LabelStatement .)
    BOOLEAN         reduce using rule 120 (Statement -> LabelStatement .)
    CHAR            reduce using rule 120 (Statement -> LabelStatement .)
    BYTE            reduce using rule 120 (Statement -> LabelStatement .)
    SHORT           reduce using rule 120 (Statement -> LabelStatement .)
    INT             reduce using rule 120 (Statement -> LabelStatement .)
    LONG            reduce using rule 120 (Statement -> LabelStatement .)
    FLOAT           reduce using rule 120 (Statement -> LabelStatement .)
    DOUBLE          reduce using rule 120 (Statement -> LabelStatement .)
    VOID            reduce using rule 120 (Statement -> LabelStatement .)
    OP_INC          reduce using rule 120 (Statement -> LabelStatement .)
    OP_DEC          reduce using rule 120 (Statement -> LabelStatement .)
    +               reduce using rule 120 (Statement -> LabelStatement .)
    -               reduce using rule 120 (Statement -> LabelStatement .)
    ~               reduce using rule 120 (Statement -> LabelStatement .)
    !               reduce using rule 120 (Statement -> LabelStatement .)
    THIS            reduce using rule 120 (Statement -> LabelStatement .)
    SUPER           reduce using rule 120 (Statement -> LabelStatement .)
    NULL            reduce using rule 120 (Statement -> LabelStatement .)
    LROUNPAREN      reduce using rule 120 (Statement -> LabelStatement .)
    LITERAL         reduce using rule 120 (Statement -> LabelStatement .)
    BOOLEAN_CONST   reduce using rule 120 (Statement -> LabelStatement .)
    NEW             reduce using rule 120 (Statement -> LabelStatement .)
    ELSE            reduce using rule 120 (Statement -> LabelStatement .)


state 112

    (151) JumpStatement -> RETURN . Expression SEMICOLON
    (152) JumpStatement -> RETURN . SEMICOLON
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    SEMICOLON       shift and go to state 221
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 222
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 113

    (154) GuardingStatement -> SYNCHRONIZED . LROUNPAREN Expression RROUNPAREN Statement

    LROUNPAREN      shift and go to state 224


state 114

    (212) PostfixExpression -> RealPostfixExpression .
    (179) FieldAccess -> RealPostfixExpression . DOT IDENTIFIER

    OP_INC          reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    OP_DEC          reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    =               reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    ASS_MUL         reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    ASS_DIV         reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    ASS_MOD         reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    ASS_ADD         reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    ASS_SUB         reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    ASS_SHL         reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    ASS_SHR         reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    ASS_SHRR        reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    ASS_AND         reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    ASS_XOR         reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    ASS_OR          reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    *               reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    /               reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    %               reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    +               reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    -               reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    OP_SHL          reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    OP_SHR          reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    OP_SHRR         reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    <               reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    >               reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    OP_LE           reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    OP_GE           reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    INSTANCEOF      reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    OP_EQ           reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    OP_NE           reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    &               reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    ^               reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    |               reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    OP_LAND         reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    ?               reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    OP_LOR          reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    RROUNPAREN      reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    SEMICOLON       reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    COLON           reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    COMMA           reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    RCURPAREN       reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    RSQPAREN        reduce using rule 212 (PostfixExpression -> RealPostfixExpression .)
    DOT             shift and go to state 225


state 115

    (217) UnaryExpression -> ArithmeticUnaryOperator . CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 226
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    ClassAllocationExpression      shift and go to state 141
    QualifiedName                  shift and go to state 223
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    ArrayAllocationExpression      shift and go to state 131
    MethodCall                     shift and go to state 121
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 116

    (118) LocalVariableDeclarationStatement -> FINAL . TypeSpecifier VariableDeclarators SEMICOLON
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    IDENTIFIER      shift and go to state 32

    QualifiedName                  shift and go to state 64
    PrimitiveType                  shift and go to state 56
    TypeName                       shift and go to state 65
    TypeSpecifier                  shift and go to state 229

state 117

    (252) AndExpression -> EqualityExpression .
    (250) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (251) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 252 (AndExpression -> EqualityExpression .)
    ^               reduce using rule 252 (AndExpression -> EqualityExpression .)
    |               reduce using rule 252 (AndExpression -> EqualityExpression .)
    OP_LAND         reduce using rule 252 (AndExpression -> EqualityExpression .)
    ?               reduce using rule 252 (AndExpression -> EqualityExpression .)
    OP_LOR          reduce using rule 252 (AndExpression -> EqualityExpression .)
    SEMICOLON       reduce using rule 252 (AndExpression -> EqualityExpression .)
    RSQPAREN        reduce using rule 252 (AndExpression -> EqualityExpression .)
    RCURPAREN       reduce using rule 252 (AndExpression -> EqualityExpression .)
    COMMA           reduce using rule 252 (AndExpression -> EqualityExpression .)
    RROUNPAREN      reduce using rule 252 (AndExpression -> EqualityExpression .)
    COLON           reduce using rule 252 (AndExpression -> EqualityExpression .)
    OP_EQ           shift and go to state 231
    OP_NE           shift and go to state 230


state 118

    (170) ComplexPrimary -> ComplexPrimaryNoParenthesis .
    (185) MethodAccess -> ComplexPrimaryNoParenthesis .

    LSQPAREN        reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    DOT             reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_INC          reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_DEC          reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    =               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_MUL         reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_DIV         reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_MOD         reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_ADD         reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_SUB         reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_SHL         reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_SHR         reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_SHRR        reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_AND         reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_XOR         reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_OR          reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    *               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    /               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    %               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    +               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    -               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_SHL          reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_SHR          reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_SHRR         reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    <               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    >               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LE           reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_GE           reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    INSTANCEOF      reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_EQ           reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_NE           reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    &               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ^               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    |               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LAND         reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ?               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LOR          reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    SEMICOLON       reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    RROUNPAREN      reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    COLON           reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    COMMA           reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    RCURPAREN       reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    RSQPAREN        reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    LROUNPAREN      reduce using rule 185 (MethodAccess -> ComplexPrimaryNoParenthesis .)


state 119

    (236) AdditiveExpression -> MultiplicativeExpression .
    (233) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (234) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (235) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    -               reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    OP_SHL          reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    OP_SHR          reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    OP_SHRR         reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    <               reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    >               reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LE           reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    OP_GE           reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    INSTANCEOF      reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    OP_EQ           reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    OP_NE           reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    &               reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    ^               reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    |               reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LAND         reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    ?               reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LOR          reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    SEMICOLON       reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    RROUNPAREN      reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    COLON           reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    COMMA           reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    RCURPAREN       reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    RSQPAREN        reduce using rule 236 (AdditiveExpression -> MultiplicativeExpression .)
    *               shift and go to state 232
    /               shift and go to state 234
    %               shift and go to state 233


state 120

    (223) ArithmeticUnaryOperator -> + .

    LROUNPAREN      reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    OP_INC          reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    OP_DEC          reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    +               reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    -               reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    ~               reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    !               reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    IDENTIFIER      reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    THIS            reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    SUPER           reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    NULL            reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    LITERAL         reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    BOOLEAN_CONST   reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    NEW             reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    BOOLEAN         reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    CHAR            reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    BYTE            reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    SHORT           reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    INT             reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    LONG            reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    FLOAT           reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    DOUBLE          reduce using rule 223 (ArithmeticUnaryOperator -> + .)
    VOID            reduce using rule 223 (ArithmeticUnaryOperator -> + .)


state 121

    (175) ComplexPrimaryNoParenthesis -> MethodCall .

    LSQPAREN        reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    DOT             reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_INC          reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_DEC          reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    =               reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_MUL         reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_DIV         reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_MOD         reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_ADD         reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_SUB         reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_SHL         reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_SHR         reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_SHRR        reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_AND         reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_XOR         reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_OR          reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    *               reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    /               reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    %               reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    +               reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    -               reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_SHL          reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_SHR          reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_SHRR         reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    <               reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    >               reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LE           reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_GE           reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    INSTANCEOF      reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_EQ           reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_NE           reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    &               reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ^               reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    |               reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LAND         reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ?               reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LOR          reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    RCURPAREN       reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    COMMA           reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    LROUNPAREN      reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    SEMICOLON       reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    RROUNPAREN      reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    COLON           reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)
    RSQPAREN        reduce using rule 175 (ComplexPrimaryNoParenthesis -> MethodCall .)


state 122

    (122) Statement -> SelectionStatement .

    RCURPAREN       reduce using rule 122 (Statement -> SelectionStatement .)
    FINAL           reduce using rule 122 (Statement -> SelectionStatement .)
    SEMICOLON       reduce using rule 122 (Statement -> SelectionStatement .)
    IDENTIFIER      reduce using rule 122 (Statement -> SelectionStatement .)
    CASE            reduce using rule 122 (Statement -> SelectionStatement .)
    DEFAULT         reduce using rule 122 (Statement -> SelectionStatement .)
    IF              reduce using rule 122 (Statement -> SelectionStatement .)
    SWITCH          reduce using rule 122 (Statement -> SelectionStatement .)
    WHILE           reduce using rule 122 (Statement -> SelectionStatement .)
    DO              reduce using rule 122 (Statement -> SelectionStatement .)
    FOR             reduce using rule 122 (Statement -> SelectionStatement .)
    BREAK           reduce using rule 122 (Statement -> SelectionStatement .)
    CONTINUE        reduce using rule 122 (Statement -> SelectionStatement .)
    RETURN          reduce using rule 122 (Statement -> SelectionStatement .)
    THROW           reduce using rule 122 (Statement -> SelectionStatement .)
    SYNCHRONIZED    reduce using rule 122 (Statement -> SelectionStatement .)
    TRY             reduce using rule 122 (Statement -> SelectionStatement .)
    LCURPAREN       reduce using rule 122 (Statement -> SelectionStatement .)
    BOOLEAN         reduce using rule 122 (Statement -> SelectionStatement .)
    CHAR            reduce using rule 122 (Statement -> SelectionStatement .)
    BYTE            reduce using rule 122 (Statement -> SelectionStatement .)
    SHORT           reduce using rule 122 (Statement -> SelectionStatement .)
    INT             reduce using rule 122 (Statement -> SelectionStatement .)
    LONG            reduce using rule 122 (Statement -> SelectionStatement .)
    FLOAT           reduce using rule 122 (Statement -> SelectionStatement .)
    DOUBLE          reduce using rule 122 (Statement -> SelectionStatement .)
    VOID            reduce using rule 122 (Statement -> SelectionStatement .)
    OP_INC          reduce using rule 122 (Statement -> SelectionStatement .)
    OP_DEC          reduce using rule 122 (Statement -> SelectionStatement .)
    +               reduce using rule 122 (Statement -> SelectionStatement .)
    -               reduce using rule 122 (Statement -> SelectionStatement .)
    ~               reduce using rule 122 (Statement -> SelectionStatement .)
    !               reduce using rule 122 (Statement -> SelectionStatement .)
    THIS            reduce using rule 122 (Statement -> SelectionStatement .)
    SUPER           reduce using rule 122 (Statement -> SelectionStatement .)
    NULL            reduce using rule 122 (Statement -> SelectionStatement .)
    LROUNPAREN      reduce using rule 122 (Statement -> SelectionStatement .)
    LITERAL         reduce using rule 122 (Statement -> SelectionStatement .)
    BOOLEAN_CONST   reduce using rule 122 (Statement -> SelectionStatement .)
    NEW             reduce using rule 122 (Statement -> SelectionStatement .)
    ELSE            reduce using rule 122 (Statement -> SelectionStatement .)


state 123

    (278) Expression -> AssignmentExpression .

    SEMICOLON       reduce using rule 278 (Expression -> AssignmentExpression .)
    RROUNPAREN      reduce using rule 278 (Expression -> AssignmentExpression .)
    COMMA           reduce using rule 278 (Expression -> AssignmentExpression .)
    RCURPAREN       reduce using rule 278 (Expression -> AssignmentExpression .)
    RSQPAREN        reduce using rule 278 (Expression -> AssignmentExpression .)
    COLON           reduce using rule 278 (Expression -> AssignmentExpression .)


state 124

    (137) IterationStatement -> FOR . LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement
    (138) IterationStatement -> FOR . LROUNPAREN ForInit ForExpr RROUNPAREN Statement

    LROUNPAREN      shift and go to state 235


state 125

    (215) UnaryExpression -> OP_INC . UnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 237
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    ClassAllocationExpression      shift and go to state 141
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MethodCall                     shift and go to state 121
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    ArrayAllocationExpression      shift and go to state 131
    UnaryExpression                shift and go to state 236
    PrimaryExpression              shift and go to state 148
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 126

    (155) GuardingStatement -> TRY . Block Finally
    (156) GuardingStatement -> TRY . Block Catches
    (157) GuardingStatement -> TRY . Block Catches Finally
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN

    LCURPAREN       shift and go to state 69

    Block                          shift and go to state 238

state 127

    (171) ComplexPrimaryNoParenthesis -> LITERAL .

    LSQPAREN        reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    DOT             reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    OP_INC          reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    OP_DEC          reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    =               reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    ASS_MUL         reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    ASS_DIV         reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    ASS_MOD         reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    ASS_ADD         reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    ASS_SUB         reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    ASS_SHL         reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    ASS_SHR         reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    ASS_SHRR        reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    ASS_AND         reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    ASS_XOR         reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    ASS_OR          reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    *               reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    /               reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    %               reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    +               reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    -               reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    OP_SHL          reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    OP_SHR          reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    OP_SHRR         reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    <               reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    >               reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    OP_LE           reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    OP_GE           reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    INSTANCEOF      reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    OP_EQ           reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    OP_NE           reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    &               reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    ^               reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    |               reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    OP_LAND         reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    ?               reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    OP_LOR          reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    RCURPAREN       reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    COMMA           reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    LROUNPAREN      reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    SEMICOLON       reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    RROUNPAREN      reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    COLON           reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)
    RSQPAREN        reduce using rule 171 (ComplexPrimaryNoParenthesis -> LITERAL .)


state 128

    (112) Block -> LCURPAREN RCURPAREN .

    SEMICOLON       reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    RCURPAREN       reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    STATIC          reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    IDENTIFIER      reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    LCURPAREN       reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    ABSTRACT        reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    FINAL           reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    PUBLIC          reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    PROTECTED       reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    PRIVATE         reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    TRANSIENT       reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    VOLATILE        reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    NATIVE          reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    SYNCHRONIZED    reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    CLASS           reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    INTERFACE       reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    BOOLEAN         reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    CHAR            reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    BYTE            reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    SHORT           reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    INT             reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    LONG            reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    FLOAT           reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    DOUBLE          reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    VOID            reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    CASE            reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    DEFAULT         reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    IF              reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    SWITCH          reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    WHILE           reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    DO              reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    FOR             reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    BREAK           reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    CONTINUE        reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    RETURN          reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    THROW           reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    TRY             reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    OP_INC          reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    OP_DEC          reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    +               reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    -               reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    ~               reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    !               reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    THIS            reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    SUPER           reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    NULL            reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    LROUNPAREN      reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    LITERAL         reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    BOOLEAN_CONST   reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    NEW             reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    ELSE            reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    FINALLY         reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)
    CATCH           reduce using rule 112 (Block -> LCURPAREN RCURPAREN .)


state 129

    (173) ComplexPrimaryNoParenthesis -> ArrayAccess .

    LSQPAREN        reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    DOT             reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_INC          reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_DEC          reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    =               reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_MUL         reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_DIV         reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_MOD         reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_ADD         reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_SUB         reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_SHL         reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_SHR         reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_SHRR        reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_AND         reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_XOR         reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_OR          reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    *               reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    /               reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    %               reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    +               reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    -               reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_SHL          reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_SHR          reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_SHRR         reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    <               reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    >               reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LE           reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_GE           reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    INSTANCEOF      reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_EQ           reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_NE           reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    &               reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ^               reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    |               reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LAND         reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ?               reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LOR          reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    RCURPAREN       reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    COMMA           reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    LROUNPAREN      reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    SEMICOLON       reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    RROUNPAREN      reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    COLON           reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    RSQPAREN        reduce using rule 173 (ComplexPrimaryNoParenthesis -> ArrayAccess .)


state 130

    (126) Statement -> Block .

    RCURPAREN       reduce using rule 126 (Statement -> Block .)
    FINAL           reduce using rule 126 (Statement -> Block .)
    SEMICOLON       reduce using rule 126 (Statement -> Block .)
    IDENTIFIER      reduce using rule 126 (Statement -> Block .)
    CASE            reduce using rule 126 (Statement -> Block .)
    DEFAULT         reduce using rule 126 (Statement -> Block .)
    IF              reduce using rule 126 (Statement -> Block .)
    SWITCH          reduce using rule 126 (Statement -> Block .)
    WHILE           reduce using rule 126 (Statement -> Block .)
    DO              reduce using rule 126 (Statement -> Block .)
    FOR             reduce using rule 126 (Statement -> Block .)
    BREAK           reduce using rule 126 (Statement -> Block .)
    CONTINUE        reduce using rule 126 (Statement -> Block .)
    RETURN          reduce using rule 126 (Statement -> Block .)
    THROW           reduce using rule 126 (Statement -> Block .)
    SYNCHRONIZED    reduce using rule 126 (Statement -> Block .)
    TRY             reduce using rule 126 (Statement -> Block .)
    LCURPAREN       reduce using rule 126 (Statement -> Block .)
    BOOLEAN         reduce using rule 126 (Statement -> Block .)
    CHAR            reduce using rule 126 (Statement -> Block .)
    BYTE            reduce using rule 126 (Statement -> Block .)
    SHORT           reduce using rule 126 (Statement -> Block .)
    INT             reduce using rule 126 (Statement -> Block .)
    LONG            reduce using rule 126 (Statement -> Block .)
    FLOAT           reduce using rule 126 (Statement -> Block .)
    DOUBLE          reduce using rule 126 (Statement -> Block .)
    VOID            reduce using rule 126 (Statement -> Block .)
    OP_INC          reduce using rule 126 (Statement -> Block .)
    OP_DEC          reduce using rule 126 (Statement -> Block .)
    +               reduce using rule 126 (Statement -> Block .)
    -               reduce using rule 126 (Statement -> Block .)
    ~               reduce using rule 126 (Statement -> Block .)
    !               reduce using rule 126 (Statement -> Block .)
    THIS            reduce using rule 126 (Statement -> Block .)
    SUPER           reduce using rule 126 (Statement -> Block .)
    NULL            reduce using rule 126 (Statement -> Block .)
    LROUNPAREN      reduce using rule 126 (Statement -> Block .)
    LITERAL         reduce using rule 126 (Statement -> Block .)
    BOOLEAN_CONST   reduce using rule 126 (Statement -> Block .)
    NEW             reduce using rule 126 (Statement -> Block .)
    ELSE            reduce using rule 126 (Statement -> Block .)


state 131

    (195) PlainNewAllocationExpression -> ArrayAllocationExpression .
    (197) PlainNewAllocationExpression -> ArrayAllocationExpression . LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> ArrayAllocationExpression . LCURPAREN ArrayInitializers RCURPAREN

    DOT             reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_INC          reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_DEC          reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    =               reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_MUL         reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_DIV         reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_MOD         reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_ADD         reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_SUB         reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_SHL         reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_SHR         reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_SHRR        reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_AND         reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_XOR         reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_OR          reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    *               reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    /               reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    %               reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    +               reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    -               reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_SHL          reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_SHR          reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_SHRR         reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    <               reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    >               reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LE           reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_GE           reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    INSTANCEOF      reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_EQ           reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_NE           reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    &               reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ^               reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    |               reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LAND         reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ?               reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LOR          reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    SEMICOLON       reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    RROUNPAREN      reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    COLON           reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    COMMA           reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    RCURPAREN       reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    RSQPAREN        reduce using rule 195 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    LCURPAREN       shift and go to state 239


state 132

    (183) MethodCall -> MethodAccess . LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> MethodAccess . LROUNPAREN RROUNPAREN

    LROUNPAREN      shift and go to state 240


state 133

    (219) LogicalUnaryExpression -> PostfixExpression .
    (213) RealPostfixExpression -> PostfixExpression . OP_INC
    (214) RealPostfixExpression -> PostfixExpression . OP_DEC

    =               reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_MUL         reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_DIV         reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_MOD         reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_ADD         reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_SUB         reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_SHL         reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_SHR         reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_SHRR        reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_AND         reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_XOR         reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_OR          reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    *               reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    /               reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    %               reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    +               reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    -               reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    OP_SHL          reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    OP_SHR          reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    OP_SHRR         reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    <               reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    >               reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LE           reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    OP_GE           reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    INSTANCEOF      reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    OP_EQ           reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    OP_NE           reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    &               reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    ^               reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    |               reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LAND         reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    ?               reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LOR          reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    RROUNPAREN      reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    SEMICOLON       reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    COLON           reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    COMMA           reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    RCURPAREN       reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    RSQPAREN        reduce using rule 219 (LogicalUnaryExpression -> PostfixExpression .)
    OP_INC          shift and go to state 241
    OP_DEC          shift and go to state 242


state 134

    (256) InclusiveOrExpression -> ExclusiveOrExpression .
    (255) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LAND         reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ?               reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LOR          reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    RSQPAREN        reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    RCURPAREN       reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    COMMA           reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    SEMICOLON       reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    RROUNPAREN      reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    COLON           reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ^               shift and go to state 243


state 135

    (249) EqualityExpression -> RelationalExpression .
    (244) RelationalExpression -> RelationalExpression . < ShiftExpression
    (245) RelationalExpression -> RelationalExpression . > ShiftExpression
    (246) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (247) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression
    (248) RelationalExpression -> RelationalExpression . INSTANCEOF TypeSpecifier

    OP_EQ           reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    OP_NE           reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    &               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    ^               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    |               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    OP_LAND         reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    ?               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    OP_LOR          reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    SEMICOLON       reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    COMMA           reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    RSQPAREN        reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    RROUNPAREN      reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    COLON           reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    RCURPAREN       reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    <               shift and go to state 245
    >               shift and go to state 248
    OP_LE           shift and go to state 246
    OP_GE           shift and go to state 247
    INSTANCEOF      shift and go to state 244


state 136

    (193) NewAllocationExpression -> PlainNewAllocationExpression .

    DOT             reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_INC          reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_DEC          reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    *               reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    /               reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    %               reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    +               reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    -               reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_SHL          reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_SHR          reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_SHRR         reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    <               reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    >               reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LE           reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_GE           reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    INSTANCEOF      reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_NE           reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    &               reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ^               reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    |               reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ?               reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    SEMICOLON       reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    RROUNPAREN      reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    COLON           reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    COMMA           reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    RCURPAREN       reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    RSQPAREN        reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    =               reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_MUL         reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_DIV         reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_MOD         reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_ADD         reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_SUB         reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_SHL         reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_SHR         reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_SHRR        reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_AND         reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_XOR         reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_OR          reduce using rule 193 (NewAllocationExpression -> PlainNewAllocationExpression .)


state 137

    (149) JumpStatement -> CONTINUE . IDENTIFIER SEMICOLON
    (150) JumpStatement -> CONTINUE . SEMICOLON

    IDENTIFIER      shift and go to state 249
    SEMICOLON       shift and go to state 250


state 138

    (113) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .

    RCURPAREN       reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FINAL           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SEMICOLON       reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SWITCH          reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THROW           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SYNCHRONIZED    reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    TRY             reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LCURPAREN       reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    OP_INC          reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    OP_DEC          reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    +               reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    -               reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    !               reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LROUNPAREN      reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LITERAL         reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOLEAN_CONST   reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)


state 139

    (166) NotJustName -> SpecialName .
    (186) MethodAccess -> SpecialName .

    DOT             reduce using rule 166 (NotJustName -> SpecialName .)
    OP_INC          reduce using rule 166 (NotJustName -> SpecialName .)
    OP_DEC          reduce using rule 166 (NotJustName -> SpecialName .)
    =               reduce using rule 166 (NotJustName -> SpecialName .)
    ASS_MUL         reduce using rule 166 (NotJustName -> SpecialName .)
    ASS_DIV         reduce using rule 166 (NotJustName -> SpecialName .)
    ASS_MOD         reduce using rule 166 (NotJustName -> SpecialName .)
    ASS_ADD         reduce using rule 166 (NotJustName -> SpecialName .)
    ASS_SUB         reduce using rule 166 (NotJustName -> SpecialName .)
    ASS_SHL         reduce using rule 166 (NotJustName -> SpecialName .)
    ASS_SHR         reduce using rule 166 (NotJustName -> SpecialName .)
    ASS_SHRR        reduce using rule 166 (NotJustName -> SpecialName .)
    ASS_AND         reduce using rule 166 (NotJustName -> SpecialName .)
    ASS_XOR         reduce using rule 166 (NotJustName -> SpecialName .)
    ASS_OR          reduce using rule 166 (NotJustName -> SpecialName .)
    *               reduce using rule 166 (NotJustName -> SpecialName .)
    /               reduce using rule 166 (NotJustName -> SpecialName .)
    %               reduce using rule 166 (NotJustName -> SpecialName .)
    +               reduce using rule 166 (NotJustName -> SpecialName .)
    -               reduce using rule 166 (NotJustName -> SpecialName .)
    OP_SHL          reduce using rule 166 (NotJustName -> SpecialName .)
    OP_SHR          reduce using rule 166 (NotJustName -> SpecialName .)
    OP_SHRR         reduce using rule 166 (NotJustName -> SpecialName .)
    <               reduce using rule 166 (NotJustName -> SpecialName .)
    >               reduce using rule 166 (NotJustName -> SpecialName .)
    OP_LE           reduce using rule 166 (NotJustName -> SpecialName .)
    OP_GE           reduce using rule 166 (NotJustName -> SpecialName .)
    INSTANCEOF      reduce using rule 166 (NotJustName -> SpecialName .)
    OP_EQ           reduce using rule 166 (NotJustName -> SpecialName .)
    OP_NE           reduce using rule 166 (NotJustName -> SpecialName .)
    &               reduce using rule 166 (NotJustName -> SpecialName .)
    ^               reduce using rule 166 (NotJustName -> SpecialName .)
    |               reduce using rule 166 (NotJustName -> SpecialName .)
    OP_LAND         reduce using rule 166 (NotJustName -> SpecialName .)
    ?               reduce using rule 166 (NotJustName -> SpecialName .)
    OP_LOR          reduce using rule 166 (NotJustName -> SpecialName .)
    RROUNPAREN      reduce using rule 166 (NotJustName -> SpecialName .)
    SEMICOLON       reduce using rule 166 (NotJustName -> SpecialName .)
    COMMA           reduce using rule 166 (NotJustName -> SpecialName .)
    COLON           reduce using rule 166 (NotJustName -> SpecialName .)
    RCURPAREN       reduce using rule 166 (NotJustName -> SpecialName .)
    RSQPAREN        reduce using rule 166 (NotJustName -> SpecialName .)
    LROUNPAREN      reduce using rule 186 (MethodAccess -> SpecialName .)


state 140

    (168) NotJustName -> ComplexPrimary .
    (177) ArrayAccess -> ComplexPrimary . LSQPAREN Expression RSQPAREN

    DOT             reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_INC          reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_DEC          reduce using rule 168 (NotJustName -> ComplexPrimary .)
    =               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ASS_MUL         reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ASS_DIV         reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ASS_MOD         reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ASS_ADD         reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ASS_SUB         reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ASS_SHL         reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ASS_SHR         reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ASS_SHRR        reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ASS_AND         reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ASS_XOR         reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ASS_OR          reduce using rule 168 (NotJustName -> ComplexPrimary .)
    *               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    /               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    %               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    +               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    -               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_SHL          reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_SHR          reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_SHRR         reduce using rule 168 (NotJustName -> ComplexPrimary .)
    <               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    >               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_LE           reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_GE           reduce using rule 168 (NotJustName -> ComplexPrimary .)
    INSTANCEOF      reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_EQ           reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_NE           reduce using rule 168 (NotJustName -> ComplexPrimary .)
    &               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ^               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    |               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_LAND         reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ?               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_LOR          reduce using rule 168 (NotJustName -> ComplexPrimary .)
    RROUNPAREN      reduce using rule 168 (NotJustName -> ComplexPrimary .)
    SEMICOLON       reduce using rule 168 (NotJustName -> ComplexPrimary .)
    COMMA           reduce using rule 168 (NotJustName -> ComplexPrimary .)
    COLON           reduce using rule 168 (NotJustName -> ComplexPrimary .)
    RCURPAREN       reduce using rule 168 (NotJustName -> ComplexPrimary .)
    RSQPAREN        reduce using rule 168 (NotJustName -> ComplexPrimary .)
    LSQPAREN        shift and go to state 251


state 141

    (196) PlainNewAllocationExpression -> ClassAllocationExpression .
    (198) PlainNewAllocationExpression -> ClassAllocationExpression . LCURPAREN RCURPAREN
    (200) PlainNewAllocationExpression -> ClassAllocationExpression . LCURPAREN FieldDeclarations RCURPAREN

    DOT             reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_INC          reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_DEC          reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    =               reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_MUL         reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_DIV         reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_MOD         reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_ADD         reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_SUB         reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_SHL         reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_SHR         reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_SHRR        reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_AND         reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_XOR         reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_OR          reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    *               reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    /               reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    %               reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    +               reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    -               reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_SHL          reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_SHR          reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_SHRR         reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    <               reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    >               reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LE           reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_GE           reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    INSTANCEOF      reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_EQ           reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_NE           reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    &               reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ^               reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    |               reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LAND         reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ?               reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LOR          reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    SEMICOLON       reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    RROUNPAREN      reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    COLON           reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    COMMA           reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    RCURPAREN       reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    RSQPAREN        reduce using rule 196 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    LCURPAREN       shift and go to state 252


state 142

    (130) LabelStatement -> DEFAULT . COLON

    COLON           shift and go to state 253


state 143

    (124) Statement -> JumpStatement .

    RCURPAREN       reduce using rule 124 (Statement -> JumpStatement .)
    FINAL           reduce using rule 124 (Statement -> JumpStatement .)
    SEMICOLON       reduce using rule 124 (Statement -> JumpStatement .)
    IDENTIFIER      reduce using rule 124 (Statement -> JumpStatement .)
    CASE            reduce using rule 124 (Statement -> JumpStatement .)
    DEFAULT         reduce using rule 124 (Statement -> JumpStatement .)
    IF              reduce using rule 124 (Statement -> JumpStatement .)
    SWITCH          reduce using rule 124 (Statement -> JumpStatement .)
    WHILE           reduce using rule 124 (Statement -> JumpStatement .)
    DO              reduce using rule 124 (Statement -> JumpStatement .)
    FOR             reduce using rule 124 (Statement -> JumpStatement .)
    BREAK           reduce using rule 124 (Statement -> JumpStatement .)
    CONTINUE        reduce using rule 124 (Statement -> JumpStatement .)
    RETURN          reduce using rule 124 (Statement -> JumpStatement .)
    THROW           reduce using rule 124 (Statement -> JumpStatement .)
    SYNCHRONIZED    reduce using rule 124 (Statement -> JumpStatement .)
    TRY             reduce using rule 124 (Statement -> JumpStatement .)
    LCURPAREN       reduce using rule 124 (Statement -> JumpStatement .)
    BOOLEAN         reduce using rule 124 (Statement -> JumpStatement .)
    CHAR            reduce using rule 124 (Statement -> JumpStatement .)
    BYTE            reduce using rule 124 (Statement -> JumpStatement .)
    SHORT           reduce using rule 124 (Statement -> JumpStatement .)
    INT             reduce using rule 124 (Statement -> JumpStatement .)
    LONG            reduce using rule 124 (Statement -> JumpStatement .)
    FLOAT           reduce using rule 124 (Statement -> JumpStatement .)
    DOUBLE          reduce using rule 124 (Statement -> JumpStatement .)
    VOID            reduce using rule 124 (Statement -> JumpStatement .)
    OP_INC          reduce using rule 124 (Statement -> JumpStatement .)
    OP_DEC          reduce using rule 124 (Statement -> JumpStatement .)
    +               reduce using rule 124 (Statement -> JumpStatement .)
    -               reduce using rule 124 (Statement -> JumpStatement .)
    ~               reduce using rule 124 (Statement -> JumpStatement .)
    !               reduce using rule 124 (Statement -> JumpStatement .)
    THIS            reduce using rule 124 (Statement -> JumpStatement .)
    SUPER           reduce using rule 124 (Statement -> JumpStatement .)
    NULL            reduce using rule 124 (Statement -> JumpStatement .)
    LROUNPAREN      reduce using rule 124 (Statement -> JumpStatement .)
    LITERAL         reduce using rule 124 (Statement -> JumpStatement .)
    BOOLEAN_CONST   reduce using rule 124 (Statement -> JumpStatement .)
    NEW             reduce using rule 124 (Statement -> JumpStatement .)
    ELSE            reduce using rule 124 (Statement -> JumpStatement .)


state 144

    (135) IterationStatement -> WHILE . LROUNPAREN Expression RROUNPAREN Statement

    LROUNPAREN      shift and go to state 254


state 145

    (216) UnaryExpression -> OP_DEC . UnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 237
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    ClassAllocationExpression      shift and go to state 141
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MethodCall                     shift and go to state 121
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    ArrayAllocationExpression      shift and go to state 131
    UnaryExpression                shift and go to state 255
    PrimaryExpression              shift and go to state 148
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 146

    (203) ArrayAllocationExpression -> NEW . TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> NEW . TypeName DimExprs
    (205) ArrayAllocationExpression -> NEW . TypeName Dims
    (201) ClassAllocationExpression -> NEW . TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> NEW . TypeName LROUNPAREN RROUNPAREN
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    IDENTIFIER      shift and go to state 32

    QualifiedName                  shift and go to state 64
    PrimitiveType                  shift and go to state 56
    TypeName                       shift and go to state 256

state 147

    (117) LocalVariableDeclarationStatement -> TypeSpecifier . VariableDeclarators SEMICOLON
    (75) VariableDeclarators -> . VariableDeclarator
    (76) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (77) VariableDeclarator -> . DeclaratorName
    (78) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (96) DeclaratorName -> . IDENTIFIER
    (97) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 97

    VariableDeclarators            shift and go to state 257
    DeclaratorName                 shift and go to state 258
    VariableDeclarator             shift and go to state 98

state 148

    (211) PostfixExpression -> PrimaryExpression .

    OP_INC          reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    OP_DEC          reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    =               reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    ASS_MUL         reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    ASS_DIV         reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    ASS_MOD         reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    ASS_ADD         reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    ASS_SUB         reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    ASS_SHL         reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    ASS_SHR         reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    ASS_SHRR        reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    ASS_AND         reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    ASS_XOR         reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    ASS_OR          reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    *               reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    /               reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    %               reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    +               reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    -               reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    OP_SHL          reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    OP_SHR          reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    OP_SHRR         reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    <               reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    >               reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    OP_LE           reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    OP_GE           reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    INSTANCEOF      reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    OP_EQ           reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    OP_NE           reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    &               reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    ^               reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    |               reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    OP_LAND         reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    ?               reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    OP_LOR          reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    RROUNPAREN      reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    SEMICOLON       reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    COLON           reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    COMMA           reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    RCURPAREN       reduce using rule 211 (PostfixExpression -> PrimaryExpression .)
    RSQPAREN        reduce using rule 211 (PostfixExpression -> PrimaryExpression .)


state 149

    (129) LabelStatement -> CASE . ConstantExpression COLON
    (279) ConstantExpression -> . ConditionalExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    ConstantExpression             shift and go to state 259
    PostfixExpression              shift and go to state 133
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    ComplexPrimary                 shift and go to state 140
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    ConditionalExpression          shift and go to state 260
    UnaryExpression                shift and go to state 227
    InclusiveOrExpression          shift and go to state 160
    FieldAccess                    shift and go to state 176
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 150

    (127) EmptyStatement -> SEMICOLON .

    RCURPAREN       reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    FINAL           reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    SEMICOLON       reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    CASE            reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    DEFAULT         reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    IF              reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    SWITCH          reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    WHILE           reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    DO              reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    FOR             reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    BREAK           reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    CONTINUE        reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    RETURN          reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    THROW           reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    SYNCHRONIZED    reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    TRY             reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    LCURPAREN       reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    BOOLEAN         reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    CHAR            reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    BYTE            reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    SHORT           reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    INT             reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    LONG            reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    FLOAT           reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    DOUBLE          reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    VOID            reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    OP_INC          reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    OP_DEC          reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    +               reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    -               reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    ~               reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    !               reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    THIS            reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    SUPER           reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    NULL            reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    LROUNPAREN      reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    LITERAL         reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    NEW             reduce using rule 127 (EmptyStatement -> SEMICOLON .)
    ELSE            reduce using rule 127 (EmptyStatement -> SEMICOLON .)


state 151

    (125) Statement -> GuardingStatement .

    RCURPAREN       reduce using rule 125 (Statement -> GuardingStatement .)
    FINAL           reduce using rule 125 (Statement -> GuardingStatement .)
    SEMICOLON       reduce using rule 125 (Statement -> GuardingStatement .)
    IDENTIFIER      reduce using rule 125 (Statement -> GuardingStatement .)
    CASE            reduce using rule 125 (Statement -> GuardingStatement .)
    DEFAULT         reduce using rule 125 (Statement -> GuardingStatement .)
    IF              reduce using rule 125 (Statement -> GuardingStatement .)
    SWITCH          reduce using rule 125 (Statement -> GuardingStatement .)
    WHILE           reduce using rule 125 (Statement -> GuardingStatement .)
    DO              reduce using rule 125 (Statement -> GuardingStatement .)
    FOR             reduce using rule 125 (Statement -> GuardingStatement .)
    BREAK           reduce using rule 125 (Statement -> GuardingStatement .)
    CONTINUE        reduce using rule 125 (Statement -> GuardingStatement .)
    RETURN          reduce using rule 125 (Statement -> GuardingStatement .)
    THROW           reduce using rule 125 (Statement -> GuardingStatement .)
    SYNCHRONIZED    reduce using rule 125 (Statement -> GuardingStatement .)
    TRY             reduce using rule 125 (Statement -> GuardingStatement .)
    LCURPAREN       reduce using rule 125 (Statement -> GuardingStatement .)
    BOOLEAN         reduce using rule 125 (Statement -> GuardingStatement .)
    CHAR            reduce using rule 125 (Statement -> GuardingStatement .)
    BYTE            reduce using rule 125 (Statement -> GuardingStatement .)
    SHORT           reduce using rule 125 (Statement -> GuardingStatement .)
    INT             reduce using rule 125 (Statement -> GuardingStatement .)
    LONG            reduce using rule 125 (Statement -> GuardingStatement .)
    FLOAT           reduce using rule 125 (Statement -> GuardingStatement .)
    DOUBLE          reduce using rule 125 (Statement -> GuardingStatement .)
    VOID            reduce using rule 125 (Statement -> GuardingStatement .)
    OP_INC          reduce using rule 125 (Statement -> GuardingStatement .)
    OP_DEC          reduce using rule 125 (Statement -> GuardingStatement .)
    +               reduce using rule 125 (Statement -> GuardingStatement .)
    -               reduce using rule 125 (Statement -> GuardingStatement .)
    ~               reduce using rule 125 (Statement -> GuardingStatement .)
    !               reduce using rule 125 (Statement -> GuardingStatement .)
    THIS            reduce using rule 125 (Statement -> GuardingStatement .)
    SUPER           reduce using rule 125 (Statement -> GuardingStatement .)
    NULL            reduce using rule 125 (Statement -> GuardingStatement .)
    LROUNPAREN      reduce using rule 125 (Statement -> GuardingStatement .)
    LITERAL         reduce using rule 125 (Statement -> GuardingStatement .)
    BOOLEAN_CONST   reduce using rule 125 (Statement -> GuardingStatement .)
    NEW             reduce using rule 125 (Statement -> GuardingStatement .)
    ELSE            reduce using rule 125 (Statement -> GuardingStatement .)


state 152

    (134) SelectionStatement -> SWITCH . LROUNPAREN Expression RROUNPAREN Block

    LROUNPAREN      shift and go to state 261


state 153

    (262) ConditionalExpression -> ConditionalOrExpression .
    (263) ConditionalExpression -> ConditionalOrExpression . ? Expression COLON ConditionalExpression
    (261) ConditionalOrExpression -> ConditionalOrExpression . OP_LOR ConditionalAndExpression

    RROUNPAREN      reduce using rule 262 (ConditionalExpression -> ConditionalOrExpression .)
    COMMA           reduce using rule 262 (ConditionalExpression -> ConditionalOrExpression .)
    SEMICOLON       reduce using rule 262 (ConditionalExpression -> ConditionalOrExpression .)
    COLON           reduce using rule 262 (ConditionalExpression -> ConditionalOrExpression .)
    RCURPAREN       reduce using rule 262 (ConditionalExpression -> ConditionalOrExpression .)
    RSQPAREN        reduce using rule 262 (ConditionalExpression -> ConditionalOrExpression .)
    ?               shift and go to state 263
    OP_LOR          shift and go to state 262


state 154

    (128) LabelStatement -> IDENTIFIER . COLON
    (36) QualifiedName -> IDENTIFIER .

    COLON           shift and go to state 264
    DOT             reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    LSQPAREN        reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_INC          reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_DEC          reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    =               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_MUL         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_DIV         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_MOD         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_ADD         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_SUB         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_SHL         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_SHR         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_SHRR        reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_AND         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_XOR         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ASS_OR          reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    *               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    /               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    %               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    +               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    -               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_SHL          reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_SHR          reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_SHRR         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    <               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    >               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    INSTANCEOF      reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    LROUNPAREN      reduce using rule 36 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 36 (QualifiedName -> IDENTIFIER .)


state 155

    (167) NotJustName -> NewAllocationExpression .

    DOT             reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_INC          reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_DEC          reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    =               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ASS_MUL         reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ASS_DIV         reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ASS_MOD         reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ASS_ADD         reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ASS_SUB         reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ASS_SHL         reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ASS_SHR         reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ASS_SHRR        reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ASS_AND         reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ASS_XOR         reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ASS_OR          reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    *               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    /               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    %               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    +               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    -               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_SHL          reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_SHR          reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_SHRR         reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    <               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    >               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_LE           reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_GE           reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    INSTANCEOF      reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_EQ           reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_NE           reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    &               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ^               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    |               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_LAND         reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ?               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_LOR          reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    RROUNPAREN      reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    SEMICOLON       reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    COMMA           reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    COLON           reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    RCURPAREN       reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    RSQPAREN        reduce using rule 167 (NotJustName -> NewAllocationExpression .)


state 156

    (131) ExpressionStatement -> Expression .

    SEMICOLON       reduce using rule 131 (ExpressionStatement -> Expression .)
    COMMA           reduce using rule 131 (ExpressionStatement -> Expression .)
    RROUNPAREN      reduce using rule 131 (ExpressionStatement -> Expression .)


state 157

    (239) ShiftExpression -> AdditiveExpression .
    (237) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (238) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OP_SHL          reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    OP_SHR          reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    OP_SHRR         reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    <               reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    >               reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    OP_LE           reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    OP_GE           reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    INSTANCEOF      reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    OP_EQ           reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    OP_NE           reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    &               reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    ^               reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    |               reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    OP_LAND         reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    ?               reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    OP_LOR          reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    SEMICOLON       reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    RROUNPAREN      reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    COLON           reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    COMMA           reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    RCURPAREN       reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    RSQPAREN        reduce using rule 239 (ShiftExpression -> AdditiveExpression .)
    +               shift and go to state 265
    -               shift and go to state 266


state 158

    (264) AssignmentExpression -> ConditionalExpression .

    RSQPAREN        reduce using rule 264 (AssignmentExpression -> ConditionalExpression .)
    SEMICOLON       reduce using rule 264 (AssignmentExpression -> ConditionalExpression .)
    RROUNPAREN      reduce using rule 264 (AssignmentExpression -> ConditionalExpression .)
    COMMA           reduce using rule 264 (AssignmentExpression -> ConditionalExpression .)
    RCURPAREN       reduce using rule 264 (AssignmentExpression -> ConditionalExpression .)
    COLON           reduce using rule 264 (AssignmentExpression -> ConditionalExpression .)


state 159

    (265) AssignmentExpression -> UnaryExpression . AssignmentOperator AssignmentExpression
    (225) CastExpression -> UnaryExpression .
    (266) AssignmentOperator -> . =
    (267) AssignmentOperator -> . ASS_MUL
    (268) AssignmentOperator -> . ASS_DIV
    (269) AssignmentOperator -> . ASS_MOD
    (270) AssignmentOperator -> . ASS_ADD
    (271) AssignmentOperator -> . ASS_SUB
    (272) AssignmentOperator -> . ASS_SHL
    (273) AssignmentOperator -> . ASS_SHR
    (274) AssignmentOperator -> . ASS_SHRR
    (275) AssignmentOperator -> . ASS_AND
    (276) AssignmentOperator -> . ASS_XOR
    (277) AssignmentOperator -> . ASS_OR

    *               reduce using rule 225 (CastExpression -> UnaryExpression .)
    /               reduce using rule 225 (CastExpression -> UnaryExpression .)
    %               reduce using rule 225 (CastExpression -> UnaryExpression .)
    +               reduce using rule 225 (CastExpression -> UnaryExpression .)
    -               reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_SHL          reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_SHR          reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_SHRR         reduce using rule 225 (CastExpression -> UnaryExpression .)
    <               reduce using rule 225 (CastExpression -> UnaryExpression .)
    >               reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 225 (CastExpression -> UnaryExpression .)
    INSTANCEOF      reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 225 (CastExpression -> UnaryExpression .)
    &               reduce using rule 225 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 225 (CastExpression -> UnaryExpression .)
    |               reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 225 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 225 (CastExpression -> UnaryExpression .)
    RROUNPAREN      reduce using rule 225 (CastExpression -> UnaryExpression .)
    SEMICOLON       reduce using rule 225 (CastExpression -> UnaryExpression .)
    COMMA           reduce using rule 225 (CastExpression -> UnaryExpression .)
    RSQPAREN        reduce using rule 225 (CastExpression -> UnaryExpression .)
    RCURPAREN       reduce using rule 225 (CastExpression -> UnaryExpression .)
    COLON           reduce using rule 225 (CastExpression -> UnaryExpression .)
    =               shift and go to state 279
    ASS_MUL         shift and go to state 268
    ASS_DIV         shift and go to state 267
    ASS_MOD         shift and go to state 269
    ASS_ADD         shift and go to state 277
    ASS_SUB         shift and go to state 275
    ASS_SHL         shift and go to state 278
    ASS_SHR         shift and go to state 276
    ASS_SHRR        shift and go to state 273
    ASS_AND         shift and go to state 274
    ASS_XOR         shift and go to state 272
    ASS_OR          shift and go to state 270

    AssignmentOperator             shift and go to state 271

state 160

    (258) ConditionalAndExpression -> InclusiveOrExpression .
    (257) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    ?               reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    OP_LOR          reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    RROUNPAREN      reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    SEMICOLON       reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    COMMA           reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    RCURPAREN       reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    RSQPAREN        reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    COLON           reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    |               shift and go to state 280


state 161

    (147) JumpStatement -> BREAK . IDENTIFIER SEMICOLON
    (148) JumpStatement -> BREAK . SEMICOLON

    IDENTIFIER      shift and go to state 281
    SEMICOLON       shift and go to state 282


state 162

    (221) LogicalUnaryOperator -> ~ .

    OP_INC          reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    OP_DEC          reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    +               reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    -               reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    ~               reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    !               reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    IDENTIFIER      reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    THIS            reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    SUPER           reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    NULL            reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    LROUNPAREN      reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    LITERAL         reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    BOOLEAN_CONST   reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    NEW             reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    BOOLEAN         reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    CHAR            reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    BYTE            reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    SHORT           reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    INT             reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    LONG            reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    FLOAT           reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    DOUBLE          reduce using rule 221 (LogicalUnaryOperator -> ~ .)
    VOID            reduce using rule 221 (LogicalUnaryOperator -> ~ .)


state 163

    (136) IterationStatement -> DO . Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON
    (119) Statement -> . EmptyStatement
    (120) Statement -> . LabelStatement
    (121) Statement -> . ExpressionStatement SEMICOLON
    (122) Statement -> . SelectionStatement
    (123) Statement -> . IterationStatement
    (124) Statement -> . JumpStatement
    (125) Statement -> . GuardingStatement
    (126) Statement -> . Block
    (127) EmptyStatement -> . SEMICOLON
    (128) LabelStatement -> . IDENTIFIER COLON
    (129) LabelStatement -> . CASE ConstantExpression COLON
    (130) LabelStatement -> . DEFAULT COLON
    (131) ExpressionStatement -> . Expression
    (132) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement
    (133) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement
    (134) SelectionStatement -> . SWITCH LROUNPAREN Expression RROUNPAREN Block
    (135) IterationStatement -> . WHILE LROUNPAREN Expression RROUNPAREN Statement
    (136) IterationStatement -> . DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON
    (137) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement
    (138) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (147) JumpStatement -> . BREAK IDENTIFIER SEMICOLON
    (148) JumpStatement -> . BREAK SEMICOLON
    (149) JumpStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (150) JumpStatement -> . CONTINUE SEMICOLON
    (151) JumpStatement -> . RETURN Expression SEMICOLON
    (152) JumpStatement -> . RETURN SEMICOLON
    (153) JumpStatement -> . THROW Expression SEMICOLON
    (154) GuardingStatement -> . SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    SEMICOLON       shift and go to state 150
    IDENTIFIER      shift and go to state 154
    CASE            shift and go to state 149
    DEFAULT         shift and go to state 142
    IF              shift and go to state 175
    SWITCH          shift and go to state 152
    WHILE           shift and go to state 144
    DO              shift and go to state 163
    FOR             shift and go to state 124
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 137
    RETURN          shift and go to state 112
    THROW           shift and go to state 179
    SYNCHRONIZED    shift and go to state 113
    TRY             shift and go to state 126
    LCURPAREN       shift and go to state 69
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    LabelStatement                 shift and go to state 111
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    ExpressionStatement            shift and go to state 103
    JumpStatement                  shift and go to state 143
    RealPostfixExpression          shift and go to state 114
    Statement                      shift and go to state 283
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    GuardingStatement              shift and go to state 151
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    SelectionStatement             shift and go to state 122
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    ComplexPrimary                 shift and go to state 140
    PrimitiveType                  shift and go to state 220
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 159
    Expression                     shift and go to state 156
    Block                          shift and go to state 130
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    PrimaryExpression              shift and go to state 148
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    EmptyStatement                 shift and go to state 109
    SpecialName                    shift and go to state 139
    IterationStatement             shift and go to state 180

state 164

    (232) MultiplicativeExpression -> CastExpression .

    *               reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    /               reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    %               reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    +               reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    -               reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    OP_SHL          reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    OP_SHR          reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    OP_SHRR         reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    <               reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    >               reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    OP_LE           reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    OP_GE           reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    INSTANCEOF      reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    OP_EQ           reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    OP_NE           reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    &               reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    ^               reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    |               reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    OP_LAND         reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    ?               reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    OP_LOR          reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    RROUNPAREN      reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    SEMICOLON       reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    COLON           reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    COMMA           reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    RCURPAREN       reduce using rule 232 (MultiplicativeExpression -> CastExpression .)
    RSQPAREN        reduce using rule 232 (MultiplicativeExpression -> CastExpression .)


state 165

    (190) SpecialName -> NULL .

    DOT             reduce using rule 190 (SpecialName -> NULL .)
    OP_INC          reduce using rule 190 (SpecialName -> NULL .)
    OP_DEC          reduce using rule 190 (SpecialName -> NULL .)
    =               reduce using rule 190 (SpecialName -> NULL .)
    ASS_MUL         reduce using rule 190 (SpecialName -> NULL .)
    ASS_DIV         reduce using rule 190 (SpecialName -> NULL .)
    ASS_MOD         reduce using rule 190 (SpecialName -> NULL .)
    ASS_ADD         reduce using rule 190 (SpecialName -> NULL .)
    ASS_SUB         reduce using rule 190 (SpecialName -> NULL .)
    ASS_SHL         reduce using rule 190 (SpecialName -> NULL .)
    ASS_SHR         reduce using rule 190 (SpecialName -> NULL .)
    ASS_SHRR        reduce using rule 190 (SpecialName -> NULL .)
    ASS_AND         reduce using rule 190 (SpecialName -> NULL .)
    ASS_XOR         reduce using rule 190 (SpecialName -> NULL .)
    ASS_OR          reduce using rule 190 (SpecialName -> NULL .)
    *               reduce using rule 190 (SpecialName -> NULL .)
    /               reduce using rule 190 (SpecialName -> NULL .)
    %               reduce using rule 190 (SpecialName -> NULL .)
    +               reduce using rule 190 (SpecialName -> NULL .)
    -               reduce using rule 190 (SpecialName -> NULL .)
    OP_SHL          reduce using rule 190 (SpecialName -> NULL .)
    OP_SHR          reduce using rule 190 (SpecialName -> NULL .)
    OP_SHRR         reduce using rule 190 (SpecialName -> NULL .)
    <               reduce using rule 190 (SpecialName -> NULL .)
    >               reduce using rule 190 (SpecialName -> NULL .)
    OP_LE           reduce using rule 190 (SpecialName -> NULL .)
    OP_GE           reduce using rule 190 (SpecialName -> NULL .)
    INSTANCEOF      reduce using rule 190 (SpecialName -> NULL .)
    OP_EQ           reduce using rule 190 (SpecialName -> NULL .)
    OP_NE           reduce using rule 190 (SpecialName -> NULL .)
    &               reduce using rule 190 (SpecialName -> NULL .)
    ^               reduce using rule 190 (SpecialName -> NULL .)
    |               reduce using rule 190 (SpecialName -> NULL .)
    OP_LAND         reduce using rule 190 (SpecialName -> NULL .)
    ?               reduce using rule 190 (SpecialName -> NULL .)
    OP_LOR          reduce using rule 190 (SpecialName -> NULL .)
    SEMICOLON       reduce using rule 190 (SpecialName -> NULL .)
    LROUNPAREN      reduce using rule 190 (SpecialName -> NULL .)
    COMMA           reduce using rule 190 (SpecialName -> NULL .)
    RROUNPAREN      reduce using rule 190 (SpecialName -> NULL .)
    COLON           reduce using rule 190 (SpecialName -> NULL .)
    RCURPAREN       reduce using rule 190 (SpecialName -> NULL .)
    RSQPAREN        reduce using rule 190 (SpecialName -> NULL .)


state 166

    (222) LogicalUnaryOperator -> ! .

    OP_INC          reduce using rule 222 (LogicalUnaryOperator -> ! .)
    OP_DEC          reduce using rule 222 (LogicalUnaryOperator -> ! .)
    +               reduce using rule 222 (LogicalUnaryOperator -> ! .)
    -               reduce using rule 222 (LogicalUnaryOperator -> ! .)
    ~               reduce using rule 222 (LogicalUnaryOperator -> ! .)
    !               reduce using rule 222 (LogicalUnaryOperator -> ! .)
    IDENTIFIER      reduce using rule 222 (LogicalUnaryOperator -> ! .)
    THIS            reduce using rule 222 (LogicalUnaryOperator -> ! .)
    SUPER           reduce using rule 222 (LogicalUnaryOperator -> ! .)
    NULL            reduce using rule 222 (LogicalUnaryOperator -> ! .)
    LROUNPAREN      reduce using rule 222 (LogicalUnaryOperator -> ! .)
    LITERAL         reduce using rule 222 (LogicalUnaryOperator -> ! .)
    BOOLEAN_CONST   reduce using rule 222 (LogicalUnaryOperator -> ! .)
    NEW             reduce using rule 222 (LogicalUnaryOperator -> ! .)
    BOOLEAN         reduce using rule 222 (LogicalUnaryOperator -> ! .)
    CHAR            reduce using rule 222 (LogicalUnaryOperator -> ! .)
    BYTE            reduce using rule 222 (LogicalUnaryOperator -> ! .)
    SHORT           reduce using rule 222 (LogicalUnaryOperator -> ! .)
    INT             reduce using rule 222 (LogicalUnaryOperator -> ! .)
    LONG            reduce using rule 222 (LogicalUnaryOperator -> ! .)
    FLOAT           reduce using rule 222 (LogicalUnaryOperator -> ! .)
    DOUBLE          reduce using rule 222 (LogicalUnaryOperator -> ! .)
    VOID            reduce using rule 222 (LogicalUnaryOperator -> ! .)


state 167

    (6) TypeName -> QualifiedName .
    (37) QualifiedName -> QualifiedName . DOT IDENTIFIER
    (164) PrimaryExpression -> QualifiedName .
    (194) NewAllocationExpression -> QualifiedName . DOT PlainNewAllocationExpression
    (176) ArrayAccess -> QualifiedName . LSQPAREN Expression RSQPAREN
    (180) FieldAccess -> QualifiedName . DOT THIS
    (181) FieldAccess -> QualifiedName . DOT CLASS
    (187) MethodAccess -> QualifiedName .

  ! shift/reduce conflict for LSQPAREN resolved as shift
    IDENTIFIER      reduce using rule 6 (TypeName -> QualifiedName .)
    DOT             shift and go to state 285
    OP_INC          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_DEC          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_MUL         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_DIV         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_MOD         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_ADD         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_SUB         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_SHL         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_SHR         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_SHRR        reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_AND         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_XOR         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_OR          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_SHL          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_SHR          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_SHRR         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    INSTANCEOF      reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    SEMICOLON       reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    COMMA           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    LSQPAREN        shift and go to state 284
    LROUNPAREN      reduce using rule 187 (MethodAccess -> QualifiedName .)

  ! LSQPAREN        [ reduce using rule 6 (TypeName -> QualifiedName .) ]


state 168

    (224) ArithmeticUnaryOperator -> - .

    LROUNPAREN      reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    OP_INC          reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    OP_DEC          reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    +               reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    -               reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    ~               reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    !               reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    IDENTIFIER      reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    THIS            reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    SUPER           reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    NULL            reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    LITERAL         reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    BOOLEAN_CONST   reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    NEW             reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    BOOLEAN         reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    CHAR            reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    BYTE            reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    SHORT           reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    INT             reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    LONG            reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    FLOAT           reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    DOUBLE          reduce using rule 224 (ArithmeticUnaryOperator -> - .)
    VOID            reduce using rule 224 (ArithmeticUnaryOperator -> - .)


state 169

    (115) LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .

    RCURPAREN       reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FINAL           reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SEMICOLON       reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CASE            reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DEFAULT         reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IF              reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SWITCH          reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    WHILE           reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DO              reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FOR             reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BREAK           reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CONTINUE        reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    RETURN          reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THROW           reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SYNCHRONIZED    reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    TRY             reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LCURPAREN       reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    OP_INC          reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    OP_DEC          reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    +               reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    -               reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    !               reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LROUNPAREN      reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LITERAL         reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN_CONST   reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 115 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)


state 170

    (243) RelationalExpression -> ShiftExpression .
    (240) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (241) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (242) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    <               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    >               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OP_LE           reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OP_GE           reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    INSTANCEOF      reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OP_EQ           reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OP_NE           reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    &               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    ^               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    |               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OP_LAND         reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    ?               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OP_LOR          reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    SEMICOLON       reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    COMMA           reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    RROUNPAREN      reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    COLON           reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    RCURPAREN       reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    RSQPAREN        reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OP_SHL          shift and go to state 286
    OP_SHR          shift and go to state 288
    OP_SHRR         shift and go to state 287


state 171

    (111) Block -> LCURPAREN LocalVariableDeclarationsAndStatements . RCURPAREN
    (114) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements . LocalVariableDeclarationOrStatement
    (115) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (116) LocalVariableDeclarationOrStatement -> . Statement
    (117) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators SEMICOLON
    (118) LocalVariableDeclarationStatement -> . FINAL TypeSpecifier VariableDeclarators SEMICOLON
    (119) Statement -> . EmptyStatement
    (120) Statement -> . LabelStatement
    (121) Statement -> . ExpressionStatement SEMICOLON
    (122) Statement -> . SelectionStatement
    (123) Statement -> . IterationStatement
    (124) Statement -> . JumpStatement
    (125) Statement -> . GuardingStatement
    (126) Statement -> . Block
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (127) EmptyStatement -> . SEMICOLON
    (128) LabelStatement -> . IDENTIFIER COLON
    (129) LabelStatement -> . CASE ConstantExpression COLON
    (130) LabelStatement -> . DEFAULT COLON
    (131) ExpressionStatement -> . Expression
    (132) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement
    (133) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement
    (134) SelectionStatement -> . SWITCH LROUNPAREN Expression RROUNPAREN Block
    (135) IterationStatement -> . WHILE LROUNPAREN Expression RROUNPAREN Statement
    (136) IterationStatement -> . DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON
    (137) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement
    (138) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (147) JumpStatement -> . BREAK IDENTIFIER SEMICOLON
    (148) JumpStatement -> . BREAK SEMICOLON
    (149) JumpStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (150) JumpStatement -> . CONTINUE SEMICOLON
    (151) JumpStatement -> . RETURN Expression SEMICOLON
    (152) JumpStatement -> . RETURN SEMICOLON
    (153) JumpStatement -> . THROW Expression SEMICOLON
    (154) GuardingStatement -> . SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (278) Expression -> . AssignmentExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    RCURPAREN       shift and go to state 289
    FINAL           shift and go to state 116
    SEMICOLON       shift and go to state 150
    IDENTIFIER      shift and go to state 154
    CASE            shift and go to state 149
    DEFAULT         shift and go to state 142
    IF              shift and go to state 175
    SWITCH          shift and go to state 152
    WHILE           shift and go to state 144
    DO              shift and go to state 163
    FOR             shift and go to state 124
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 137
    RETURN          shift and go to state 112
    THROW           shift and go to state 179
    SYNCHRONIZED    shift and go to state 113
    TRY             shift and go to state 126
    LCURPAREN       shift and go to state 69
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146

    PostfixExpression              shift and go to state 133
    LabelStatement                 shift and go to state 111
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    ExpressionStatement            shift and go to state 103
    JumpStatement                  shift and go to state 143
    RealPostfixExpression          shift and go to state 114
    Statement                      shift and go to state 105
    AndExpression                  shift and go to state 106
    MultiplicativeExpression       shift and go to state 119
    TypeSpecifier                  shift and go to state 147
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    QualifiedName                  shift and go to state 167
    ComplexPrimaryNoParenthesis    shift and go to state 118
    GuardingStatement              shift and go to state 151
    ArrayAccess                    shift and go to state 129
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    TypeName                       shift and go to state 65
    ConditionalOrExpression        shift and go to state 153
    LocalVariableDeclarationStatement shift and go to state 169
    ShiftExpression                shift and go to state 170
    SelectionStatement             shift and go to state 122
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimary                 shift and go to state 140
    PrimitiveType                  shift and go to state 104
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 159
    Expression                     shift and go to state 156
    Block                          shift and go to state 130
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    InclusiveOrExpression          shift and go to state 160
    PrimaryExpression              shift and go to state 148
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    LocalVariableDeclarationOrStatement shift and go to state 290
    FieldAccess                    shift and go to state 176
    EmptyStatement                 shift and go to state 109
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139
    IterationStatement             shift and go to state 180

state 172

    (165) PrimaryExpression -> NotJustName .
    (178) FieldAccess -> NotJustName . DOT IDENTIFIER

    OP_INC          reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_DEC          reduce using rule 165 (PrimaryExpression -> NotJustName .)
    =               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ASS_MUL         reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ASS_DIV         reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ASS_MOD         reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ASS_ADD         reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ASS_SUB         reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ASS_SHL         reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ASS_SHR         reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ASS_SHRR        reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ASS_AND         reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ASS_XOR         reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ASS_OR          reduce using rule 165 (PrimaryExpression -> NotJustName .)
    *               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    /               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    %               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    +               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    -               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_SHL          reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_SHR          reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_SHRR         reduce using rule 165 (PrimaryExpression -> NotJustName .)
    <               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    >               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_LE           reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_GE           reduce using rule 165 (PrimaryExpression -> NotJustName .)
    INSTANCEOF      reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_EQ           reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_NE           reduce using rule 165 (PrimaryExpression -> NotJustName .)
    &               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ^               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    |               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_LAND         reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ?               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_LOR          reduce using rule 165 (PrimaryExpression -> NotJustName .)
    RSQPAREN        reduce using rule 165 (PrimaryExpression -> NotJustName .)
    SEMICOLON       reduce using rule 165 (PrimaryExpression -> NotJustName .)
    RROUNPAREN      reduce using rule 165 (PrimaryExpression -> NotJustName .)
    COMMA           reduce using rule 165 (PrimaryExpression -> NotJustName .)
    RCURPAREN       reduce using rule 165 (PrimaryExpression -> NotJustName .)
    COLON           reduce using rule 165 (PrimaryExpression -> NotJustName .)
    DOT             shift and go to state 291


state 173

    (220) LogicalUnaryExpression -> LogicalUnaryOperator . UnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 237
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    ClassAllocationExpression      shift and go to state 141
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MethodCall                     shift and go to state 121
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    ArrayAllocationExpression      shift and go to state 131
    UnaryExpression                shift and go to state 292
    PrimaryExpression              shift and go to state 148
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 174

    (218) UnaryExpression -> LogicalUnaryExpression .

    *               reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    /               reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    %               reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    +               reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    -               reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    OP_SHL          reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    OP_SHR          reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    OP_SHRR         reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    <               reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    >               reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LE           reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    OP_GE           reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    INSTANCEOF      reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    OP_EQ           reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    OP_NE           reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    &               reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    ^               reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    |               reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LAND         reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    ?               reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LOR          reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    SEMICOLON       reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    RROUNPAREN      reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    COLON           reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    COMMA           reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    RCURPAREN       reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    RSQPAREN        reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    =               reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_MUL         reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_DIV         reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_MOD         reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_ADD         reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_SUB         reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_SHL         reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_SHR         reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_SHRR        reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_AND         reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_XOR         reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_OR          reduce using rule 218 (UnaryExpression -> LogicalUnaryExpression .)


state 175

    (132) SelectionStatement -> IF . LROUNPAREN Expression RROUNPAREN Statement
    (133) SelectionStatement -> IF . LROUNPAREN Expression RROUNPAREN Statement ELSE Statement

    LROUNPAREN      shift and go to state 293


state 176

    (174) ComplexPrimaryNoParenthesis -> FieldAccess .

    LSQPAREN        reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    DOT             reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_INC          reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_DEC          reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    =               reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_MUL         reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_DIV         reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_MOD         reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_ADD         reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_SUB         reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_SHL         reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_SHR         reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_SHRR        reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_AND         reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_XOR         reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_OR          reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    *               reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    /               reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    %               reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    +               reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    -               reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_SHL          reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_SHR          reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_SHRR         reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    <               reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    >               reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LE           reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_GE           reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    INSTANCEOF      reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_EQ           reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_NE           reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    &               reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ^               reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    |               reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LAND         reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ?               reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LOR          reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    RCURPAREN       reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    COMMA           reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    LROUNPAREN      reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    SEMICOLON       reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    RROUNPAREN      reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    COLON           reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    RSQPAREN        reduce using rule 174 (ComplexPrimaryNoParenthesis -> FieldAccess .)


state 177

    (172) ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .

    LSQPAREN        reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    DOT             reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_INC          reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_DEC          reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    =               reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_MUL         reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_DIV         reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_MOD         reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_ADD         reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_SUB         reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_SHL         reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_SHR         reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_SHRR        reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_AND         reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_XOR         reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_OR          reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    *               reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    /               reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    %               reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    +               reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    -               reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_SHL          reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_SHR          reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_SHRR         reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    <               reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    >               reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_LE           reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_GE           reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    INSTANCEOF      reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_EQ           reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_NE           reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    &               reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ^               reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    |               reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_LAND         reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ?               reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_LOR          reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    RCURPAREN       reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    COMMA           reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    LROUNPAREN      reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    SEMICOLON       reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    RROUNPAREN      reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    COLON           reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    RSQPAREN        reduce using rule 172 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)


state 178

    (189) SpecialName -> SUPER .

    DOT             reduce using rule 189 (SpecialName -> SUPER .)
    OP_INC          reduce using rule 189 (SpecialName -> SUPER .)
    OP_DEC          reduce using rule 189 (SpecialName -> SUPER .)
    =               reduce using rule 189 (SpecialName -> SUPER .)
    ASS_MUL         reduce using rule 189 (SpecialName -> SUPER .)
    ASS_DIV         reduce using rule 189 (SpecialName -> SUPER .)
    ASS_MOD         reduce using rule 189 (SpecialName -> SUPER .)
    ASS_ADD         reduce using rule 189 (SpecialName -> SUPER .)
    ASS_SUB         reduce using rule 189 (SpecialName -> SUPER .)
    ASS_SHL         reduce using rule 189 (SpecialName -> SUPER .)
    ASS_SHR         reduce using rule 189 (SpecialName -> SUPER .)
    ASS_SHRR        reduce using rule 189 (SpecialName -> SUPER .)
    ASS_AND         reduce using rule 189 (SpecialName -> SUPER .)
    ASS_XOR         reduce using rule 189 (SpecialName -> SUPER .)
    ASS_OR          reduce using rule 189 (SpecialName -> SUPER .)
    *               reduce using rule 189 (SpecialName -> SUPER .)
    /               reduce using rule 189 (SpecialName -> SUPER .)
    %               reduce using rule 189 (SpecialName -> SUPER .)
    +               reduce using rule 189 (SpecialName -> SUPER .)
    -               reduce using rule 189 (SpecialName -> SUPER .)
    OP_SHL          reduce using rule 189 (SpecialName -> SUPER .)
    OP_SHR          reduce using rule 189 (SpecialName -> SUPER .)
    OP_SHRR         reduce using rule 189 (SpecialName -> SUPER .)
    <               reduce using rule 189 (SpecialName -> SUPER .)
    >               reduce using rule 189 (SpecialName -> SUPER .)
    OP_LE           reduce using rule 189 (SpecialName -> SUPER .)
    OP_GE           reduce using rule 189 (SpecialName -> SUPER .)
    INSTANCEOF      reduce using rule 189 (SpecialName -> SUPER .)
    OP_EQ           reduce using rule 189 (SpecialName -> SUPER .)
    OP_NE           reduce using rule 189 (SpecialName -> SUPER .)
    &               reduce using rule 189 (SpecialName -> SUPER .)
    ^               reduce using rule 189 (SpecialName -> SUPER .)
    |               reduce using rule 189 (SpecialName -> SUPER .)
    OP_LAND         reduce using rule 189 (SpecialName -> SUPER .)
    ?               reduce using rule 189 (SpecialName -> SUPER .)
    OP_LOR          reduce using rule 189 (SpecialName -> SUPER .)
    SEMICOLON       reduce using rule 189 (SpecialName -> SUPER .)
    LROUNPAREN      reduce using rule 189 (SpecialName -> SUPER .)
    COMMA           reduce using rule 189 (SpecialName -> SUPER .)
    RROUNPAREN      reduce using rule 189 (SpecialName -> SUPER .)
    COLON           reduce using rule 189 (SpecialName -> SUPER .)
    RCURPAREN       reduce using rule 189 (SpecialName -> SUPER .)
    RSQPAREN        reduce using rule 189 (SpecialName -> SUPER .)


state 179

    (153) JumpStatement -> THROW . Expression SEMICOLON
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 294
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 180

    (123) Statement -> IterationStatement .

    RCURPAREN       reduce using rule 123 (Statement -> IterationStatement .)
    FINAL           reduce using rule 123 (Statement -> IterationStatement .)
    SEMICOLON       reduce using rule 123 (Statement -> IterationStatement .)
    IDENTIFIER      reduce using rule 123 (Statement -> IterationStatement .)
    CASE            reduce using rule 123 (Statement -> IterationStatement .)
    DEFAULT         reduce using rule 123 (Statement -> IterationStatement .)
    IF              reduce using rule 123 (Statement -> IterationStatement .)
    SWITCH          reduce using rule 123 (Statement -> IterationStatement .)
    WHILE           reduce using rule 123 (Statement -> IterationStatement .)
    DO              reduce using rule 123 (Statement -> IterationStatement .)
    FOR             reduce using rule 123 (Statement -> IterationStatement .)
    BREAK           reduce using rule 123 (Statement -> IterationStatement .)
    CONTINUE        reduce using rule 123 (Statement -> IterationStatement .)
    RETURN          reduce using rule 123 (Statement -> IterationStatement .)
    THROW           reduce using rule 123 (Statement -> IterationStatement .)
    SYNCHRONIZED    reduce using rule 123 (Statement -> IterationStatement .)
    TRY             reduce using rule 123 (Statement -> IterationStatement .)
    LCURPAREN       reduce using rule 123 (Statement -> IterationStatement .)
    BOOLEAN         reduce using rule 123 (Statement -> IterationStatement .)
    CHAR            reduce using rule 123 (Statement -> IterationStatement .)
    BYTE            reduce using rule 123 (Statement -> IterationStatement .)
    SHORT           reduce using rule 123 (Statement -> IterationStatement .)
    INT             reduce using rule 123 (Statement -> IterationStatement .)
    LONG            reduce using rule 123 (Statement -> IterationStatement .)
    FLOAT           reduce using rule 123 (Statement -> IterationStatement .)
    DOUBLE          reduce using rule 123 (Statement -> IterationStatement .)
    VOID            reduce using rule 123 (Statement -> IterationStatement .)
    OP_INC          reduce using rule 123 (Statement -> IterationStatement .)
    OP_DEC          reduce using rule 123 (Statement -> IterationStatement .)
    +               reduce using rule 123 (Statement -> IterationStatement .)
    -               reduce using rule 123 (Statement -> IterationStatement .)
    ~               reduce using rule 123 (Statement -> IterationStatement .)
    !               reduce using rule 123 (Statement -> IterationStatement .)
    THIS            reduce using rule 123 (Statement -> IterationStatement .)
    SUPER           reduce using rule 123 (Statement -> IterationStatement .)
    NULL            reduce using rule 123 (Statement -> IterationStatement .)
    LROUNPAREN      reduce using rule 123 (Statement -> IterationStatement .)
    LITERAL         reduce using rule 123 (Statement -> IterationStatement .)
    BOOLEAN_CONST   reduce using rule 123 (Statement -> IterationStatement .)
    NEW             reduce using rule 123 (Statement -> IterationStatement .)
    ELSE            reduce using rule 123 (Statement -> IterationStatement .)


state 181

    (38) TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .

    SEMICOLON       reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    CLASS           reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    INTERFACE       reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    ABSTRACT        reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    FINAL           reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    PUBLIC          reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    PROTECTED       reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    PRIVATE         reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    STATIC          reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    TRANSIENT       reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    VOLATILE        reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    NATIVE          reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    SYNCHRONIZED    reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    $end            reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    RCURPAREN       reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    IDENTIFIER      reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    LCURPAREN       reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    BOOLEAN         reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    CHAR            reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    BYTE            reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    SHORT           reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    INT             reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    LONG            reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    FLOAT           reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    DOUBLE          reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    VOID            reduce using rule 38 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)


state 182

    (64) FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .

    RCURPAREN       reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    STATIC          reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    LCURPAREN       reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    ABSTRACT        reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    FINAL           reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PROTECTED       reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    TRANSIENT       reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    VOLATILE        reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    NATIVE          reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    SYNCHRONIZED    reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CLASS           reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INTERFACE       reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CHAR            reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BYTE            reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    SHORT           reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INT             reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    LONG            reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    VOID            reduce using rule 64 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)


state 183

    (98) Throws -> THROWS . ClassNameList
    (7) ClassNameList -> . QualifiedName
    (8) ClassNameList -> . ClassNameList COMMA QualifiedName
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    IDENTIFIER      shift and go to state 32

    QualifiedName                  shift and go to state 85
    ClassNameList                  shift and go to state 295

state 184

    (103) ConstructorDeclaration -> ConstructorDeclarator Throws . Block
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN

    LCURPAREN       shift and go to state 69

    Block                          shift and go to state 296

state 185

    (104) ConstructorDeclaration -> ConstructorDeclarator Block .

    SEMICOLON       reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    RCURPAREN       reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    STATIC          reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    LCURPAREN       reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    ABSTRACT        reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    FINAL           reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PROTECTED       reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    TRANSIENT       reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    VOLATILE        reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    NATIVE          reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    SYNCHRONIZED    reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CLASS           reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    INTERFACE       reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CHAR            reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BYTE            reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    SHORT           reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    INT             reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    LONG            reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    FLOAT           reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    VOID            reduce using rule 104 (ConstructorDeclaration -> ConstructorDeclarator Block .)


state 186

    (66) FieldDeclarationOptSemi -> FieldDeclaration SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    RCURPAREN       reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    STATIC          reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    IDENTIFIER      reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    LCURPAREN       reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    ABSTRACT        reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    FINAL           reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PUBLIC          reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PROTECTED       reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PRIVATE         reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    TRANSIENT       reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    VOLATILE        reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    NATIVE          reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    SYNCHRONIZED    reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CLASS           reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INTERFACE       reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BOOLEAN         reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CHAR            reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BYTE            reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    SHORT           reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INT             reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    LONG            reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    FLOAT           reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    DOUBLE          reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    VOID            reduce using rule 66 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    SEMICOLON       shift and go to state 41


state 187

    (40) ClassHeader -> Modifiers ClassWord IDENTIFIER Extends Interfaces .

    LCURPAREN       reduce using rule 40 (ClassHeader -> Modifiers ClassWord IDENTIFIER Extends Interfaces .)


state 188

    (35) ImportStatement -> IMPORT QualifiedName DOT * SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    IMPORT          reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    CLASS           reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    INTERFACE       reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    ABSTRACT        reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    FINAL           reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    PUBLIC          reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    PROTECTED       reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    PRIVATE         reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    STATIC          reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    TRANSIENT       reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    VOLATILE        reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    NATIVE          reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    SYNCHRONIZED    reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    $end            reduce using rule 35 (ImportStatement -> IMPORT QualifiedName DOT * SemiColons .)
    SEMICOLON       shift and go to state 41


state 189

    (8) ClassNameList -> ClassNameList COMMA . QualifiedName
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    IDENTIFIER      shift and go to state 32

    QualifiedName                  shift and go to state 297

state 190

    (110) Extends -> Extends COMMA TypeName .

    COMMA           reduce using rule 110 (Extends -> Extends COMMA TypeName .)
    IMPLEMENTS      reduce using rule 110 (Extends -> Extends COMMA TypeName .)
    LCURPAREN       reduce using rule 110 (Extends -> Extends COMMA TypeName .)


state 191

    (73) FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .
    (76) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMICOLON       reduce using rule 73 (FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .)
    COMMA           shift and go to state 195


state 192

    (85) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator . Throws MethodBody
    (86) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator . MethodBody
    (91) MethodDeclarator -> MethodDeclarator . OP_DIM
    (98) Throws -> . THROWS ClassNameList
    (99) MethodBody -> . Block
    (100) MethodBody -> . SEMICOLON
    (2) OP_DIM -> . LSQPAREN RSQPAREN
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN

    THROWS          shift and go to state 183
    SEMICOLON       shift and go to state 200
    LSQPAREN        shift and go to state 99
    LCURPAREN       shift and go to state 69

    MethodBody                     shift and go to state 298
    Throws                         shift and go to state 299
    OP_DIM                         shift and go to state 202
    Block                          shift and go to state 201

state 193

    (101) ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws . Block
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN

    LCURPAREN       shift and go to state 69

    Block                          shift and go to state 300

state 194

    (102) ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .

    SEMICOLON       reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    RCURPAREN       reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    STATIC          reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    LCURPAREN       reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    ABSTRACT        reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    FINAL           reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PROTECTED       reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    TRANSIENT       reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    VOLATILE        reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    NATIVE          reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    SYNCHRONIZED    reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CLASS           reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    INTERFACE       reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CHAR            reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BYTE            reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    SHORT           reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    INT             reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    LONG            reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    FLOAT           reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    VOID            reduce using rule 102 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)


state 195

    (76) VariableDeclarators -> VariableDeclarators COMMA . VariableDeclarator
    (77) VariableDeclarator -> . DeclaratorName
    (78) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (96) DeclaratorName -> . IDENTIFIER
    (97) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 97

    DeclaratorName                 shift and go to state 258
    VariableDeclarator             shift and go to state 301

state 196

    (97) DeclaratorName -> DeclaratorName OP_DIM .

    LROUNPAREN      reduce using rule 97 (DeclaratorName -> DeclaratorName OP_DIM .)
    =               reduce using rule 97 (DeclaratorName -> DeclaratorName OP_DIM .)
    LSQPAREN        reduce using rule 97 (DeclaratorName -> DeclaratorName OP_DIM .)
    COMMA           reduce using rule 97 (DeclaratorName -> DeclaratorName OP_DIM .)
    SEMICOLON       reduce using rule 97 (DeclaratorName -> DeclaratorName OP_DIM .)
    RROUNPAREN      reduce using rule 97 (DeclaratorName -> DeclaratorName OP_DIM .)


state 197

    (78) VariableDeclarator -> DeclaratorName = . VariableInitializer
    (79) VariableInitializer -> . Expression
    (80) VariableInitializer -> . LCURPAREN RCURPAREN
    (81) VariableInitializer -> . LCURPAREN ArrayInitializers RCURPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    LCURPAREN       shift and go to state 302
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    VariableInitializer            shift and go to state 303
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 304
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 198

    (89) MethodDeclarator -> DeclaratorName LROUNPAREN . ParameterList RROUNPAREN
    (90) MethodDeclarator -> DeclaratorName LROUNPAREN . RROUNPAREN
    (92) ParameterList -> . Parameter
    (93) ParameterList -> . ParameterList COMMA Parameter
    (94) Parameter -> . TypeSpecifier DeclaratorName
    (95) Parameter -> . FINAL TypeSpecifier DeclaratorName
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RROUNPAREN      shift and go to state 305
    FINAL           shift and go to state 208
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    IDENTIFIER      shift and go to state 32

    QualifiedName                  shift and go to state 64
    PrimitiveType                  shift and go to state 56
    ParameterList                  shift and go to state 306
    TypeName                       shift and go to state 65
    Parameter                      shift and go to state 207
    TypeSpecifier                  shift and go to state 209

state 199

    (88) MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .

    SEMICOLON       reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    RCURPAREN       reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    LCURPAREN       reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    ABSTRACT        reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    FINAL           reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PROTECTED       reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    TRANSIENT       reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    VOLATILE        reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    NATIVE          reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    SYNCHRONIZED    reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INTERFACE       reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 88 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)


state 200

    (100) MethodBody -> SEMICOLON .

    SEMICOLON       reduce using rule 100 (MethodBody -> SEMICOLON .)
    RCURPAREN       reduce using rule 100 (MethodBody -> SEMICOLON .)
    STATIC          reduce using rule 100 (MethodBody -> SEMICOLON .)
    IDENTIFIER      reduce using rule 100 (MethodBody -> SEMICOLON .)
    LCURPAREN       reduce using rule 100 (MethodBody -> SEMICOLON .)
    ABSTRACT        reduce using rule 100 (MethodBody -> SEMICOLON .)
    FINAL           reduce using rule 100 (MethodBody -> SEMICOLON .)
    PUBLIC          reduce using rule 100 (MethodBody -> SEMICOLON .)
    PROTECTED       reduce using rule 100 (MethodBody -> SEMICOLON .)
    PRIVATE         reduce using rule 100 (MethodBody -> SEMICOLON .)
    TRANSIENT       reduce using rule 100 (MethodBody -> SEMICOLON .)
    VOLATILE        reduce using rule 100 (MethodBody -> SEMICOLON .)
    NATIVE          reduce using rule 100 (MethodBody -> SEMICOLON .)
    SYNCHRONIZED    reduce using rule 100 (MethodBody -> SEMICOLON .)
    CLASS           reduce using rule 100 (MethodBody -> SEMICOLON .)
    INTERFACE       reduce using rule 100 (MethodBody -> SEMICOLON .)
    BOOLEAN         reduce using rule 100 (MethodBody -> SEMICOLON .)
    CHAR            reduce using rule 100 (MethodBody -> SEMICOLON .)
    BYTE            reduce using rule 100 (MethodBody -> SEMICOLON .)
    SHORT           reduce using rule 100 (MethodBody -> SEMICOLON .)
    INT             reduce using rule 100 (MethodBody -> SEMICOLON .)
    LONG            reduce using rule 100 (MethodBody -> SEMICOLON .)
    FLOAT           reduce using rule 100 (MethodBody -> SEMICOLON .)
    DOUBLE          reduce using rule 100 (MethodBody -> SEMICOLON .)
    VOID            reduce using rule 100 (MethodBody -> SEMICOLON .)


state 201

    (99) MethodBody -> Block .

    SEMICOLON       reduce using rule 99 (MethodBody -> Block .)
    RCURPAREN       reduce using rule 99 (MethodBody -> Block .)
    STATIC          reduce using rule 99 (MethodBody -> Block .)
    IDENTIFIER      reduce using rule 99 (MethodBody -> Block .)
    LCURPAREN       reduce using rule 99 (MethodBody -> Block .)
    ABSTRACT        reduce using rule 99 (MethodBody -> Block .)
    FINAL           reduce using rule 99 (MethodBody -> Block .)
    PUBLIC          reduce using rule 99 (MethodBody -> Block .)
    PROTECTED       reduce using rule 99 (MethodBody -> Block .)
    PRIVATE         reduce using rule 99 (MethodBody -> Block .)
    TRANSIENT       reduce using rule 99 (MethodBody -> Block .)
    VOLATILE        reduce using rule 99 (MethodBody -> Block .)
    NATIVE          reduce using rule 99 (MethodBody -> Block .)
    SYNCHRONIZED    reduce using rule 99 (MethodBody -> Block .)
    CLASS           reduce using rule 99 (MethodBody -> Block .)
    INTERFACE       reduce using rule 99 (MethodBody -> Block .)
    BOOLEAN         reduce using rule 99 (MethodBody -> Block .)
    CHAR            reduce using rule 99 (MethodBody -> Block .)
    BYTE            reduce using rule 99 (MethodBody -> Block .)
    SHORT           reduce using rule 99 (MethodBody -> Block .)
    INT             reduce using rule 99 (MethodBody -> Block .)
    LONG            reduce using rule 99 (MethodBody -> Block .)
    FLOAT           reduce using rule 99 (MethodBody -> Block .)
    DOUBLE          reduce using rule 99 (MethodBody -> Block .)
    VOID            reduce using rule 99 (MethodBody -> Block .)


state 202

    (91) MethodDeclarator -> MethodDeclarator OP_DIM .

    THROWS          reduce using rule 91 (MethodDeclarator -> MethodDeclarator OP_DIM .)
    SEMICOLON       reduce using rule 91 (MethodDeclarator -> MethodDeclarator OP_DIM .)
    LSQPAREN        reduce using rule 91 (MethodDeclarator -> MethodDeclarator OP_DIM .)
    LCURPAREN       reduce using rule 91 (MethodDeclarator -> MethodDeclarator OP_DIM .)


state 203

    (87) MethodDeclaration -> TypeSpecifier MethodDeclarator Throws . MethodBody
    (99) MethodBody -> . Block
    (100) MethodBody -> . SEMICOLON
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN

    SEMICOLON       shift and go to state 200
    LCURPAREN       shift and go to state 69

    MethodBody                     shift and go to state 307
    Block                          shift and go to state 201

state 204

    (2) OP_DIM -> LSQPAREN RSQPAREN .

    LSQPAREN        reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    RROUNPAREN      reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    IDENTIFIER      reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    <               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    >               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_LE           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_GE           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    INSTANCEOF      reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_EQ           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_NE           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    &               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ^               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    |               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_LAND         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ?               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_LOR          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    SEMICOLON       reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    COLON           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    COMMA           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    RCURPAREN       reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    RSQPAREN        reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    LROUNPAREN      reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    =               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    LCURPAREN       reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    DOT             reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_INC          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_DEC          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_MUL         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_DIV         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_MOD         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_ADD         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_SUB         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_SHL         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_SHR         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_SHRR        reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_AND         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_XOR         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_OR          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    *               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    /               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    %               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    +               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    -               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_SHL          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_SHR          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_SHRR         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    THROWS          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)


state 205

    (210) Dims -> Dims OP_DIM .

    LSQPAREN        reduce using rule 210 (Dims -> Dims OP_DIM .)
    LCURPAREN       reduce using rule 210 (Dims -> Dims OP_DIM .)
    DOT             reduce using rule 210 (Dims -> Dims OP_DIM .)
    OP_INC          reduce using rule 210 (Dims -> Dims OP_DIM .)
    OP_DEC          reduce using rule 210 (Dims -> Dims OP_DIM .)
    =               reduce using rule 210 (Dims -> Dims OP_DIM .)
    ASS_MUL         reduce using rule 210 (Dims -> Dims OP_DIM .)
    ASS_DIV         reduce using rule 210 (Dims -> Dims OP_DIM .)
    ASS_MOD         reduce using rule 210 (Dims -> Dims OP_DIM .)
    ASS_ADD         reduce using rule 210 (Dims -> Dims OP_DIM .)
    ASS_SUB         reduce using rule 210 (Dims -> Dims OP_DIM .)
    ASS_SHL         reduce using rule 210 (Dims -> Dims OP_DIM .)
    ASS_SHR         reduce using rule 210 (Dims -> Dims OP_DIM .)
    ASS_SHRR        reduce using rule 210 (Dims -> Dims OP_DIM .)
    ASS_AND         reduce using rule 210 (Dims -> Dims OP_DIM .)
    ASS_XOR         reduce using rule 210 (Dims -> Dims OP_DIM .)
    ASS_OR          reduce using rule 210 (Dims -> Dims OP_DIM .)
    *               reduce using rule 210 (Dims -> Dims OP_DIM .)
    /               reduce using rule 210 (Dims -> Dims OP_DIM .)
    %               reduce using rule 210 (Dims -> Dims OP_DIM .)
    +               reduce using rule 210 (Dims -> Dims OP_DIM .)
    -               reduce using rule 210 (Dims -> Dims OP_DIM .)
    OP_SHL          reduce using rule 210 (Dims -> Dims OP_DIM .)
    OP_SHR          reduce using rule 210 (Dims -> Dims OP_DIM .)
    OP_SHRR         reduce using rule 210 (Dims -> Dims OP_DIM .)
    <               reduce using rule 210 (Dims -> Dims OP_DIM .)
    >               reduce using rule 210 (Dims -> Dims OP_DIM .)
    OP_LE           reduce using rule 210 (Dims -> Dims OP_DIM .)
    OP_GE           reduce using rule 210 (Dims -> Dims OP_DIM .)
    INSTANCEOF      reduce using rule 210 (Dims -> Dims OP_DIM .)
    OP_EQ           reduce using rule 210 (Dims -> Dims OP_DIM .)
    OP_NE           reduce using rule 210 (Dims -> Dims OP_DIM .)
    &               reduce using rule 210 (Dims -> Dims OP_DIM .)
    ^               reduce using rule 210 (Dims -> Dims OP_DIM .)
    |               reduce using rule 210 (Dims -> Dims OP_DIM .)
    OP_LAND         reduce using rule 210 (Dims -> Dims OP_DIM .)
    ?               reduce using rule 210 (Dims -> Dims OP_DIM .)
    OP_LOR          reduce using rule 210 (Dims -> Dims OP_DIM .)
    SEMICOLON       reduce using rule 210 (Dims -> Dims OP_DIM .)
    RROUNPAREN      reduce using rule 210 (Dims -> Dims OP_DIM .)
    COLON           reduce using rule 210 (Dims -> Dims OP_DIM .)
    COMMA           reduce using rule 210 (Dims -> Dims OP_DIM .)
    RCURPAREN       reduce using rule 210 (Dims -> Dims OP_DIM .)
    RSQPAREN        reduce using rule 210 (Dims -> Dims OP_DIM .)
    IDENTIFIER      reduce using rule 210 (Dims -> Dims OP_DIM .)


state 206

    (106) ConstructorDeclarator -> IDENTIFIER LROUNPAREN RROUNPAREN .

    THROWS          reduce using rule 106 (ConstructorDeclarator -> IDENTIFIER LROUNPAREN RROUNPAREN .)
    LCURPAREN       reduce using rule 106 (ConstructorDeclarator -> IDENTIFIER LROUNPAREN RROUNPAREN .)


state 207

    (92) ParameterList -> Parameter .

    RROUNPAREN      reduce using rule 92 (ParameterList -> Parameter .)
    COMMA           reduce using rule 92 (ParameterList -> Parameter .)


state 208

    (95) Parameter -> FINAL . TypeSpecifier DeclaratorName
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    IDENTIFIER      shift and go to state 32

    QualifiedName                  shift and go to state 64
    PrimitiveType                  shift and go to state 56
    TypeName                       shift and go to state 65
    TypeSpecifier                  shift and go to state 308

state 209

    (94) Parameter -> TypeSpecifier . DeclaratorName
    (96) DeclaratorName -> . IDENTIFIER
    (97) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 97

    DeclaratorName                 shift and go to state 309

state 210

    (105) ConstructorDeclarator -> IDENTIFIER LROUNPAREN ParameterList . RROUNPAREN
    (93) ParameterList -> ParameterList . COMMA Parameter

    RROUNPAREN      shift and go to state 310
    COMMA           shift and go to state 311


state 211

    (121) Statement -> ExpressionStatement SEMICOLON .

    RCURPAREN       reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    FINAL           reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    SEMICOLON       reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    IDENTIFIER      reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    CASE            reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    DEFAULT         reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    IF              reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    SWITCH          reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    WHILE           reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    DO              reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    FOR             reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    BREAK           reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    CONTINUE        reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    RETURN          reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    THROW           reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    SYNCHRONIZED    reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    TRY             reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    LCURPAREN       reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    BOOLEAN         reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    CHAR            reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    BYTE            reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    SHORT           reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    INT             reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    LONG            reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    FLOAT           reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    DOUBLE          reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    VOID            reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    OP_INC          reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    OP_DEC          reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    +               reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    -               reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    ~               reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    !               reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    THIS            reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    SUPER           reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    NULL            reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    LROUNPAREN      reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    LITERAL         reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    NEW             reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)
    ELSE            reduce using rule 121 (Statement -> ExpressionStatement SEMICOLON .)


state 212

    (182) FieldAccess -> PrimitiveType DOT . CLASS

    CLASS           shift and go to state 312


state 213

    (253) AndExpression -> AndExpression & . EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    EqualityExpression             shift and go to state 313
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ShiftExpression                shift and go to state 170
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 214

    (259) ConditionalAndExpression -> ConditionalAndExpression OP_LAND . InclusiveOrExpression
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ShiftExpression                shift and go to state 170
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    UnaryExpression                shift and go to state 227
    InclusiveOrExpression          shift and go to state 314
    FieldAccess                    shift and go to state 176
    ExclusiveOrExpression          shift and go to state 134
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 215

    (229) PrimitiveTypeExpression -> PrimitiveType .
    (230) PrimitiveTypeExpression -> PrimitiveType . Dims
    (182) FieldAccess -> PrimitiveType . DOT CLASS
    (209) Dims -> . OP_DIM
    (210) Dims -> . Dims OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    RROUNPAREN      reduce using rule 229 (PrimitiveTypeExpression -> PrimitiveType .)
    DOT             shift and go to state 212
    LSQPAREN        shift and go to state 99

    Dims                           shift and go to state 315
    OP_DIM                         shift and go to state 100

state 216

    (227) CastExpression -> LROUNPAREN ClassTypeExpression . RROUNPAREN CastExpression

    RROUNPAREN      shift and go to state 316


state 217

    (169) ComplexPrimary -> LROUNPAREN Expression . RROUNPAREN
    (228) CastExpression -> LROUNPAREN Expression . RROUNPAREN LogicalUnaryExpression

    RROUNPAREN      shift and go to state 317


state 218

    (226) CastExpression -> LROUNPAREN PrimitiveTypeExpression . RROUNPAREN CastExpression

    RROUNPAREN      shift and go to state 318


state 219

    (231) ClassTypeExpression -> QualifiedName . Dims
    (37) QualifiedName -> QualifiedName . DOT IDENTIFIER
    (164) PrimaryExpression -> QualifiedName .
    (194) NewAllocationExpression -> QualifiedName . DOT PlainNewAllocationExpression
    (176) ArrayAccess -> QualifiedName . LSQPAREN Expression RSQPAREN
    (180) FieldAccess -> QualifiedName . DOT THIS
    (181) FieldAccess -> QualifiedName . DOT CLASS
    (187) MethodAccess -> QualifiedName .
    (209) Dims -> . OP_DIM
    (210) Dims -> . Dims OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    DOT             shift and go to state 285
    OP_INC          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_DEC          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_MUL         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_DIV         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_MOD         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_ADD         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_SUB         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_SHL         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_SHR         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_SHRR        reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_AND         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_XOR         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_OR          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_SHL          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_SHR          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_SHRR         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    INSTANCEOF      reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    RROUNPAREN      reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    LSQPAREN        shift and go to state 319
    LROUNPAREN      reduce using rule 187 (MethodAccess -> QualifiedName .)

    Dims                           shift and go to state 320
    OP_DIM                         shift and go to state 100

state 220

    (182) FieldAccess -> PrimitiveType . DOT CLASS

    DOT             shift and go to state 212


state 221

    (152) JumpStatement -> RETURN SEMICOLON .

    RCURPAREN       reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    FINAL           reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    CASE            reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    IF              reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    DO              reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    FOR             reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    THROW           reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    TRY             reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    LCURPAREN       reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    BOOLEAN         reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    BYTE            reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    INT             reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    LONG            reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    VOID            reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    OP_INC          reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    OP_DEC          reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    +               reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    -               reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    ~               reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    !               reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    THIS            reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    SUPER           reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    NULL            reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    LROUNPAREN      reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    LITERAL         reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    NEW             reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 152 (JumpStatement -> RETURN SEMICOLON .)


state 222

    (151) JumpStatement -> RETURN Expression . SEMICOLON

    SEMICOLON       shift and go to state 321


state 223

    (164) PrimaryExpression -> QualifiedName .
    (37) QualifiedName -> QualifiedName . DOT IDENTIFIER
    (194) NewAllocationExpression -> QualifiedName . DOT PlainNewAllocationExpression
    (176) ArrayAccess -> QualifiedName . LSQPAREN Expression RSQPAREN
    (180) FieldAccess -> QualifiedName . DOT THIS
    (181) FieldAccess -> QualifiedName . DOT CLASS
    (187) MethodAccess -> QualifiedName .

    OP_INC          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_DEC          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_MUL         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_DIV         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_MOD         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_ADD         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_SUB         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_SHL         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_SHR         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_SHRR        reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_AND         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_XOR         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ASS_OR          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_SHL          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_SHR          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_SHRR         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    INSTANCEOF      reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    RSQPAREN        reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    SEMICOLON       reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    RROUNPAREN      reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    COMMA           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    RCURPAREN       reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    COLON           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    DOT             shift and go to state 285
    LSQPAREN        shift and go to state 284
    LROUNPAREN      reduce using rule 187 (MethodAccess -> QualifiedName .)


state 224

    (154) GuardingStatement -> SYNCHRONIZED LROUNPAREN . Expression RROUNPAREN Statement
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 322
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 225

    (179) FieldAccess -> RealPostfixExpression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 323


state 226

    (217) UnaryExpression -> ArithmeticUnaryOperator CastExpression .

    *               reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    /               reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    %               reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    +               reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    -               reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_SHL          reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_SHR          reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_SHRR         reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    <               reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    >               reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LE           reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_GE           reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    INSTANCEOF      reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_EQ           reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_NE           reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    &               reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ^               reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    |               reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LAND         reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ?               reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LOR          reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    SEMICOLON       reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    RROUNPAREN      reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    COLON           reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    COMMA           reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    RCURPAREN       reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    RSQPAREN        reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    =               reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_MUL         reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_DIV         reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_MOD         reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_ADD         reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_SUB         reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_SHL         reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_SHR         reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_SHRR        reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_AND         reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_XOR         reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_OR          reduce using rule 217 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)


state 227

    (225) CastExpression -> UnaryExpression .

    *               reduce using rule 225 (CastExpression -> UnaryExpression .)
    /               reduce using rule 225 (CastExpression -> UnaryExpression .)
    %               reduce using rule 225 (CastExpression -> UnaryExpression .)
    +               reduce using rule 225 (CastExpression -> UnaryExpression .)
    -               reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_SHL          reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_SHR          reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_SHRR         reduce using rule 225 (CastExpression -> UnaryExpression .)
    <               reduce using rule 225 (CastExpression -> UnaryExpression .)
    >               reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 225 (CastExpression -> UnaryExpression .)
    INSTANCEOF      reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 225 (CastExpression -> UnaryExpression .)
    &               reduce using rule 225 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 225 (CastExpression -> UnaryExpression .)
    |               reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 225 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 225 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 225 (CastExpression -> UnaryExpression .)
    SEMICOLON       reduce using rule 225 (CastExpression -> UnaryExpression .)
    RROUNPAREN      reduce using rule 225 (CastExpression -> UnaryExpression .)
    COLON           reduce using rule 225 (CastExpression -> UnaryExpression .)
    COMMA           reduce using rule 225 (CastExpression -> UnaryExpression .)
    RCURPAREN       reduce using rule 225 (CastExpression -> UnaryExpression .)
    RSQPAREN        reduce using rule 225 (CastExpression -> UnaryExpression .)
    =               reduce using rule 225 (CastExpression -> UnaryExpression .)
    ASS_MUL         reduce using rule 225 (CastExpression -> UnaryExpression .)
    ASS_DIV         reduce using rule 225 (CastExpression -> UnaryExpression .)
    ASS_MOD         reduce using rule 225 (CastExpression -> UnaryExpression .)
    ASS_ADD         reduce using rule 225 (CastExpression -> UnaryExpression .)
    ASS_SUB         reduce using rule 225 (CastExpression -> UnaryExpression .)
    ASS_SHL         reduce using rule 225 (CastExpression -> UnaryExpression .)
    ASS_SHR         reduce using rule 225 (CastExpression -> UnaryExpression .)
    ASS_SHRR        reduce using rule 225 (CastExpression -> UnaryExpression .)
    ASS_AND         reduce using rule 225 (CastExpression -> UnaryExpression .)
    ASS_XOR         reduce using rule 225 (CastExpression -> UnaryExpression .)
    ASS_OR          reduce using rule 225 (CastExpression -> UnaryExpression .)


state 228

    (226) CastExpression -> LROUNPAREN . PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> LROUNPAREN . ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> LROUNPAREN . Expression RROUNPAREN LogicalUnaryExpression
    (169) ComplexPrimary -> LROUNPAREN . Expression RROUNPAREN
    (229) PrimitiveTypeExpression -> . PrimitiveType
    (230) PrimitiveTypeExpression -> . PrimitiveType Dims
    (231) ClassTypeExpression -> . QualifiedName Dims
    (278) Expression -> . AssignmentExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    IDENTIFIER      shift and go to state 32
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 215
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 219
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 324
    AdditiveExpression             shift and go to state 157
    PrimitiveTypeExpression        shift and go to state 218
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    ClassTypeExpression            shift and go to state 216
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 229

    (118) LocalVariableDeclarationStatement -> FINAL TypeSpecifier . VariableDeclarators SEMICOLON
    (75) VariableDeclarators -> . VariableDeclarator
    (76) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (77) VariableDeclarator -> . DeclaratorName
    (78) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (96) DeclaratorName -> . IDENTIFIER
    (97) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 97

    VariableDeclarators            shift and go to state 325
    DeclaratorName                 shift and go to state 258
    VariableDeclarator             shift and go to state 98

state 230

    (251) EqualityExpression -> EqualityExpression OP_NE . RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ShiftExpression                shift and go to state 170
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    RelationalExpression           shift and go to state 326
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 231

    (250) EqualityExpression -> EqualityExpression OP_EQ . RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ShiftExpression                shift and go to state 170
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    RelationalExpression           shift and go to state 327
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 232

    (233) MultiplicativeExpression -> MultiplicativeExpression * . CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 328
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    ClassAllocationExpression      shift and go to state 141
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    QualifiedName                  shift and go to state 223
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    ArrayAllocationExpression      shift and go to state 131
    MethodCall                     shift and go to state 121
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 227
    PrimaryExpression              shift and go to state 148
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 233

    (235) MultiplicativeExpression -> MultiplicativeExpression % . CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 329
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    ClassAllocationExpression      shift and go to state 141
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    QualifiedName                  shift and go to state 223
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    ArrayAllocationExpression      shift and go to state 131
    MethodCall                     shift and go to state 121
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 227
    PrimaryExpression              shift and go to state 148
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 234

    (234) MultiplicativeExpression -> MultiplicativeExpression / . CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 330
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    ClassAllocationExpression      shift and go to state 141
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    QualifiedName                  shift and go to state 223
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    ArrayAllocationExpression      shift and go to state 131
    MethodCall                     shift and go to state 121
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 227
    PrimaryExpression              shift and go to state 148
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 235

    (137) IterationStatement -> FOR LROUNPAREN . ForInit ForExpr ForIncr RROUNPAREN Statement
    (138) IterationStatement -> FOR LROUNPAREN . ForInit ForExpr RROUNPAREN Statement
    (139) ForInit -> . ExpressionStatements SEMICOLON
    (140) ForInit -> . LocalVariableDeclarationStatement
    (141) ForInit -> . SEMICOLON
    (145) ExpressionStatements -> . ExpressionStatement
    (146) ExpressionStatements -> . ExpressionStatements COMMA ExpressionStatement
    (117) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators SEMICOLON
    (118) LocalVariableDeclarationStatement -> . FINAL TypeSpecifier VariableDeclarators SEMICOLON
    (131) ExpressionStatement -> . Expression
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (278) Expression -> . AssignmentExpression
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    SEMICOLON       shift and go to state 333
    FINAL           shift and go to state 116
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    IDENTIFIER      shift and go to state 32
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    ArithmeticUnaryOperator        shift and go to state 115
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ExpressionStatement            shift and go to state 331
    PrimitiveType                  shift and go to state 104
    RealPostfixExpression          shift and go to state 114
    AndExpression                  shift and go to state 106
    MultiplicativeExpression       shift and go to state 119
    TypeSpecifier                  shift and go to state 147
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    QualifiedName                  shift and go to state 167
    ComplexPrimaryNoParenthesis    shift and go to state 118
    TypeName                       shift and go to state 65
    ArrayAccess                    shift and go to state 129
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    LocalVariableDeclarationStatement shift and go to state 335
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    LogicalUnaryOperator           shift and go to state 173
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 159
    Expression                     shift and go to state 156
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    ForInit                        shift and go to state 332
    InclusiveOrExpression          shift and go to state 160
    PrimaryExpression              shift and go to state 148
    ExpressionStatements           shift and go to state 334
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 236

    (215) UnaryExpression -> OP_INC UnaryExpression .

    *               reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    /               reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    %               reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    +               reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    -               reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_SHL          reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_SHR          reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_SHRR         reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    <               reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    >               reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_LE           reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_GE           reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    INSTANCEOF      reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_EQ           reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_NE           reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    &               reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    ^               reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    |               reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_LAND         reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    ?               reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_LOR          reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    SEMICOLON       reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    RROUNPAREN      reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    COLON           reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    COMMA           reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    RCURPAREN       reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    RSQPAREN        reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    =               reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_MUL         reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_DIV         reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_MOD         reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_ADD         reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_SUB         reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_SHL         reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_SHR         reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_SHRR        reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_AND         reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_XOR         reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_OR          reduce using rule 215 (UnaryExpression -> OP_INC UnaryExpression .)


state 237

    (169) ComplexPrimary -> LROUNPAREN . Expression RROUNPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 336
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 238

    (155) GuardingStatement -> TRY Block . Finally
    (156) GuardingStatement -> TRY Block . Catches
    (157) GuardingStatement -> TRY Block . Catches Finally
    (163) Finally -> . FINALLY Block
    (158) Catches -> . Catch
    (159) Catches -> . Catches Catch
    (160) Catch -> . CatchHeader Block
    (161) CatchHeader -> . CATCH LROUNPAREN TypeSpecifier IDENTIFIER RROUNPAREN
    (162) CatchHeader -> . CATCH LROUNPAREN TypeSpecifier RROUNPAREN

    FINALLY         shift and go to state 338
    CATCH           shift and go to state 339

    Catches                        shift and go to state 337
    CatchHeader                    shift and go to state 340
    Finally                        shift and go to state 341
    Catch                          shift and go to state 342

state 239

    (197) PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN . RCURPAREN
    (199) PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN . ArrayInitializers RCURPAREN
    (82) ArrayInitializers -> . VariableInitializer
    (83) ArrayInitializers -> . ArrayInitializers COMMA VariableInitializer
    (84) ArrayInitializers -> . ArrayInitializers COMMA
    (79) VariableInitializer -> . Expression
    (80) VariableInitializer -> . LCURPAREN RCURPAREN
    (81) VariableInitializer -> . LCURPAREN ArrayInitializers RCURPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    RCURPAREN       shift and go to state 344
    LCURPAREN       shift and go to state 302
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    VariableInitializer            shift and go to state 345
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    ArrayInitializers              shift and go to state 343
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 304
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 240

    (183) MethodCall -> MethodAccess LROUNPAREN . ArgumentList RROUNPAREN
    (184) MethodCall -> MethodAccess LROUNPAREN . RROUNPAREN
    (191) ArgumentList -> . Expression
    (192) ArgumentList -> . ArgumentList COMMA Expression
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    RROUNPAREN      shift and go to state 347
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    FieldAccess                    shift and go to state 176
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    ArgumentList                   shift and go to state 346
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 348
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    SpecialName                    shift and go to state 139

state 241

    (213) RealPostfixExpression -> PostfixExpression OP_INC .

    DOT             reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_INC          reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_DEC          reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    =               reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_MUL         reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_DIV         reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_MOD         reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_ADD         reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_SUB         reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_SHL         reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_SHR         reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_SHRR        reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_AND         reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_XOR         reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_OR          reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    *               reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    /               reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    %               reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    +               reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    -               reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_SHL          reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_SHR          reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_SHRR         reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    <               reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    >               reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_LE           reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_GE           reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    INSTANCEOF      reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_EQ           reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_NE           reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    &               reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ^               reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    |               reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_LAND         reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ?               reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_LOR          reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    SEMICOLON       reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    RROUNPAREN      reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    COLON           reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    COMMA           reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    RCURPAREN       reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)
    RSQPAREN        reduce using rule 213 (RealPostfixExpression -> PostfixExpression OP_INC .)


state 242

    (214) RealPostfixExpression -> PostfixExpression OP_DEC .

    DOT             reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_INC          reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_DEC          reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    =               reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_MUL         reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_DIV         reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_MOD         reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_ADD         reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_SUB         reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_SHL         reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_SHR         reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_SHRR        reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_AND         reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_XOR         reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_OR          reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    *               reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    /               reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    %               reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    +               reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    -               reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_SHL          reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_SHR          reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_SHRR         reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    <               reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    >               reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_LE           reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_GE           reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    INSTANCEOF      reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_EQ           reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_NE           reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    &               reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ^               reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    |               reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_LAND         reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ?               reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_LOR          reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    SEMICOLON       reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    RROUNPAREN      reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    COLON           reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    COMMA           reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    RCURPAREN       reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    RSQPAREN        reduce using rule 214 (RealPostfixExpression -> PostfixExpression OP_DEC .)


state 243

    (255) ExclusiveOrExpression -> ExclusiveOrExpression ^ . AndExpression
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 349
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ShiftExpression                shift and go to state 170
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 244

    (248) RelationalExpression -> RelationalExpression INSTANCEOF . TypeSpecifier
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    IDENTIFIER      shift and go to state 32

    QualifiedName                  shift and go to state 64
    TypeName                       shift and go to state 65
    PrimitiveType                  shift and go to state 56
    TypeSpecifier                  shift and go to state 350

state 245

    (244) RelationalExpression -> RelationalExpression < . ShiftExpression
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ShiftExpression                shift and go to state 351
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 246

    (246) RelationalExpression -> RelationalExpression OP_LE . ShiftExpression
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ShiftExpression                shift and go to state 352
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 247

    (247) RelationalExpression -> RelationalExpression OP_GE . ShiftExpression
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ShiftExpression                shift and go to state 353
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 248

    (245) RelationalExpression -> RelationalExpression > . ShiftExpression
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ShiftExpression                shift and go to state 354
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 249

    (149) JumpStatement -> CONTINUE IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 355


state 250

    (150) JumpStatement -> CONTINUE SEMICOLON .

    RCURPAREN       reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    FINAL           reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    THROW           reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    SYNCHRONIZED    reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    LCURPAREN       reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    BOOLEAN         reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    BYTE            reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    OP_INC          reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    OP_DEC          reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    +               reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    -               reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    ~               reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    !               reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    SUPER           reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    NULL            reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    LROUNPAREN      reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    LITERAL         reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 150 (JumpStatement -> CONTINUE SEMICOLON .)


state 251

    (177) ArrayAccess -> ComplexPrimary LSQPAREN . Expression RSQPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    ComplexPrimary                 shift and go to state 140
    PostfixExpression              shift and go to state 133
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 356
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 252

    (198) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN . RCURPAREN
    (200) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN . FieldDeclarations RCURPAREN
    (63) FieldDeclarations -> . FieldDeclarationOptSemi
    (64) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (65) FieldDeclarationOptSemi -> . FieldDeclaration
    (66) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (67) FieldDeclaration -> . FieldVariableDeclaration SEMICOLON
    (68) FieldDeclaration -> . MethodDeclaration
    (69) FieldDeclaration -> . ConstructorDeclaration
    (70) FieldDeclaration -> . StaticInitializer
    (71) FieldDeclaration -> . NonStaticInitializer
    (72) FieldDeclaration -> . TypeDeclaration
    (73) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (74) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (85) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator Throws MethodBody
    (86) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (87) MethodDeclaration -> . TypeSpecifier MethodDeclarator Throws MethodBody
    (88) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (101) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Throws Block
    (102) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (103) ConstructorDeclaration -> . ConstructorDeclarator Throws Block
    (104) ConstructorDeclaration -> . ConstructorDeclarator Block
    (107) StaticInitializer -> . STATIC Block
    (108) NonStaticInitializer -> . Block
    (38) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (48) Modifiers -> . Modifier
    (49) Modifiers -> . Modifiers Modifier
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (105) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (106) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (42) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (44) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (45) ClassHeader -> . ClassWord IDENTIFIER Extends
    (46) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (47) ClassHeader -> . ClassWord IDENTIFIER
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RCURPAREN       shift and go to state 357
    STATIC          shift and go to state 60
    IDENTIFIER      shift and go to state 66
    LCURPAREN       shift and go to state 69
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2
    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    FieldVariableDeclaration       shift and go to state 54
    TypeDeclaration                shift and go to state 55
    PrimitiveType                  shift and go to state 56
    StaticInitializer              shift and go to state 57
    NonStaticInitializer           shift and go to state 62
    TypeSpecifier                  shift and go to state 63
    QualifiedName                  shift and go to state 64
    TypeName                       shift and go to state 65
    MethodDeclaration              shift and go to state 67
    Modifiers                      shift and go to state 59
    ConstructorDeclaration         shift and go to state 53
    FieldDeclarations              shift and go to state 358
    Modifier                       shift and go to state 17
    Block                          shift and go to state 73
    ClassWord                      shift and go to state 19
    FieldDeclarationOptSemi        shift and go to state 74
    ConstructorDeclarator          shift and go to state 75
    ClassHeader                    shift and go to state 23
    FieldDeclaration               shift and go to state 80

state 253

    (130) LabelStatement -> DEFAULT COLON .

    RCURPAREN       reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    FINAL           reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    SEMICOLON       reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    CASE            reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    DEFAULT         reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    IF              reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    SWITCH          reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    WHILE           reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    DO              reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    FOR             reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    BREAK           reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    CONTINUE        reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    RETURN          reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    THROW           reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    SYNCHRONIZED    reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    TRY             reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    LCURPAREN       reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    BOOLEAN         reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    CHAR            reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    BYTE            reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    SHORT           reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    INT             reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    LONG            reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    FLOAT           reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    DOUBLE          reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    VOID            reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    OP_INC          reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    OP_DEC          reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    +               reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    -               reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    ~               reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    !               reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    THIS            reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    SUPER           reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    NULL            reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    LROUNPAREN      reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    LITERAL         reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    BOOLEAN_CONST   reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    NEW             reduce using rule 130 (LabelStatement -> DEFAULT COLON .)
    ELSE            reduce using rule 130 (LabelStatement -> DEFAULT COLON .)


state 254

    (135) IterationStatement -> WHILE LROUNPAREN . Expression RROUNPAREN Statement
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 359
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 255

    (216) UnaryExpression -> OP_DEC UnaryExpression .

    *               reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    /               reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    %               reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    +               reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    -               reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_SHL          reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_SHR          reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_SHRR         reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    <               reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    >               reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_LE           reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_GE           reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    INSTANCEOF      reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_EQ           reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_NE           reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    &               reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    ^               reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    |               reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_LAND         reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    ?               reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_LOR          reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    SEMICOLON       reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    RROUNPAREN      reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    COLON           reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    COMMA           reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    RCURPAREN       reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    RSQPAREN        reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    =               reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_MUL         reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_DIV         reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_MOD         reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_ADD         reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_SUB         reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_SHL         reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_SHR         reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_SHRR        reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_AND         reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_XOR         reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_OR          reduce using rule 216 (UnaryExpression -> OP_DEC UnaryExpression .)


state 256

    (203) ArrayAllocationExpression -> NEW TypeName . DimExprs Dims
    (204) ArrayAllocationExpression -> NEW TypeName . DimExprs
    (205) ArrayAllocationExpression -> NEW TypeName . Dims
    (201) ClassAllocationExpression -> NEW TypeName . LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> NEW TypeName . LROUNPAREN RROUNPAREN
    (206) DimExprs -> . DimExpr
    (207) DimExprs -> . DimExprs DimExpr
    (209) Dims -> . OP_DIM
    (210) Dims -> . Dims OP_DIM
    (208) DimExpr -> . LSQPAREN Expression RSQPAREN
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LROUNPAREN      shift and go to state 364
    LSQPAREN        shift and go to state 361

    Dims                           shift and go to state 362
    DimExpr                        shift and go to state 363
    DimExprs                       shift and go to state 360
    OP_DIM                         shift and go to state 100

state 257

    (117) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators . SEMICOLON
    (76) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMICOLON       shift and go to state 365
    COMMA           shift and go to state 195


state 258

    (77) VariableDeclarator -> DeclaratorName .
    (78) VariableDeclarator -> DeclaratorName . = VariableInitializer
    (97) DeclaratorName -> DeclaratorName . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    SEMICOLON       reduce using rule 77 (VariableDeclarator -> DeclaratorName .)
    COMMA           reduce using rule 77 (VariableDeclarator -> DeclaratorName .)
    =               shift and go to state 197
    LSQPAREN        shift and go to state 99

    OP_DIM                         shift and go to state 196

state 259

    (129) LabelStatement -> CASE ConstantExpression . COLON

    COLON           shift and go to state 366


state 260

    (279) ConstantExpression -> ConditionalExpression .

    COLON           reduce using rule 279 (ConstantExpression -> ConditionalExpression .)


state 261

    (134) SelectionStatement -> SWITCH LROUNPAREN . Expression RROUNPAREN Block
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 367
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 262

    (261) ConditionalOrExpression -> ConditionalOrExpression OP_LOR . ConditionalAndExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ShiftExpression                shift and go to state 170
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    UnaryExpression                shift and go to state 227
    InclusiveOrExpression          shift and go to state 160
    FieldAccess                    shift and go to state 176
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 368
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 263

    (263) ConditionalExpression -> ConditionalOrExpression ? . Expression COLON ConditionalExpression
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 369
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 264

    (128) LabelStatement -> IDENTIFIER COLON .

    RCURPAREN       reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    FINAL           reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    SEMICOLON       reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    IDENTIFIER      reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    CASE            reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    DEFAULT         reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    IF              reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    SWITCH          reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    WHILE           reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    DO              reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    FOR             reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    BREAK           reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    CONTINUE        reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    RETURN          reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    THROW           reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    SYNCHRONIZED    reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    TRY             reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    LCURPAREN       reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    BOOLEAN         reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    CHAR            reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    BYTE            reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    SHORT           reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    INT             reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    LONG            reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    FLOAT           reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    DOUBLE          reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    VOID            reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    OP_INC          reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    OP_DEC          reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    +               reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    -               reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    ~               reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    !               reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    THIS            reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    SUPER           reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    NULL            reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    LROUNPAREN      reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    LITERAL         reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    BOOLEAN_CONST   reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    NEW             reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)
    ELSE            reduce using rule 128 (LabelStatement -> IDENTIFIER COLON .)


state 265

    (237) AdditiveExpression -> AdditiveExpression + . MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    ClassAllocationExpression      shift and go to state 141
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 370
    QualifiedName                  shift and go to state 223
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    ArrayAllocationExpression      shift and go to state 131
    MethodCall                     shift and go to state 121
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 227
    PrimaryExpression              shift and go to state 148
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 266

    (238) AdditiveExpression -> AdditiveExpression - . MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    ClassAllocationExpression      shift and go to state 141
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 371
    QualifiedName                  shift and go to state 223
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    ArrayAllocationExpression      shift and go to state 131
    MethodCall                     shift and go to state 121
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 227
    PrimaryExpression              shift and go to state 148
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 267

    (268) AssignmentOperator -> ASS_DIV .

    OP_INC          reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    OP_DEC          reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    +               reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    -               reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    ~               reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    !               reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    IDENTIFIER      reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    THIS            reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    SUPER           reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    NULL            reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    LROUNPAREN      reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    LITERAL         reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    BOOLEAN_CONST   reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    NEW             reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    BOOLEAN         reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    CHAR            reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    BYTE            reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    SHORT           reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    INT             reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    LONG            reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    FLOAT           reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    DOUBLE          reduce using rule 268 (AssignmentOperator -> ASS_DIV .)
    VOID            reduce using rule 268 (AssignmentOperator -> ASS_DIV .)


state 268

    (267) AssignmentOperator -> ASS_MUL .

    OP_INC          reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    OP_DEC          reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    +               reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    -               reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    ~               reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    !               reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    IDENTIFIER      reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    THIS            reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    SUPER           reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    NULL            reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    LROUNPAREN      reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    LITERAL         reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    BOOLEAN_CONST   reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    NEW             reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    BOOLEAN         reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    CHAR            reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    BYTE            reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    SHORT           reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    INT             reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    LONG            reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    FLOAT           reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    DOUBLE          reduce using rule 267 (AssignmentOperator -> ASS_MUL .)
    VOID            reduce using rule 267 (AssignmentOperator -> ASS_MUL .)


state 269

    (269) AssignmentOperator -> ASS_MOD .

    OP_INC          reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    OP_DEC          reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    +               reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    -               reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    ~               reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    !               reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    IDENTIFIER      reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    THIS            reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    SUPER           reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    NULL            reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    LROUNPAREN      reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    LITERAL         reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    BOOLEAN_CONST   reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    NEW             reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    BOOLEAN         reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    CHAR            reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    BYTE            reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    SHORT           reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    INT             reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    LONG            reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    FLOAT           reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    DOUBLE          reduce using rule 269 (AssignmentOperator -> ASS_MOD .)
    VOID            reduce using rule 269 (AssignmentOperator -> ASS_MOD .)


state 270

    (277) AssignmentOperator -> ASS_OR .

    OP_INC          reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    OP_DEC          reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    +               reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    -               reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    ~               reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    !               reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    IDENTIFIER      reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    THIS            reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    SUPER           reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    NULL            reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    LROUNPAREN      reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    LITERAL         reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    BOOLEAN_CONST   reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    NEW             reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    BOOLEAN         reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    CHAR            reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    BYTE            reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    SHORT           reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    INT             reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    LONG            reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    FLOAT           reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    DOUBLE          reduce using rule 277 (AssignmentOperator -> ASS_OR .)
    VOID            reduce using rule 277 (AssignmentOperator -> ASS_OR .)


state 271

    (265) AssignmentExpression -> UnaryExpression AssignmentOperator . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 372
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 272

    (276) AssignmentOperator -> ASS_XOR .

    OP_INC          reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    OP_DEC          reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    +               reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    -               reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    ~               reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    !               reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    IDENTIFIER      reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    THIS            reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    SUPER           reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    NULL            reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    LROUNPAREN      reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    LITERAL         reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    BOOLEAN_CONST   reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    NEW             reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    BOOLEAN         reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    CHAR            reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    BYTE            reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    SHORT           reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    INT             reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    LONG            reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    FLOAT           reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    DOUBLE          reduce using rule 276 (AssignmentOperator -> ASS_XOR .)
    VOID            reduce using rule 276 (AssignmentOperator -> ASS_XOR .)


state 273

    (274) AssignmentOperator -> ASS_SHRR .

    OP_INC          reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    OP_DEC          reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    +               reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    -               reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    ~               reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    !               reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    IDENTIFIER      reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    THIS            reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    SUPER           reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    NULL            reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    LROUNPAREN      reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    LITERAL         reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    BOOLEAN_CONST   reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    NEW             reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    BOOLEAN         reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    CHAR            reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    BYTE            reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    SHORT           reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    INT             reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    LONG            reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    FLOAT           reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    DOUBLE          reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)
    VOID            reduce using rule 274 (AssignmentOperator -> ASS_SHRR .)


state 274

    (275) AssignmentOperator -> ASS_AND .

    OP_INC          reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    OP_DEC          reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    +               reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    -               reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    ~               reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    !               reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    IDENTIFIER      reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    THIS            reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    SUPER           reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    NULL            reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    LROUNPAREN      reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    LITERAL         reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    BOOLEAN_CONST   reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    NEW             reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    BOOLEAN         reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    CHAR            reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    BYTE            reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    SHORT           reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    INT             reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    LONG            reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    FLOAT           reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    DOUBLE          reduce using rule 275 (AssignmentOperator -> ASS_AND .)
    VOID            reduce using rule 275 (AssignmentOperator -> ASS_AND .)


state 275

    (271) AssignmentOperator -> ASS_SUB .

    OP_INC          reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    OP_DEC          reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    +               reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    -               reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    ~               reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    !               reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    IDENTIFIER      reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    THIS            reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    SUPER           reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    NULL            reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    LROUNPAREN      reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    LITERAL         reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    BOOLEAN_CONST   reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    NEW             reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    BOOLEAN         reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    CHAR            reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    BYTE            reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    SHORT           reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    INT             reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    LONG            reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    FLOAT           reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    DOUBLE          reduce using rule 271 (AssignmentOperator -> ASS_SUB .)
    VOID            reduce using rule 271 (AssignmentOperator -> ASS_SUB .)


state 276

    (273) AssignmentOperator -> ASS_SHR .

    OP_INC          reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    OP_DEC          reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    +               reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    -               reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    ~               reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    !               reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    IDENTIFIER      reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    THIS            reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    SUPER           reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    NULL            reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    LROUNPAREN      reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    LITERAL         reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    BOOLEAN_CONST   reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    NEW             reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    BOOLEAN         reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    CHAR            reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    BYTE            reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    SHORT           reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    INT             reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    LONG            reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    FLOAT           reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    DOUBLE          reduce using rule 273 (AssignmentOperator -> ASS_SHR .)
    VOID            reduce using rule 273 (AssignmentOperator -> ASS_SHR .)


state 277

    (270) AssignmentOperator -> ASS_ADD .

    OP_INC          reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    OP_DEC          reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    +               reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    -               reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    ~               reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    !               reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    IDENTIFIER      reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    THIS            reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    SUPER           reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    NULL            reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    LROUNPAREN      reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    LITERAL         reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    BOOLEAN_CONST   reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    NEW             reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    BOOLEAN         reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    CHAR            reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    BYTE            reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    SHORT           reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    INT             reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    LONG            reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    FLOAT           reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    DOUBLE          reduce using rule 270 (AssignmentOperator -> ASS_ADD .)
    VOID            reduce using rule 270 (AssignmentOperator -> ASS_ADD .)


state 278

    (272) AssignmentOperator -> ASS_SHL .

    OP_INC          reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    OP_DEC          reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    +               reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    -               reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    ~               reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    !               reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    IDENTIFIER      reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    THIS            reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    SUPER           reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    NULL            reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    LROUNPAREN      reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    LITERAL         reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    BOOLEAN_CONST   reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    NEW             reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    BOOLEAN         reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    CHAR            reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    BYTE            reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    SHORT           reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    INT             reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    LONG            reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    FLOAT           reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    DOUBLE          reduce using rule 272 (AssignmentOperator -> ASS_SHL .)
    VOID            reduce using rule 272 (AssignmentOperator -> ASS_SHL .)


state 279

    (266) AssignmentOperator -> = .

    OP_INC          reduce using rule 266 (AssignmentOperator -> = .)
    OP_DEC          reduce using rule 266 (AssignmentOperator -> = .)
    +               reduce using rule 266 (AssignmentOperator -> = .)
    -               reduce using rule 266 (AssignmentOperator -> = .)
    ~               reduce using rule 266 (AssignmentOperator -> = .)
    !               reduce using rule 266 (AssignmentOperator -> = .)
    IDENTIFIER      reduce using rule 266 (AssignmentOperator -> = .)
    THIS            reduce using rule 266 (AssignmentOperator -> = .)
    SUPER           reduce using rule 266 (AssignmentOperator -> = .)
    NULL            reduce using rule 266 (AssignmentOperator -> = .)
    LROUNPAREN      reduce using rule 266 (AssignmentOperator -> = .)
    LITERAL         reduce using rule 266 (AssignmentOperator -> = .)
    BOOLEAN_CONST   reduce using rule 266 (AssignmentOperator -> = .)
    NEW             reduce using rule 266 (AssignmentOperator -> = .)
    BOOLEAN         reduce using rule 266 (AssignmentOperator -> = .)
    CHAR            reduce using rule 266 (AssignmentOperator -> = .)
    BYTE            reduce using rule 266 (AssignmentOperator -> = .)
    SHORT           reduce using rule 266 (AssignmentOperator -> = .)
    INT             reduce using rule 266 (AssignmentOperator -> = .)
    LONG            reduce using rule 266 (AssignmentOperator -> = .)
    FLOAT           reduce using rule 266 (AssignmentOperator -> = .)
    DOUBLE          reduce using rule 266 (AssignmentOperator -> = .)
    VOID            reduce using rule 266 (AssignmentOperator -> = .)


state 280

    (257) InclusiveOrExpression -> InclusiveOrExpression | . ExclusiveOrExpression
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ShiftExpression                shift and go to state 170
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    ExclusiveOrExpression          shift and go to state 373
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 281

    (147) JumpStatement -> BREAK IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 374


state 282

    (148) JumpStatement -> BREAK SEMICOLON .

    RCURPAREN       reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    FINAL           reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    CASE            reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    IF              reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    DO              reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    FOR             reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    THROW           reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    SYNCHRONIZED    reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    TRY             reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    LCURPAREN       reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    BOOLEAN         reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    BYTE            reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    INT             reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    LONG            reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    VOID            reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    OP_INC          reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    OP_DEC          reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    +               reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    -               reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    ~               reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    !               reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    THIS            reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    SUPER           reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    NULL            reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    LROUNPAREN      reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    LITERAL         reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    NEW             reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 148 (JumpStatement -> BREAK SEMICOLON .)


state 283

    (136) IterationStatement -> DO Statement . WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON

    WHILE           shift and go to state 375


state 284

    (176) ArrayAccess -> QualifiedName LSQPAREN . Expression RSQPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    QualifiedName                  shift and go to state 223
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    LogicalUnaryOperator           shift and go to state 173
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 376
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 285

    (37) QualifiedName -> QualifiedName DOT . IDENTIFIER
    (194) NewAllocationExpression -> QualifiedName DOT . PlainNewAllocationExpression
    (180) FieldAccess -> QualifiedName DOT . THIS
    (181) FieldAccess -> QualifiedName DOT . CLASS
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN

    IDENTIFIER      shift and go to state 84
    THIS            shift and go to state 377
    CLASS           shift and go to state 379
    NEW             shift and go to state 146

    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 378

state 286

    (240) ShiftExpression -> ShiftExpression OP_SHL . AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    QualifiedName                  shift and go to state 223
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    ArrayAllocationExpression      shift and go to state 131
    MethodCall                     shift and go to state 121
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 380
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 287

    (242) ShiftExpression -> ShiftExpression OP_SHRR . AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    QualifiedName                  shift and go to state 223
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    ArrayAllocationExpression      shift and go to state 131
    MethodCall                     shift and go to state 121
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 381
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 288

    (241) ShiftExpression -> ShiftExpression OP_SHR . AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    QualifiedName                  shift and go to state 223
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    ArrayAllocationExpression      shift and go to state 131
    MethodCall                     shift and go to state 121
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 382
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 289

    (111) Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .

    SEMICOLON       reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    RCURPAREN       reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    STATIC          reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    IDENTIFIER      reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    LCURPAREN       reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    ABSTRACT        reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    FINAL           reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    PUBLIC          reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    PROTECTED       reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    PRIVATE         reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    TRANSIENT       reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    VOLATILE        reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    NATIVE          reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    SYNCHRONIZED    reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    CLASS           reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    INTERFACE       reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    BOOLEAN         reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    CHAR            reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    BYTE            reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    SHORT           reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    INT             reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    LONG            reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    FLOAT           reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    DOUBLE          reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    VOID            reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    CASE            reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    DEFAULT         reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    IF              reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    SWITCH          reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    WHILE           reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    DO              reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    FOR             reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    BREAK           reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    CONTINUE        reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    RETURN          reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    THROW           reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    TRY             reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    OP_INC          reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    OP_DEC          reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    +               reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    -               reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    ~               reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    !               reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    THIS            reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    SUPER           reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    NULL            reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    LROUNPAREN      reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    LITERAL         reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    BOOLEAN_CONST   reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    NEW             reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    ELSE            reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    FINALLY         reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    CATCH           reduce using rule 111 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)


state 290

    (114) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .

    RCURPAREN       reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FINAL           reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SEMICOLON       reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SWITCH          reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THROW           reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SYNCHRONIZED    reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    TRY             reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LCURPAREN       reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    OP_INC          reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    OP_DEC          reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    +               reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    -               reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    !               reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LROUNPAREN      reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LITERAL         reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOLEAN_CONST   reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 114 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)


state 291

    (178) FieldAccess -> NotJustName DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 383


state 292

    (220) LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .

    =               reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_MUL         reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_DIV         reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_MOD         reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_ADD         reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_SUB         reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_SHL         reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_SHR         reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_SHRR        reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_AND         reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_XOR         reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_OR          reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    *               reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    /               reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    %               reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    +               reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    -               reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_SHL          reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_SHR          reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_SHRR         reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    <               reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    >               reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LE           reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_GE           reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    INSTANCEOF      reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_EQ           reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_NE           reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    &               reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ^               reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    |               reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LAND         reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ?               reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LOR          reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    RROUNPAREN      reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    SEMICOLON       reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    COLON           reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    COMMA           reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    RCURPAREN       reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    RSQPAREN        reduce using rule 220 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)


state 293

    (132) SelectionStatement -> IF LROUNPAREN . Expression RROUNPAREN Statement
    (133) SelectionStatement -> IF LROUNPAREN . Expression RROUNPAREN Statement ELSE Statement
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 384
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 294

    (153) JumpStatement -> THROW Expression . SEMICOLON

    SEMICOLON       shift and go to state 385


state 295

    (98) Throws -> THROWS ClassNameList .
    (8) ClassNameList -> ClassNameList . COMMA QualifiedName

    SEMICOLON       reduce using rule 98 (Throws -> THROWS ClassNameList .)
    LCURPAREN       reduce using rule 98 (Throws -> THROWS ClassNameList .)
    COMMA           shift and go to state 189


state 296

    (103) ConstructorDeclaration -> ConstructorDeclarator Throws Block .

    SEMICOLON       reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    RCURPAREN       reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    STATIC          reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    IDENTIFIER      reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    LCURPAREN       reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    ABSTRACT        reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    FINAL           reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    PUBLIC          reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    PROTECTED       reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    PRIVATE         reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    TRANSIENT       reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    VOLATILE        reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    NATIVE          reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    SYNCHRONIZED    reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    CLASS           reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    INTERFACE       reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    BOOLEAN         reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    CHAR            reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    BYTE            reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    SHORT           reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    INT             reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    LONG            reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    FLOAT           reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    DOUBLE          reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    VOID            reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)


state 297

    (8) ClassNameList -> ClassNameList COMMA QualifiedName .
    (37) QualifiedName -> QualifiedName . DOT IDENTIFIER

    COMMA           reduce using rule 8 (ClassNameList -> ClassNameList COMMA QualifiedName .)
    LCURPAREN       reduce using rule 8 (ClassNameList -> ClassNameList COMMA QualifiedName .)
    SEMICOLON       reduce using rule 8 (ClassNameList -> ClassNameList COMMA QualifiedName .)
    DOT             shift and go to state 46


state 298

    (86) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .

    SEMICOLON       reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    RCURPAREN       reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    LCURPAREN       reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    ABSTRACT        reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    FINAL           reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PROTECTED       reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    TRANSIENT       reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    VOLATILE        reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    NATIVE          reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    SYNCHRONIZED    reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INTERFACE       reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 86 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)


state 299

    (85) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws . MethodBody
    (99) MethodBody -> . Block
    (100) MethodBody -> . SEMICOLON
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN

    SEMICOLON       shift and go to state 200
    LCURPAREN       shift and go to state 69

    MethodBody                     shift and go to state 386
    Block                          shift and go to state 201

state 300

    (101) ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .

    SEMICOLON       reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    RCURPAREN       reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    STATIC          reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    IDENTIFIER      reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    LCURPAREN       reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    ABSTRACT        reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    FINAL           reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    PUBLIC          reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    PROTECTED       reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    PRIVATE         reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    TRANSIENT       reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    VOLATILE        reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    NATIVE          reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    SYNCHRONIZED    reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    CLASS           reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    INTERFACE       reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    BOOLEAN         reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    CHAR            reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    BYTE            reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    SHORT           reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    INT             reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    LONG            reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    FLOAT           reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    DOUBLE          reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    VOID            reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)


state 301

    (76) VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .

    SEMICOLON       reduce using rule 76 (VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .)
    COMMA           reduce using rule 76 (VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .)


state 302

    (80) VariableInitializer -> LCURPAREN . RCURPAREN
    (81) VariableInitializer -> LCURPAREN . ArrayInitializers RCURPAREN
    (82) ArrayInitializers -> . VariableInitializer
    (83) ArrayInitializers -> . ArrayInitializers COMMA VariableInitializer
    (84) ArrayInitializers -> . ArrayInitializers COMMA
    (79) VariableInitializer -> . Expression
    (80) VariableInitializer -> . LCURPAREN RCURPAREN
    (81) VariableInitializer -> . LCURPAREN ArrayInitializers RCURPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    RCURPAREN       shift and go to state 388
    LCURPAREN       shift and go to state 302
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    VariableInitializer            shift and go to state 345
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    ArrayInitializers              shift and go to state 387
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 304
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 303

    (78) VariableDeclarator -> DeclaratorName = VariableInitializer .

    SEMICOLON       reduce using rule 78 (VariableDeclarator -> DeclaratorName = VariableInitializer .)
    COMMA           reduce using rule 78 (VariableDeclarator -> DeclaratorName = VariableInitializer .)


state 304

    (79) VariableInitializer -> Expression .

    COMMA           reduce using rule 79 (VariableInitializer -> Expression .)
    SEMICOLON       reduce using rule 79 (VariableInitializer -> Expression .)
    RCURPAREN       reduce using rule 79 (VariableInitializer -> Expression .)


state 305

    (90) MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN .

    THROWS          reduce using rule 90 (MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN .)
    SEMICOLON       reduce using rule 90 (MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN .)
    LSQPAREN        reduce using rule 90 (MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN .)
    LCURPAREN       reduce using rule 90 (MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN .)


state 306

    (89) MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList . RROUNPAREN
    (93) ParameterList -> ParameterList . COMMA Parameter

    RROUNPAREN      shift and go to state 389
    COMMA           shift and go to state 311


state 307

    (87) MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .

    SEMICOLON       reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    RCURPAREN       reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    STATIC          reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    IDENTIFIER      reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    LCURPAREN       reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    ABSTRACT        reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    FINAL           reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    PUBLIC          reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    PROTECTED       reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    PRIVATE         reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    TRANSIENT       reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    VOLATILE        reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    NATIVE          reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    SYNCHRONIZED    reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    CLASS           reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    INTERFACE       reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    BOOLEAN         reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    CHAR            reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    BYTE            reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    SHORT           reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    INT             reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    LONG            reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    FLOAT           reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    DOUBLE          reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    VOID            reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)


state 308

    (95) Parameter -> FINAL TypeSpecifier . DeclaratorName
    (96) DeclaratorName -> . IDENTIFIER
    (97) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 97

    DeclaratorName                 shift and go to state 390

state 309

    (94) Parameter -> TypeSpecifier DeclaratorName .
    (97) DeclaratorName -> DeclaratorName . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    RROUNPAREN      reduce using rule 94 (Parameter -> TypeSpecifier DeclaratorName .)
    COMMA           reduce using rule 94 (Parameter -> TypeSpecifier DeclaratorName .)
    LSQPAREN        shift and go to state 99

    OP_DIM                         shift and go to state 196

state 310

    (105) ConstructorDeclarator -> IDENTIFIER LROUNPAREN ParameterList RROUNPAREN .

    THROWS          reduce using rule 105 (ConstructorDeclarator -> IDENTIFIER LROUNPAREN ParameterList RROUNPAREN .)
    LCURPAREN       reduce using rule 105 (ConstructorDeclarator -> IDENTIFIER LROUNPAREN ParameterList RROUNPAREN .)


state 311

    (93) ParameterList -> ParameterList COMMA . Parameter
    (94) Parameter -> . TypeSpecifier DeclaratorName
    (95) Parameter -> . FINAL TypeSpecifier DeclaratorName
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    FINAL           shift and go to state 208
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    IDENTIFIER      shift and go to state 32

    QualifiedName                  shift and go to state 64
    PrimitiveType                  shift and go to state 56
    TypeName                       shift and go to state 65
    Parameter                      shift and go to state 391
    TypeSpecifier                  shift and go to state 209

state 312

    (182) FieldAccess -> PrimitiveType DOT CLASS .

    LSQPAREN        reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    DOT             reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_INC          reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_DEC          reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    *               reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    /               reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    %               reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    +               reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    -               reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_SHL          reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_SHR          reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_SHRR         reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    <               reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    >               reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_LE           reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_GE           reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    INSTANCEOF      reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_EQ           reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_NE           reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    &               reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    ^               reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    |               reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_LAND         reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    ?               reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_LOR          reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    SEMICOLON       reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    RROUNPAREN      reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    COLON           reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    COMMA           reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    RCURPAREN       reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    RSQPAREN        reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    LROUNPAREN      reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    =               reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_MUL         reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_DIV         reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_MOD         reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_ADD         reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_SUB         reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_SHL         reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_SHR         reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_SHRR        reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_AND         reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_XOR         reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_OR          reduce using rule 182 (FieldAccess -> PrimitiveType DOT CLASS .)


state 313

    (253) AndExpression -> AndExpression & EqualityExpression .
    (250) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (251) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    ^               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    |               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LAND         reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    ?               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LOR          reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    SEMICOLON       reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    RSQPAREN        reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    RCURPAREN       reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    COMMA           reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    RROUNPAREN      reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    COLON           reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    OP_EQ           shift and go to state 231
    OP_NE           shift and go to state 230


state 314

    (259) ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .
    (257) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    ?               reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    OP_LOR          reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    RROUNPAREN      reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    SEMICOLON       reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    COMMA           reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    RCURPAREN       reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    RSQPAREN        reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    COLON           reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    |               shift and go to state 280


state 315

    (230) PrimitiveTypeExpression -> PrimitiveType Dims .
    (210) Dims -> Dims . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    RROUNPAREN      reduce using rule 230 (PrimitiveTypeExpression -> PrimitiveType Dims .)
    LSQPAREN        shift and go to state 99

    OP_DIM                         shift and go to state 205

state 316

    (227) CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN . CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    CastExpression                 shift and go to state 392
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    ClassAllocationExpression      shift and go to state 141
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    QualifiedName                  shift and go to state 223
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    ArrayAllocationExpression      shift and go to state 131
    MethodCall                     shift and go to state 121
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 317

    (169) ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .
    (228) CastExpression -> LROUNPAREN Expression RROUNPAREN . LogicalUnaryExpression
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LSQPAREN        reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    DOT             reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_INC          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_DEC          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    =               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_MUL         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_DIV         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_MOD         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_ADD         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SUB         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SHL         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SHR         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SHRR        reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_AND         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_XOR         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_OR          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    *               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    /               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    %               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    +               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    -               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHL          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHR          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHRR         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    <               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    >               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LE           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_GE           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    INSTANCEOF      reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_EQ           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_NE           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    &               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ^               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    |               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LAND         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ?               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LOR          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    SEMICOLON       reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    RROUNPAREN      reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    COMMA           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    RCURPAREN       reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    RSQPAREN        reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    COLON           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 237
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    MethodCall                     shift and go to state 121
    ClassAllocationExpression      shift and go to state 141
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    ArrayAccess                    shift and go to state 129
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 393
    ArrayAllocationExpression      shift and go to state 131
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 318

    (226) CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN . CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 394
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    ClassAllocationExpression      shift and go to state 141
    QualifiedName                  shift and go to state 223
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    ArrayAllocationExpression      shift and go to state 131
    MethodCall                     shift and go to state 121
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 227
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 319

    (176) ArrayAccess -> QualifiedName LSQPAREN . Expression RSQPAREN
    (2) OP_DIM -> LSQPAREN . RSQPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    RSQPAREN        shift and go to state 204
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    QualifiedName                  shift and go to state 223
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    LogicalUnaryOperator           shift and go to state 173
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 376
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 320

    (231) ClassTypeExpression -> QualifiedName Dims .
    (210) Dims -> Dims . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    RROUNPAREN      reduce using rule 231 (ClassTypeExpression -> QualifiedName Dims .)
    LSQPAREN        shift and go to state 99

    OP_DIM                         shift and go to state 205

state 321

    (151) JumpStatement -> RETURN Expression SEMICOLON .

    RCURPAREN       reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    FINAL           reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    SEMICOLON       reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    CASE            reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    DEFAULT         reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    IF              reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    SWITCH          reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    WHILE           reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    DO              reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    FOR             reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    BREAK           reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    CONTINUE        reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    RETURN          reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    THROW           reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    SYNCHRONIZED    reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    TRY             reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    LCURPAREN       reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    BOOLEAN         reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    CHAR            reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    BYTE            reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    SHORT           reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    INT             reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    LONG            reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    FLOAT           reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    DOUBLE          reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    VOID            reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    OP_INC          reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    OP_DEC          reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    +               reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    -               reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    ~               reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    !               reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    THIS            reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    SUPER           reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    NULL            reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    LROUNPAREN      reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    LITERAL         reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    NEW             reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)
    ELSE            reduce using rule 151 (JumpStatement -> RETURN Expression SEMICOLON .)


state 322

    (154) GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression . RROUNPAREN Statement

    RROUNPAREN      shift and go to state 395


state 323

    (179) FieldAccess -> RealPostfixExpression DOT IDENTIFIER .

    LSQPAREN        reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    DOT             reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_INC          reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_DEC          reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    *               reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    /               reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    %               reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    +               reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    -               reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_SHL          reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_SHR          reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_SHRR         reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    <               reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    >               reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_LE           reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_GE           reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    INSTANCEOF      reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_EQ           reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_NE           reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    &               reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ^               reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    |               reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_LAND         reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ?               reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_LOR          reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    RROUNPAREN      reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    COLON           reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    COMMA           reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    RCURPAREN       reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    RSQPAREN        reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    LROUNPAREN      reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    =               reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_MUL         reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_DIV         reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_MOD         reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_ADD         reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_SUB         reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_SHL         reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_SHR         reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_SHRR        reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_AND         reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_XOR         reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_OR          reduce using rule 179 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)


state 324

    (228) CastExpression -> LROUNPAREN Expression . RROUNPAREN LogicalUnaryExpression
    (169) ComplexPrimary -> LROUNPAREN Expression . RROUNPAREN

    RROUNPAREN      shift and go to state 396


state 325

    (118) LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators . SEMICOLON
    (76) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMICOLON       shift and go to state 397
    COMMA           shift and go to state 195


state 326

    (251) EqualityExpression -> EqualityExpression OP_NE RelationalExpression .
    (244) RelationalExpression -> RelationalExpression . < ShiftExpression
    (245) RelationalExpression -> RelationalExpression . > ShiftExpression
    (246) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (247) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression
    (248) RelationalExpression -> RelationalExpression . INSTANCEOF TypeSpecifier

    OP_EQ           reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_NE           reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    &               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ^               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    |               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LAND         reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ?               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LOR          reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    SEMICOLON       reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    COMMA           reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    RSQPAREN        reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    RROUNPAREN      reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    COLON           reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    RCURPAREN       reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    <               shift and go to state 245
    >               shift and go to state 248
    OP_LE           shift and go to state 246
    OP_GE           shift and go to state 247
    INSTANCEOF      shift and go to state 244


state 327

    (250) EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .
    (244) RelationalExpression -> RelationalExpression . < ShiftExpression
    (245) RelationalExpression -> RelationalExpression . > ShiftExpression
    (246) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (247) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression
    (248) RelationalExpression -> RelationalExpression . INSTANCEOF TypeSpecifier

    OP_EQ           reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_NE           reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    &               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ^               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    |               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LAND         reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ?               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LOR          reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    SEMICOLON       reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    COMMA           reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    RSQPAREN        reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    RROUNPAREN      reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    COLON           reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    RCURPAREN       reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    <               shift and go to state 245
    >               shift and go to state 248
    OP_LE           shift and go to state 246
    OP_GE           shift and go to state 247
    INSTANCEOF      shift and go to state 244


state 328

    (233) MultiplicativeExpression -> MultiplicativeExpression * CastExpression .

    *               reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    /               reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    %               reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    +               reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    -               reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_SHL          reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_SHR          reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_SHRR         reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    <               reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    >               reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LE           reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_GE           reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    INSTANCEOF      reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_EQ           reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_NE           reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    &               reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ^               reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    |               reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LAND         reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ?               reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LOR          reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    RROUNPAREN      reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    SEMICOLON       reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    COLON           reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    COMMA           reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    RCURPAREN       reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    RSQPAREN        reduce using rule 233 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)


state 329

    (235) MultiplicativeExpression -> MultiplicativeExpression % CastExpression .

    *               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    /               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    %               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    +               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    -               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_SHL          reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_SHR          reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_SHRR         reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    <               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    >               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LE           reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_GE           reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    INSTANCEOF      reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_EQ           reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_NE           reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    &               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ^               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    |               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LAND         reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ?               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LOR          reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    RROUNPAREN      reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    SEMICOLON       reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    COLON           reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    COMMA           reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    RCURPAREN       reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    RSQPAREN        reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)


state 330

    (234) MultiplicativeExpression -> MultiplicativeExpression / CastExpression .

    *               reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    /               reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    %               reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    +               reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    -               reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_SHL          reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_SHR          reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_SHRR         reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    <               reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    >               reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LE           reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_GE           reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    INSTANCEOF      reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_EQ           reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_NE           reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    &               reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ^               reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    |               reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LAND         reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ?               reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LOR          reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    RROUNPAREN      reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    SEMICOLON       reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    COLON           reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    COMMA           reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    RCURPAREN       reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    RSQPAREN        reduce using rule 234 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)


state 331

    (145) ExpressionStatements -> ExpressionStatement .

    SEMICOLON       reduce using rule 145 (ExpressionStatements -> ExpressionStatement .)
    COMMA           reduce using rule 145 (ExpressionStatements -> ExpressionStatement .)
    RROUNPAREN      reduce using rule 145 (ExpressionStatements -> ExpressionStatement .)


state 332

    (137) IterationStatement -> FOR LROUNPAREN ForInit . ForExpr ForIncr RROUNPAREN Statement
    (138) IterationStatement -> FOR LROUNPAREN ForInit . ForExpr RROUNPAREN Statement
    (142) ForExpr -> . Expression SEMICOLON
    (143) ForExpr -> . SEMICOLON
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    SEMICOLON       shift and go to state 399
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ForExpr                        shift and go to state 398
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 159
    Expression                     shift and go to state 400
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 333

    (141) ForInit -> SEMICOLON .

    SEMICOLON       reduce using rule 141 (ForInit -> SEMICOLON .)
    OP_INC          reduce using rule 141 (ForInit -> SEMICOLON .)
    OP_DEC          reduce using rule 141 (ForInit -> SEMICOLON .)
    +               reduce using rule 141 (ForInit -> SEMICOLON .)
    -               reduce using rule 141 (ForInit -> SEMICOLON .)
    ~               reduce using rule 141 (ForInit -> SEMICOLON .)
    !               reduce using rule 141 (ForInit -> SEMICOLON .)
    IDENTIFIER      reduce using rule 141 (ForInit -> SEMICOLON .)
    THIS            reduce using rule 141 (ForInit -> SEMICOLON .)
    SUPER           reduce using rule 141 (ForInit -> SEMICOLON .)
    NULL            reduce using rule 141 (ForInit -> SEMICOLON .)
    LROUNPAREN      reduce using rule 141 (ForInit -> SEMICOLON .)
    LITERAL         reduce using rule 141 (ForInit -> SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 141 (ForInit -> SEMICOLON .)
    NEW             reduce using rule 141 (ForInit -> SEMICOLON .)
    BOOLEAN         reduce using rule 141 (ForInit -> SEMICOLON .)
    CHAR            reduce using rule 141 (ForInit -> SEMICOLON .)
    BYTE            reduce using rule 141 (ForInit -> SEMICOLON .)
    SHORT           reduce using rule 141 (ForInit -> SEMICOLON .)
    INT             reduce using rule 141 (ForInit -> SEMICOLON .)
    LONG            reduce using rule 141 (ForInit -> SEMICOLON .)
    FLOAT           reduce using rule 141 (ForInit -> SEMICOLON .)
    DOUBLE          reduce using rule 141 (ForInit -> SEMICOLON .)
    VOID            reduce using rule 141 (ForInit -> SEMICOLON .)


state 334

    (139) ForInit -> ExpressionStatements . SEMICOLON
    (146) ExpressionStatements -> ExpressionStatements . COMMA ExpressionStatement

    SEMICOLON       shift and go to state 402
    COMMA           shift and go to state 401


state 335

    (140) ForInit -> LocalVariableDeclarationStatement .

    SEMICOLON       reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    OP_INC          reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    OP_DEC          reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    +               reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    -               reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    !               reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    LROUNPAREN      reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    LITERAL         reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    BOOLEAN_CONST   reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)


state 336

    (169) ComplexPrimary -> LROUNPAREN Expression . RROUNPAREN

    RROUNPAREN      shift and go to state 403


state 337

    (156) GuardingStatement -> TRY Block Catches .
    (157) GuardingStatement -> TRY Block Catches . Finally
    (159) Catches -> Catches . Catch
    (163) Finally -> . FINALLY Block
    (160) Catch -> . CatchHeader Block
    (161) CatchHeader -> . CATCH LROUNPAREN TypeSpecifier IDENTIFIER RROUNPAREN
    (162) CatchHeader -> . CATCH LROUNPAREN TypeSpecifier RROUNPAREN

    RCURPAREN       reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    FINAL           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    SEMICOLON       reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    IDENTIFIER      reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    CASE            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    DEFAULT         reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    IF              reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    SWITCH          reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    WHILE           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    DO              reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    FOR             reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    BREAK           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    CONTINUE        reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    RETURN          reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    THROW           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    SYNCHRONIZED    reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    TRY             reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    LCURPAREN       reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    BOOLEAN         reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    CHAR            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    BYTE            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    SHORT           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    INT             reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    LONG            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    FLOAT           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    DOUBLE          reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    VOID            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    OP_INC          reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    OP_DEC          reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    +               reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    -               reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    ~               reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    !               reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    THIS            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    SUPER           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    NULL            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    LROUNPAREN      reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    LITERAL         reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    BOOLEAN_CONST   reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    NEW             reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    ELSE            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    FINALLY         shift and go to state 338
    CATCH           shift and go to state 339

    CatchHeader                    shift and go to state 340
    Finally                        shift and go to state 404
    Catch                          shift and go to state 405

state 338

    (163) Finally -> FINALLY . Block
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN

    LCURPAREN       shift and go to state 69

    Block                          shift and go to state 406

state 339

    (161) CatchHeader -> CATCH . LROUNPAREN TypeSpecifier IDENTIFIER RROUNPAREN
    (162) CatchHeader -> CATCH . LROUNPAREN TypeSpecifier RROUNPAREN

    LROUNPAREN      shift and go to state 407


state 340

    (160) Catch -> CatchHeader . Block
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN

    LCURPAREN       shift and go to state 69

    Block                          shift and go to state 408

state 341

    (155) GuardingStatement -> TRY Block Finally .

    RCURPAREN       reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    FINAL           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    SEMICOLON       reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    IDENTIFIER      reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    CASE            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    DEFAULT         reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    IF              reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    SWITCH          reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    WHILE           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    DO              reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    FOR             reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    BREAK           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    CONTINUE        reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    RETURN          reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    THROW           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    SYNCHRONIZED    reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    TRY             reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    LCURPAREN       reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    BOOLEAN         reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    CHAR            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    BYTE            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    SHORT           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    INT             reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    LONG            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    FLOAT           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    DOUBLE          reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    VOID            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    OP_INC          reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    OP_DEC          reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    +               reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    -               reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    ~               reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    !               reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    THIS            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    SUPER           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    NULL            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    LROUNPAREN      reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    LITERAL         reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    BOOLEAN_CONST   reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    NEW             reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    ELSE            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)


state 342

    (158) Catches -> Catch .

    FINALLY         reduce using rule 158 (Catches -> Catch .)
    CATCH           reduce using rule 158 (Catches -> Catch .)
    RCURPAREN       reduce using rule 158 (Catches -> Catch .)
    FINAL           reduce using rule 158 (Catches -> Catch .)
    SEMICOLON       reduce using rule 158 (Catches -> Catch .)
    IDENTIFIER      reduce using rule 158 (Catches -> Catch .)
    CASE            reduce using rule 158 (Catches -> Catch .)
    DEFAULT         reduce using rule 158 (Catches -> Catch .)
    IF              reduce using rule 158 (Catches -> Catch .)
    SWITCH          reduce using rule 158 (Catches -> Catch .)
    WHILE           reduce using rule 158 (Catches -> Catch .)
    DO              reduce using rule 158 (Catches -> Catch .)
    FOR             reduce using rule 158 (Catches -> Catch .)
    BREAK           reduce using rule 158 (Catches -> Catch .)
    CONTINUE        reduce using rule 158 (Catches -> Catch .)
    RETURN          reduce using rule 158 (Catches -> Catch .)
    THROW           reduce using rule 158 (Catches -> Catch .)
    SYNCHRONIZED    reduce using rule 158 (Catches -> Catch .)
    TRY             reduce using rule 158 (Catches -> Catch .)
    LCURPAREN       reduce using rule 158 (Catches -> Catch .)
    BOOLEAN         reduce using rule 158 (Catches -> Catch .)
    CHAR            reduce using rule 158 (Catches -> Catch .)
    BYTE            reduce using rule 158 (Catches -> Catch .)
    SHORT           reduce using rule 158 (Catches -> Catch .)
    INT             reduce using rule 158 (Catches -> Catch .)
    LONG            reduce using rule 158 (Catches -> Catch .)
    FLOAT           reduce using rule 158 (Catches -> Catch .)
    DOUBLE          reduce using rule 158 (Catches -> Catch .)
    VOID            reduce using rule 158 (Catches -> Catch .)
    OP_INC          reduce using rule 158 (Catches -> Catch .)
    OP_DEC          reduce using rule 158 (Catches -> Catch .)
    +               reduce using rule 158 (Catches -> Catch .)
    -               reduce using rule 158 (Catches -> Catch .)
    ~               reduce using rule 158 (Catches -> Catch .)
    !               reduce using rule 158 (Catches -> Catch .)
    THIS            reduce using rule 158 (Catches -> Catch .)
    SUPER           reduce using rule 158 (Catches -> Catch .)
    NULL            reduce using rule 158 (Catches -> Catch .)
    LROUNPAREN      reduce using rule 158 (Catches -> Catch .)
    LITERAL         reduce using rule 158 (Catches -> Catch .)
    BOOLEAN_CONST   reduce using rule 158 (Catches -> Catch .)
    NEW             reduce using rule 158 (Catches -> Catch .)
    ELSE            reduce using rule 158 (Catches -> Catch .)


state 343

    (199) PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers . RCURPAREN
    (83) ArrayInitializers -> ArrayInitializers . COMMA VariableInitializer
    (84) ArrayInitializers -> ArrayInitializers . COMMA

    RCURPAREN       shift and go to state 410
    COMMA           shift and go to state 409


state 344

    (197) PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .

    DOT             reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_INC          reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_DEC          reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    =               reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_MUL         reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_DIV         reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_MOD         reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_ADD         reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_SUB         reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_SHL         reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_SHR         reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_SHRR        reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_AND         reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_XOR         reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_OR          reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    *               reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    /               reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    %               reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    +               reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    -               reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHL          reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHR          reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHRR         reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    <               reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    >               reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_LE           reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_GE           reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    INSTANCEOF      reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_EQ           reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_NE           reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    &               reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ^               reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    |               reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_LAND         reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ?               reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_LOR          reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    SEMICOLON       reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    RROUNPAREN      reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    COLON           reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    COMMA           reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    RCURPAREN       reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    RSQPAREN        reduce using rule 197 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)


state 345

    (82) ArrayInitializers -> VariableInitializer .

    RCURPAREN       reduce using rule 82 (ArrayInitializers -> VariableInitializer .)
    COMMA           reduce using rule 82 (ArrayInitializers -> VariableInitializer .)


state 346

    (183) MethodCall -> MethodAccess LROUNPAREN ArgumentList . RROUNPAREN
    (192) ArgumentList -> ArgumentList . COMMA Expression

    RROUNPAREN      shift and go to state 411
    COMMA           shift and go to state 412


state 347

    (184) MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .

    LSQPAREN        reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    DOT             reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_INC          reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_DEC          reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    *               reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    /               reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    %               reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    +               reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    -               reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_SHL          reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_SHR          reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_SHRR         reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    <               reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    >               reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_LE           reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_GE           reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    INSTANCEOF      reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_EQ           reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_NE           reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    &               reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ^               reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    |               reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_LAND         reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ?               reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_LOR          reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    SEMICOLON       reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    RROUNPAREN      reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    COLON           reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    COMMA           reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    RCURPAREN       reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    RSQPAREN        reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    LROUNPAREN      reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    =               reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_MUL         reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_DIV         reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_MOD         reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_ADD         reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_SUB         reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_SHL         reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_SHR         reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_SHRR        reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_AND         reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_XOR         reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_OR          reduce using rule 184 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)


state 348

    (191) ArgumentList -> Expression .

    RROUNPAREN      reduce using rule 191 (ArgumentList -> Expression .)
    COMMA           reduce using rule 191 (ArgumentList -> Expression .)


state 349

    (255) ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .
    (253) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    |               reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LAND         reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ?               reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LOR          reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    RCURPAREN       reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    COMMA           reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    SEMICOLON       reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    RROUNPAREN      reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    COLON           reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    RSQPAREN        reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    &               shift and go to state 213


state 350

    (248) RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .

    <               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    >               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_LE           reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_GE           reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    INSTANCEOF      reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_EQ           reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_NE           reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    &               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    ^               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    |               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_LAND         reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    ?               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_LOR          reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    SEMICOLON       reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    COMMA           reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    RROUNPAREN      reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    COLON           reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    RCURPAREN       reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    RSQPAREN        reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)


state 351

    (244) RelationalExpression -> RelationalExpression < ShiftExpression .
    (240) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (241) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (242) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    <               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    >               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LE           reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_GE           reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    INSTANCEOF      reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_EQ           reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_NE           reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    &               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ^               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    |               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LAND         reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ?               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LOR          reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    SEMICOLON       reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    COMMA           reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    RROUNPAREN      reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    COLON           reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    RCURPAREN       reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    RSQPAREN        reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_SHL          shift and go to state 286
    OP_SHR          shift and go to state 288
    OP_SHRR         shift and go to state 287


state 352

    (246) RelationalExpression -> RelationalExpression OP_LE ShiftExpression .
    (240) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (241) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (242) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    <               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    >               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LE           reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_GE           reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    INSTANCEOF      reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_EQ           reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_NE           reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    &               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ^               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    |               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LAND         reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ?               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LOR          reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    SEMICOLON       reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    COMMA           reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    RROUNPAREN      reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    COLON           reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    RCURPAREN       reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    RSQPAREN        reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_SHL          shift and go to state 286
    OP_SHR          shift and go to state 288
    OP_SHRR         shift and go to state 287


state 353

    (247) RelationalExpression -> RelationalExpression OP_GE ShiftExpression .
    (240) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (241) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (242) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    <               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    >               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LE           reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_GE           reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    INSTANCEOF      reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_EQ           reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_NE           reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    &               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ^               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    |               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LAND         reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ?               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LOR          reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    SEMICOLON       reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    COMMA           reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    RROUNPAREN      reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    COLON           reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    RCURPAREN       reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    RSQPAREN        reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_SHL          shift and go to state 286
    OP_SHR          shift and go to state 288
    OP_SHRR         shift and go to state 287


state 354

    (245) RelationalExpression -> RelationalExpression > ShiftExpression .
    (240) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (241) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (242) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    <               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    >               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LE           reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_GE           reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    INSTANCEOF      reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_EQ           reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_NE           reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    &               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ^               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    |               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LAND         reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ?               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LOR          reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    SEMICOLON       reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    COMMA           reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    RROUNPAREN      reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    COLON           reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    RCURPAREN       reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    RSQPAREN        reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_SHL          shift and go to state 286
    OP_SHR          shift and go to state 288
    OP_SHRR         shift and go to state 287


state 355

    (149) JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .

    RCURPAREN       reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    IF              reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DO              reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    SYNCHRONIZED    reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LCURPAREN       reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    BOOLEAN         reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    BYTE            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    INT             reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    OP_INC          reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    OP_DEC          reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    +               reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    -               reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    ~               reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    !               reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    SUPER           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LROUNPAREN      reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LITERAL         reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER SEMICOLON .)


state 356

    (177) ArrayAccess -> ComplexPrimary LSQPAREN Expression . RSQPAREN

    RSQPAREN        shift and go to state 413


state 357

    (198) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .

    DOT             reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_INC          reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_DEC          reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    =               reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_MUL         reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_DIV         reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_MOD         reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_ADD         reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_SUB         reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_SHL         reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_SHR         reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_SHRR        reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_AND         reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_XOR         reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_OR          reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    *               reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    /               reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    %               reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    +               reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    -               reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHL          reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHR          reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHRR         reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    <               reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    >               reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_LE           reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_GE           reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    INSTANCEOF      reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_EQ           reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_NE           reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    &               reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ^               reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    |               reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_LAND         reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ?               reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_LOR          reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    SEMICOLON       reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    RROUNPAREN      reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    COLON           reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    COMMA           reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    RCURPAREN       reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    RSQPAREN        reduce using rule 198 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)


state 358

    (200) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations . RCURPAREN
    (64) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (65) FieldDeclarationOptSemi -> . FieldDeclaration
    (66) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (67) FieldDeclaration -> . FieldVariableDeclaration SEMICOLON
    (68) FieldDeclaration -> . MethodDeclaration
    (69) FieldDeclaration -> . ConstructorDeclaration
    (70) FieldDeclaration -> . StaticInitializer
    (71) FieldDeclaration -> . NonStaticInitializer
    (72) FieldDeclaration -> . TypeDeclaration
    (73) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (74) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (85) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator Throws MethodBody
    (86) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (87) MethodDeclaration -> . TypeSpecifier MethodDeclarator Throws MethodBody
    (88) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (101) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Throws Block
    (102) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (103) ConstructorDeclaration -> . ConstructorDeclarator Throws Block
    (104) ConstructorDeclaration -> . ConstructorDeclarator Block
    (107) StaticInitializer -> . STATIC Block
    (108) NonStaticInitializer -> . Block
    (38) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (39) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (48) Modifiers -> . Modifier
    (49) Modifiers -> . Modifiers Modifier
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (105) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (106) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (42) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (44) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (45) ClassHeader -> . ClassWord IDENTIFIER Extends
    (46) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (47) ClassHeader -> . ClassWord IDENTIFIER
    (50) Modifier -> . ABSTRACT
    (51) Modifier -> . FINAL
    (52) Modifier -> . PUBLIC
    (53) Modifier -> . PROTECTED
    (54) Modifier -> . PRIVATE
    (55) Modifier -> . STATIC
    (56) Modifier -> . TRANSIENT
    (57) Modifier -> . VOLATILE
    (58) Modifier -> . NATIVE
    (59) Modifier -> . SYNCHRONIZED
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (60) ClassWord -> . CLASS
    (61) ClassWord -> . INTERFACE
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RCURPAREN       shift and go to state 414
    STATIC          shift and go to state 60
    IDENTIFIER      shift and go to state 66
    LCURPAREN       shift and go to state 69
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 22
    PRIVATE         shift and go to state 9
    TRANSIENT       shift and go to state 10
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2
    CLASS           shift and go to state 12
    INTERFACE       shift and go to state 24
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    FieldVariableDeclaration       shift and go to state 54
    TypeDeclaration                shift and go to state 55
    PrimitiveType                  shift and go to state 56
    StaticInitializer              shift and go to state 57
    NonStaticInitializer           shift and go to state 62
    TypeSpecifier                  shift and go to state 63
    QualifiedName                  shift and go to state 64
    TypeName                       shift and go to state 65
    MethodDeclaration              shift and go to state 67
    Modifiers                      shift and go to state 59
    ConstructorDeclaration         shift and go to state 53
    Modifier                       shift and go to state 17
    Block                          shift and go to state 73
    ClassWord                      shift and go to state 19
    FieldDeclarationOptSemi        shift and go to state 182
    ConstructorDeclarator          shift and go to state 75
    ClassHeader                    shift and go to state 23
    FieldDeclaration               shift and go to state 80

state 359

    (135) IterationStatement -> WHILE LROUNPAREN Expression . RROUNPAREN Statement

    RROUNPAREN      shift and go to state 415


state 360

    (203) ArrayAllocationExpression -> NEW TypeName DimExprs . Dims
    (204) ArrayAllocationExpression -> NEW TypeName DimExprs .
    (207) DimExprs -> DimExprs . DimExpr
    (209) Dims -> . OP_DIM
    (210) Dims -> . Dims OP_DIM
    (208) DimExpr -> . LSQPAREN Expression RSQPAREN
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LCURPAREN       reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    DOT             reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_INC          reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_DEC          reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    =               reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_MUL         reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_DIV         reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_MOD         reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_ADD         reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_SUB         reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_SHL         reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_SHR         reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_SHRR        reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_AND         reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_XOR         reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_OR          reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    *               reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    /               reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    %               reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    +               reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    -               reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_SHL          reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_SHR          reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_SHRR         reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    <               reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    >               reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LE           reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_GE           reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    INSTANCEOF      reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_EQ           reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_NE           reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    &               reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ^               reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    |               reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LAND         reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ?               reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LOR          reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    SEMICOLON       reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    RROUNPAREN      reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    COLON           reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    COMMA           reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    RCURPAREN       reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    RSQPAREN        reduce using rule 204 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    LSQPAREN        shift and go to state 361

    DimExpr                        shift and go to state 416
    Dims                           shift and go to state 417
    OP_DIM                         shift and go to state 100

state 361

    (208) DimExpr -> LSQPAREN . Expression RSQPAREN
    (2) OP_DIM -> LSQPAREN . RSQPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    RSQPAREN        shift and go to state 204
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 418
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 362

    (205) ArrayAllocationExpression -> NEW TypeName Dims .
    (210) Dims -> Dims . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LCURPAREN       reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    DOT             reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_INC          reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_DEC          reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    =               reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_MUL         reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_DIV         reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_MOD         reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_ADD         reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_SUB         reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_SHL         reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_SHR         reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_SHRR        reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_AND         reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_XOR         reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_OR          reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    *               reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    /               reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    %               reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    +               reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    -               reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_SHL          reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_SHR          reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_SHRR         reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    <               reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    >               reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LE           reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_GE           reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    INSTANCEOF      reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_EQ           reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_NE           reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    &               reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ^               reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    |               reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LAND         reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ?               reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LOR          reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    SEMICOLON       reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    RROUNPAREN      reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    COLON           reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    COMMA           reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    RCURPAREN       reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    RSQPAREN        reduce using rule 205 (ArrayAllocationExpression -> NEW TypeName Dims .)
    LSQPAREN        shift and go to state 99

    OP_DIM                         shift and go to state 205

state 363

    (206) DimExprs -> DimExpr .

    LSQPAREN        reduce using rule 206 (DimExprs -> DimExpr .)
    LCURPAREN       reduce using rule 206 (DimExprs -> DimExpr .)
    DOT             reduce using rule 206 (DimExprs -> DimExpr .)
    OP_INC          reduce using rule 206 (DimExprs -> DimExpr .)
    OP_DEC          reduce using rule 206 (DimExprs -> DimExpr .)
    =               reduce using rule 206 (DimExprs -> DimExpr .)
    ASS_MUL         reduce using rule 206 (DimExprs -> DimExpr .)
    ASS_DIV         reduce using rule 206 (DimExprs -> DimExpr .)
    ASS_MOD         reduce using rule 206 (DimExprs -> DimExpr .)
    ASS_ADD         reduce using rule 206 (DimExprs -> DimExpr .)
    ASS_SUB         reduce using rule 206 (DimExprs -> DimExpr .)
    ASS_SHL         reduce using rule 206 (DimExprs -> DimExpr .)
    ASS_SHR         reduce using rule 206 (DimExprs -> DimExpr .)
    ASS_SHRR        reduce using rule 206 (DimExprs -> DimExpr .)
    ASS_AND         reduce using rule 206 (DimExprs -> DimExpr .)
    ASS_XOR         reduce using rule 206 (DimExprs -> DimExpr .)
    ASS_OR          reduce using rule 206 (DimExprs -> DimExpr .)
    *               reduce using rule 206 (DimExprs -> DimExpr .)
    /               reduce using rule 206 (DimExprs -> DimExpr .)
    %               reduce using rule 206 (DimExprs -> DimExpr .)
    +               reduce using rule 206 (DimExprs -> DimExpr .)
    -               reduce using rule 206 (DimExprs -> DimExpr .)
    OP_SHL          reduce using rule 206 (DimExprs -> DimExpr .)
    OP_SHR          reduce using rule 206 (DimExprs -> DimExpr .)
    OP_SHRR         reduce using rule 206 (DimExprs -> DimExpr .)
    <               reduce using rule 206 (DimExprs -> DimExpr .)
    >               reduce using rule 206 (DimExprs -> DimExpr .)
    OP_LE           reduce using rule 206 (DimExprs -> DimExpr .)
    OP_GE           reduce using rule 206 (DimExprs -> DimExpr .)
    INSTANCEOF      reduce using rule 206 (DimExprs -> DimExpr .)
    OP_EQ           reduce using rule 206 (DimExprs -> DimExpr .)
    OP_NE           reduce using rule 206 (DimExprs -> DimExpr .)
    &               reduce using rule 206 (DimExprs -> DimExpr .)
    ^               reduce using rule 206 (DimExprs -> DimExpr .)
    |               reduce using rule 206 (DimExprs -> DimExpr .)
    OP_LAND         reduce using rule 206 (DimExprs -> DimExpr .)
    ?               reduce using rule 206 (DimExprs -> DimExpr .)
    OP_LOR          reduce using rule 206 (DimExprs -> DimExpr .)
    SEMICOLON       reduce using rule 206 (DimExprs -> DimExpr .)
    RROUNPAREN      reduce using rule 206 (DimExprs -> DimExpr .)
    COLON           reduce using rule 206 (DimExprs -> DimExpr .)
    COMMA           reduce using rule 206 (DimExprs -> DimExpr .)
    RCURPAREN       reduce using rule 206 (DimExprs -> DimExpr .)
    RSQPAREN        reduce using rule 206 (DimExprs -> DimExpr .)


state 364

    (201) ClassAllocationExpression -> NEW TypeName LROUNPAREN . ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> NEW TypeName LROUNPAREN . RROUNPAREN
    (191) ArgumentList -> . Expression
    (192) ArgumentList -> . ArgumentList COMMA Expression
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    RROUNPAREN      shift and go to state 420
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    ArgumentList                   shift and go to state 419
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 348
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 365

    (117) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .

    SEMICOLON       reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    OP_INC          reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    OP_DEC          reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    +               reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    -               reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    ~               reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    !               reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    IDENTIFIER      reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    THIS            reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    SUPER           reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    NULL            reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    LROUNPAREN      reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    LITERAL         reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    NEW             reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    BOOLEAN         reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    CHAR            reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    BYTE            reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    SHORT           reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    INT             reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    LONG            reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    FLOAT           reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    DOUBLE          reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    VOID            reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    RCURPAREN       reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    FINAL           reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    CASE            reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    DEFAULT         reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    IF              reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    SWITCH          reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    WHILE           reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    DO              reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    FOR             reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    BREAK           reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    CONTINUE        reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    RETURN          reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    THROW           reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    SYNCHRONIZED    reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    TRY             reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    LCURPAREN       reduce using rule 117 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)


state 366

    (129) LabelStatement -> CASE ConstantExpression COLON .

    RCURPAREN       reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    FINAL           reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    SEMICOLON       reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    IDENTIFIER      reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    CASE            reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    DEFAULT         reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    IF              reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    SWITCH          reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    WHILE           reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    DO              reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    FOR             reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    BREAK           reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    CONTINUE        reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    RETURN          reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    THROW           reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    SYNCHRONIZED    reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    TRY             reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    LCURPAREN       reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    BOOLEAN         reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    CHAR            reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    BYTE            reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    SHORT           reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    INT             reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    LONG            reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    FLOAT           reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    DOUBLE          reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    VOID            reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    OP_INC          reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    OP_DEC          reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    +               reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    -               reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    ~               reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    !               reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    THIS            reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    SUPER           reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    NULL            reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    LROUNPAREN      reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    LITERAL         reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    BOOLEAN_CONST   reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    NEW             reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)
    ELSE            reduce using rule 129 (LabelStatement -> CASE ConstantExpression COLON .)


state 367

    (134) SelectionStatement -> SWITCH LROUNPAREN Expression . RROUNPAREN Block

    RROUNPAREN      shift and go to state 421


state 368

    (261) ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .
    (259) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND InclusiveOrExpression

    ?               reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    OP_LOR          reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    COLON           reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    RSQPAREN        reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    SEMICOLON       reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    RROUNPAREN      reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    COMMA           reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    RCURPAREN       reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    OP_LAND         shift and go to state 214


state 369

    (263) ConditionalExpression -> ConditionalOrExpression ? Expression . COLON ConditionalExpression

    COLON           shift and go to state 422


state 370

    (237) AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .
    (233) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (234) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (235) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    -               reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_SHL          reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_SHR          reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_SHRR         reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    <               reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    >               reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LE           reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_GE           reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    INSTANCEOF      reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_EQ           reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_NE           reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    &               reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ^               reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    |               reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LAND         reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ?               reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LOR          reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    SEMICOLON       reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    RROUNPAREN      reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    COLON           reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    COMMA           reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    RCURPAREN       reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    RSQPAREN        reduce using rule 237 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    *               shift and go to state 232
    /               shift and go to state 234
    %               shift and go to state 233


state 371

    (238) AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .
    (233) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (234) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (235) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    -               reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_SHL          reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_SHR          reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_SHRR         reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    <               reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    >               reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LE           reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_GE           reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    INSTANCEOF      reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_EQ           reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_NE           reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    &               reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ^               reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    |               reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LAND         reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ?               reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LOR          reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    SEMICOLON       reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    RROUNPAREN      reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    COLON           reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    COMMA           reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    RCURPAREN       reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    RSQPAREN        reduce using rule 238 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    *               shift and go to state 232
    /               shift and go to state 234
    %               shift and go to state 233


state 372

    (265) AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .

    RSQPAREN        reduce using rule 265 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    SEMICOLON       reduce using rule 265 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    RROUNPAREN      reduce using rule 265 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    COMMA           reduce using rule 265 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    RCURPAREN       reduce using rule 265 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    COLON           reduce using rule 265 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)


state 373

    (257) InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .
    (255) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LAND         reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ?               reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LOR          reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    RSQPAREN        reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    RCURPAREN       reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    COMMA           reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    SEMICOLON       reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    RROUNPAREN      reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    COLON           reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ^               shift and go to state 243


state 374

    (147) JumpStatement -> BREAK IDENTIFIER SEMICOLON .

    RCURPAREN       reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    IF              reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    DO              reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    SYNCHRONIZED    reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    LCURPAREN       reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    BOOLEAN         reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    BYTE            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    INT             reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    OP_INC          reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    OP_DEC          reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    +               reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    -               reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    ~               reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    !               reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    SUPER           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    LROUNPAREN      reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    LITERAL         reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER SEMICOLON .)


state 375

    (136) IterationStatement -> DO Statement WHILE . LROUNPAREN Expression RROUNPAREN SEMICOLON

    LROUNPAREN      shift and go to state 423


state 376

    (176) ArrayAccess -> QualifiedName LSQPAREN Expression . RSQPAREN

    RSQPAREN        shift and go to state 424


state 377

    (180) FieldAccess -> QualifiedName DOT THIS .

    LSQPAREN        reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    DOT             reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    OP_INC          reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    OP_DEC          reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    *               reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    /               reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    %               reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    +               reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    -               reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    OP_SHL          reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    OP_SHR          reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    OP_SHRR         reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    <               reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    >               reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    OP_LE           reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    OP_GE           reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    INSTANCEOF      reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    OP_EQ           reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    OP_NE           reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    &               reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    ^               reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    |               reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    OP_LAND         reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    ?               reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    OP_LOR          reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    SEMICOLON       reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    RROUNPAREN      reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    COLON           reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    COMMA           reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    RCURPAREN       reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    RSQPAREN        reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    LROUNPAREN      reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    =               reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_MUL         reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_DIV         reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_MOD         reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_ADD         reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_SUB         reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_SHL         reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_SHR         reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_SHRR        reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_AND         reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_XOR         reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_OR          reduce using rule 180 (FieldAccess -> QualifiedName DOT THIS .)


state 378

    (194) NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .

    DOT             reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_INC          reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_DEC          reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    *               reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    /               reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    %               reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    +               reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    -               reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_SHL          reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_SHR          reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_SHRR         reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    <               reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    >               reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_LE           reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_GE           reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    INSTANCEOF      reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_NE           reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    &               reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ^               reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    |               reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ?               reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    SEMICOLON       reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    RROUNPAREN      reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    COLON           reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    COMMA           reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    RCURPAREN       reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    RSQPAREN        reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    =               reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_MUL         reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_DIV         reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_MOD         reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_ADD         reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_SUB         reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_SHL         reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_SHR         reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_SHRR        reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_AND         reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_XOR         reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_OR          reduce using rule 194 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)


state 379

    (181) FieldAccess -> QualifiedName DOT CLASS .

    LSQPAREN        reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    DOT             reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_INC          reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_DEC          reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    *               reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    /               reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    %               reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    +               reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    -               reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_SHL          reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_SHR          reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_SHRR         reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    <               reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    >               reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_LE           reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_GE           reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    INSTANCEOF      reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_EQ           reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_NE           reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    &               reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    ^               reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    |               reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_LAND         reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    ?               reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_LOR          reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    SEMICOLON       reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    RROUNPAREN      reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    COLON           reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    COMMA           reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    RCURPAREN       reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    RSQPAREN        reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    LROUNPAREN      reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    =               reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_MUL         reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_DIV         reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_MOD         reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_ADD         reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_SUB         reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_SHL         reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_SHR         reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_SHRR        reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_AND         reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_XOR         reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_OR          reduce using rule 181 (FieldAccess -> QualifiedName DOT CLASS .)


state 380

    (240) ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .
    (237) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (238) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OP_SHL          reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_SHR          reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_SHRR         reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    <               reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    >               reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_LE           reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_GE           reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    INSTANCEOF      reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_EQ           reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_NE           reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    &               reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    ^               reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    |               reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_LAND         reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    ?               reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_LOR          reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    SEMICOLON       reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    RROUNPAREN      reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    COLON           reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    COMMA           reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    RCURPAREN       reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    RSQPAREN        reduce using rule 240 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    +               shift and go to state 265
    -               shift and go to state 266


state 381

    (242) ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .
    (237) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (238) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OP_SHL          reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_SHR          reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_SHRR         reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    <               reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    >               reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_LE           reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_GE           reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    INSTANCEOF      reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_EQ           reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_NE           reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    &               reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    ^               reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    |               reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_LAND         reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    ?               reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_LOR          reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    SEMICOLON       reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    RROUNPAREN      reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    COLON           reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    COMMA           reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    RCURPAREN       reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    RSQPAREN        reduce using rule 242 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    +               shift and go to state 265
    -               shift and go to state 266


state 382

    (241) ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .
    (237) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (238) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OP_SHL          reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_SHR          reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_SHRR         reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    <               reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    >               reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_LE           reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_GE           reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    INSTANCEOF      reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_EQ           reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_NE           reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    &               reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    ^               reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    |               reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_LAND         reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    ?               reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_LOR          reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    SEMICOLON       reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    RROUNPAREN      reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    COLON           reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    COMMA           reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    RCURPAREN       reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    RSQPAREN        reduce using rule 241 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    +               shift and go to state 265
    -               shift and go to state 266


state 383

    (178) FieldAccess -> NotJustName DOT IDENTIFIER .

    LSQPAREN        reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    DOT             reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_INC          reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_DEC          reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    *               reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    /               reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    %               reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    +               reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    -               reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_SHL          reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_SHR          reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_SHRR         reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    <               reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    >               reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_LE           reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_GE           reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    INSTANCEOF      reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_EQ           reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_NE           reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    &               reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ^               reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    |               reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_LAND         reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ?               reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_LOR          reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    RROUNPAREN      reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    COLON           reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    COMMA           reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    RCURPAREN       reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    RSQPAREN        reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    LROUNPAREN      reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    =               reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_MUL         reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_DIV         reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_MOD         reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_ADD         reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_SUB         reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_SHL         reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_SHR         reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_SHRR        reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_AND         reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_XOR         reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_OR          reduce using rule 178 (FieldAccess -> NotJustName DOT IDENTIFIER .)


state 384

    (132) SelectionStatement -> IF LROUNPAREN Expression . RROUNPAREN Statement
    (133) SelectionStatement -> IF LROUNPAREN Expression . RROUNPAREN Statement ELSE Statement

    RROUNPAREN      shift and go to state 425


state 385

    (153) JumpStatement -> THROW Expression SEMICOLON .

    RCURPAREN       reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    FINAL           reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    SEMICOLON       reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    CASE            reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    DEFAULT         reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    IF              reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    SWITCH          reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    WHILE           reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    DO              reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    FOR             reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    BREAK           reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    CONTINUE        reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    RETURN          reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    THROW           reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    SYNCHRONIZED    reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    TRY             reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    LCURPAREN       reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    BOOLEAN         reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    CHAR            reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    BYTE            reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    SHORT           reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    INT             reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    LONG            reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    FLOAT           reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    DOUBLE          reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    VOID            reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    OP_INC          reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    OP_DEC          reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    +               reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    -               reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    ~               reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    !               reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    THIS            reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    SUPER           reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    NULL            reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    LROUNPAREN      reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    LITERAL         reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    NEW             reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)
    ELSE            reduce using rule 153 (JumpStatement -> THROW Expression SEMICOLON .)


state 386

    (85) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .

    SEMICOLON       reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    RCURPAREN       reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    STATIC          reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    IDENTIFIER      reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    LCURPAREN       reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    ABSTRACT        reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    FINAL           reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    PUBLIC          reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    PROTECTED       reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    PRIVATE         reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    TRANSIENT       reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    VOLATILE        reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    NATIVE          reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    SYNCHRONIZED    reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    CLASS           reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    INTERFACE       reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    BOOLEAN         reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    CHAR            reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    BYTE            reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    SHORT           reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    INT             reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    LONG            reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    FLOAT           reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    DOUBLE          reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    VOID            reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)


state 387

    (81) VariableInitializer -> LCURPAREN ArrayInitializers . RCURPAREN
    (83) ArrayInitializers -> ArrayInitializers . COMMA VariableInitializer
    (84) ArrayInitializers -> ArrayInitializers . COMMA

    RCURPAREN       shift and go to state 426
    COMMA           shift and go to state 409


state 388

    (80) VariableInitializer -> LCURPAREN RCURPAREN .

    COMMA           reduce using rule 80 (VariableInitializer -> LCURPAREN RCURPAREN .)
    SEMICOLON       reduce using rule 80 (VariableInitializer -> LCURPAREN RCURPAREN .)
    RCURPAREN       reduce using rule 80 (VariableInitializer -> LCURPAREN RCURPAREN .)


state 389

    (89) MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN .

    THROWS          reduce using rule 89 (MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN .)
    SEMICOLON       reduce using rule 89 (MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN .)
    LSQPAREN        reduce using rule 89 (MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN .)
    LCURPAREN       reduce using rule 89 (MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN .)


state 390

    (95) Parameter -> FINAL TypeSpecifier DeclaratorName .
    (97) DeclaratorName -> DeclaratorName . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    RROUNPAREN      reduce using rule 95 (Parameter -> FINAL TypeSpecifier DeclaratorName .)
    COMMA           reduce using rule 95 (Parameter -> FINAL TypeSpecifier DeclaratorName .)
    LSQPAREN        shift and go to state 99

    OP_DIM                         shift and go to state 196

state 391

    (93) ParameterList -> ParameterList COMMA Parameter .

    RROUNPAREN      reduce using rule 93 (ParameterList -> ParameterList COMMA Parameter .)
    COMMA           reduce using rule 93 (ParameterList -> ParameterList COMMA Parameter .)


state 392

    (227) CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .

    *               reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    /               reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    %               reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    +               reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    -               reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    OP_SHL          reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    OP_SHR          reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    OP_SHRR         reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    <               reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    >               reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    OP_LE           reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    OP_GE           reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    INSTANCEOF      reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    OP_EQ           reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    OP_NE           reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    &               reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    ^               reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    |               reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    OP_LAND         reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    ?               reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    OP_LOR          reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    RROUNPAREN      reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    SEMICOLON       reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    COLON           reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    COMMA           reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    RCURPAREN       reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    RSQPAREN        reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    =               reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    ASS_MUL         reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    ASS_DIV         reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    ASS_MOD         reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    ASS_ADD         reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    ASS_SUB         reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    ASS_SHL         reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    ASS_SHR         reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    ASS_SHRR        reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    ASS_AND         reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    ASS_XOR         reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)
    ASS_OR          reduce using rule 227 (CastExpression -> LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression .)


state 393

    (228) CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .

    *               reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    /               reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    %               reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    +               reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    -               reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    OP_SHL          reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    OP_SHR          reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    OP_SHRR         reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    <               reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    >               reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    OP_LE           reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    OP_GE           reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    INSTANCEOF      reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    OP_EQ           reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    OP_NE           reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    &               reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    ^               reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    |               reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    OP_LAND         reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    ?               reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    OP_LOR          reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    RROUNPAREN      reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    SEMICOLON       reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    COLON           reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    COMMA           reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    RCURPAREN       reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    RSQPAREN        reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    =               reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    ASS_MUL         reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    ASS_DIV         reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    ASS_MOD         reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    ASS_ADD         reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    ASS_SUB         reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    ASS_SHL         reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    ASS_SHR         reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    ASS_SHRR        reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    ASS_AND         reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    ASS_XOR         reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)
    ASS_OR          reduce using rule 228 (CastExpression -> LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression .)


state 394

    (226) CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .

    *               reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    /               reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    %               reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    +               reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    -               reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    OP_SHL          reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    OP_SHR          reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    OP_SHRR         reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    <               reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    >               reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    OP_LE           reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    OP_GE           reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    INSTANCEOF      reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    OP_EQ           reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    OP_NE           reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    &               reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    ^               reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    |               reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    OP_LAND         reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    ?               reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    OP_LOR          reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    RROUNPAREN      reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    SEMICOLON       reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    COLON           reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    COMMA           reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    RCURPAREN       reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    RSQPAREN        reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    =               reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    ASS_MUL         reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    ASS_DIV         reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    ASS_MOD         reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    ASS_ADD         reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    ASS_SUB         reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    ASS_SHL         reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    ASS_SHR         reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    ASS_SHRR        reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    ASS_AND         reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    ASS_XOR         reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)
    ASS_OR          reduce using rule 226 (CastExpression -> LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression .)


state 395

    (154) GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN . Statement
    (119) Statement -> . EmptyStatement
    (120) Statement -> . LabelStatement
    (121) Statement -> . ExpressionStatement SEMICOLON
    (122) Statement -> . SelectionStatement
    (123) Statement -> . IterationStatement
    (124) Statement -> . JumpStatement
    (125) Statement -> . GuardingStatement
    (126) Statement -> . Block
    (127) EmptyStatement -> . SEMICOLON
    (128) LabelStatement -> . IDENTIFIER COLON
    (129) LabelStatement -> . CASE ConstantExpression COLON
    (130) LabelStatement -> . DEFAULT COLON
    (131) ExpressionStatement -> . Expression
    (132) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement
    (133) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement
    (134) SelectionStatement -> . SWITCH LROUNPAREN Expression RROUNPAREN Block
    (135) IterationStatement -> . WHILE LROUNPAREN Expression RROUNPAREN Statement
    (136) IterationStatement -> . DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON
    (137) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement
    (138) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (147) JumpStatement -> . BREAK IDENTIFIER SEMICOLON
    (148) JumpStatement -> . BREAK SEMICOLON
    (149) JumpStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (150) JumpStatement -> . CONTINUE SEMICOLON
    (151) JumpStatement -> . RETURN Expression SEMICOLON
    (152) JumpStatement -> . RETURN SEMICOLON
    (153) JumpStatement -> . THROW Expression SEMICOLON
    (154) GuardingStatement -> . SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    SEMICOLON       shift and go to state 150
    IDENTIFIER      shift and go to state 154
    CASE            shift and go to state 149
    DEFAULT         shift and go to state 142
    IF              shift and go to state 175
    SWITCH          shift and go to state 152
    WHILE           shift and go to state 144
    DO              shift and go to state 163
    FOR             shift and go to state 124
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 137
    RETURN          shift and go to state 112
    THROW           shift and go to state 179
    SYNCHRONIZED    shift and go to state 113
    TRY             shift and go to state 126
    LCURPAREN       shift and go to state 69
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    LabelStatement                 shift and go to state 111
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    ExpressionStatement            shift and go to state 103
    JumpStatement                  shift and go to state 143
    RealPostfixExpression          shift and go to state 114
    Statement                      shift and go to state 427
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    GuardingStatement              shift and go to state 151
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    SelectionStatement             shift and go to state 122
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    ComplexPrimary                 shift and go to state 140
    PrimitiveType                  shift and go to state 220
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 159
    Expression                     shift and go to state 156
    Block                          shift and go to state 130
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    PrimaryExpression              shift and go to state 148
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    EmptyStatement                 shift and go to state 109
    SpecialName                    shift and go to state 139
    IterationStatement             shift and go to state 180

state 396

    (228) CastExpression -> LROUNPAREN Expression RROUNPAREN . LogicalUnaryExpression
    (169) ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LSQPAREN        reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    DOT             reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_INC          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_DEC          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    *               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    /               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    %               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    +               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    -               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHL          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHR          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHRR         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    <               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    >               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LE           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_GE           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    INSTANCEOF      reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_EQ           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_NE           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    &               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ^               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    |               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LAND         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ?               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LOR          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    SEMICOLON       reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    RROUNPAREN      reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    COLON           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    COMMA           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    RCURPAREN       reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    RSQPAREN        reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    =               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_MUL         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_DIV         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_MOD         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_ADD         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SUB         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SHL         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SHR         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SHRR        reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_AND         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_XOR         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_OR          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 237
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    MethodCall                     shift and go to state 121
    ClassAllocationExpression      shift and go to state 141
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    ArrayAccess                    shift and go to state 129
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 393
    ArrayAllocationExpression      shift and go to state 131
    FieldAccess                    shift and go to state 176
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 397

    (118) LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .

    SEMICOLON       reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    OP_INC          reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    OP_DEC          reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    +               reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    -               reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    ~               reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    !               reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    IDENTIFIER      reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    THIS            reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    SUPER           reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    NULL            reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    LROUNPAREN      reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    LITERAL         reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    NEW             reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    BOOLEAN         reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    CHAR            reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    BYTE            reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    SHORT           reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    INT             reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    LONG            reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    FLOAT           reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    DOUBLE          reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    VOID            reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    RCURPAREN       reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    FINAL           reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    CASE            reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    DEFAULT         reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    IF              reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    SWITCH          reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    WHILE           reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    DO              reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    FOR             reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    BREAK           reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    CONTINUE        reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    RETURN          reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    THROW           reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    SYNCHRONIZED    reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    TRY             reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)
    LCURPAREN       reduce using rule 118 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators SEMICOLON .)


state 398

    (137) IterationStatement -> FOR LROUNPAREN ForInit ForExpr . ForIncr RROUNPAREN Statement
    (138) IterationStatement -> FOR LROUNPAREN ForInit ForExpr . RROUNPAREN Statement
    (144) ForIncr -> . ExpressionStatements
    (145) ExpressionStatements -> . ExpressionStatement
    (146) ExpressionStatements -> . ExpressionStatements COMMA ExpressionStatement
    (131) ExpressionStatement -> . Expression
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    RROUNPAREN      shift and go to state 428
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    ExclusiveOrExpression          shift and go to state 134
    ExpressionStatement            shift and go to state 331
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 159
    Expression                     shift and go to state 156
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExpressionStatements           shift and go to state 430
    ConditionalAndExpression       shift and go to state 108
    ForIncr                        shift and go to state 429
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 399

    (143) ForExpr -> SEMICOLON .

    RROUNPAREN      reduce using rule 143 (ForExpr -> SEMICOLON .)
    OP_INC          reduce using rule 143 (ForExpr -> SEMICOLON .)
    OP_DEC          reduce using rule 143 (ForExpr -> SEMICOLON .)
    +               reduce using rule 143 (ForExpr -> SEMICOLON .)
    -               reduce using rule 143 (ForExpr -> SEMICOLON .)
    ~               reduce using rule 143 (ForExpr -> SEMICOLON .)
    !               reduce using rule 143 (ForExpr -> SEMICOLON .)
    IDENTIFIER      reduce using rule 143 (ForExpr -> SEMICOLON .)
    THIS            reduce using rule 143 (ForExpr -> SEMICOLON .)
    SUPER           reduce using rule 143 (ForExpr -> SEMICOLON .)
    NULL            reduce using rule 143 (ForExpr -> SEMICOLON .)
    LROUNPAREN      reduce using rule 143 (ForExpr -> SEMICOLON .)
    LITERAL         reduce using rule 143 (ForExpr -> SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 143 (ForExpr -> SEMICOLON .)
    NEW             reduce using rule 143 (ForExpr -> SEMICOLON .)
    BOOLEAN         reduce using rule 143 (ForExpr -> SEMICOLON .)
    CHAR            reduce using rule 143 (ForExpr -> SEMICOLON .)
    BYTE            reduce using rule 143 (ForExpr -> SEMICOLON .)
    SHORT           reduce using rule 143 (ForExpr -> SEMICOLON .)
    INT             reduce using rule 143 (ForExpr -> SEMICOLON .)
    LONG            reduce using rule 143 (ForExpr -> SEMICOLON .)
    FLOAT           reduce using rule 143 (ForExpr -> SEMICOLON .)
    DOUBLE          reduce using rule 143 (ForExpr -> SEMICOLON .)
    VOID            reduce using rule 143 (ForExpr -> SEMICOLON .)


state 400

    (142) ForExpr -> Expression . SEMICOLON

    SEMICOLON       shift and go to state 431


state 401

    (146) ExpressionStatements -> ExpressionStatements COMMA . ExpressionStatement
    (131) ExpressionStatement -> . Expression
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    ExclusiveOrExpression          shift and go to state 134
    ExpressionStatement            shift and go to state 432
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 156
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 402

    (139) ForInit -> ExpressionStatements SEMICOLON .

    SEMICOLON       reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    OP_INC          reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    OP_DEC          reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    +               reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    -               reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    ~               reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    !               reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    IDENTIFIER      reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    THIS            reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    SUPER           reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    NULL            reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    LROUNPAREN      reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    LITERAL         reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    NEW             reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    BOOLEAN         reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    CHAR            reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    BYTE            reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    SHORT           reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    INT             reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    LONG            reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    FLOAT           reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    DOUBLE          reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)
    VOID            reduce using rule 139 (ForInit -> ExpressionStatements SEMICOLON .)


state 403

    (169) ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .

    LSQPAREN        reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    DOT             reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_INC          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_DEC          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    =               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_MUL         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_DIV         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_MOD         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_ADD         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SUB         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SHL         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SHR         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SHRR        reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_AND         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_XOR         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_OR          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    *               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    /               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    %               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    +               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    -               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHL          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHR          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHRR         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    <               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    >               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LE           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_GE           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    INSTANCEOF      reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_EQ           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_NE           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    &               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ^               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    |               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LAND         reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ?               reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LOR          reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    SEMICOLON       reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    RROUNPAREN      reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    COLON           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    COMMA           reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    RCURPAREN       reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    RSQPAREN        reduce using rule 169 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)


state 404

    (157) GuardingStatement -> TRY Block Catches Finally .

    RCURPAREN       reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    FINAL           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    SEMICOLON       reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    IDENTIFIER      reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    CASE            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    DEFAULT         reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    IF              reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    SWITCH          reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    WHILE           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    DO              reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    FOR             reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    BREAK           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    CONTINUE        reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    RETURN          reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    THROW           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    SYNCHRONIZED    reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    TRY             reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    LCURPAREN       reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    BOOLEAN         reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    CHAR            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    BYTE            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    SHORT           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    INT             reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    LONG            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    FLOAT           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    DOUBLE          reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    VOID            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    OP_INC          reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    OP_DEC          reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    +               reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    -               reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    ~               reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    !               reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    THIS            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    SUPER           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    NULL            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    LROUNPAREN      reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    LITERAL         reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    BOOLEAN_CONST   reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    NEW             reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    ELSE            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)


state 405

    (159) Catches -> Catches Catch .

    FINALLY         reduce using rule 159 (Catches -> Catches Catch .)
    CATCH           reduce using rule 159 (Catches -> Catches Catch .)
    RCURPAREN       reduce using rule 159 (Catches -> Catches Catch .)
    FINAL           reduce using rule 159 (Catches -> Catches Catch .)
    SEMICOLON       reduce using rule 159 (Catches -> Catches Catch .)
    IDENTIFIER      reduce using rule 159 (Catches -> Catches Catch .)
    CASE            reduce using rule 159 (Catches -> Catches Catch .)
    DEFAULT         reduce using rule 159 (Catches -> Catches Catch .)
    IF              reduce using rule 159 (Catches -> Catches Catch .)
    SWITCH          reduce using rule 159 (Catches -> Catches Catch .)
    WHILE           reduce using rule 159 (Catches -> Catches Catch .)
    DO              reduce using rule 159 (Catches -> Catches Catch .)
    FOR             reduce using rule 159 (Catches -> Catches Catch .)
    BREAK           reduce using rule 159 (Catches -> Catches Catch .)
    CONTINUE        reduce using rule 159 (Catches -> Catches Catch .)
    RETURN          reduce using rule 159 (Catches -> Catches Catch .)
    THROW           reduce using rule 159 (Catches -> Catches Catch .)
    SYNCHRONIZED    reduce using rule 159 (Catches -> Catches Catch .)
    TRY             reduce using rule 159 (Catches -> Catches Catch .)
    LCURPAREN       reduce using rule 159 (Catches -> Catches Catch .)
    BOOLEAN         reduce using rule 159 (Catches -> Catches Catch .)
    CHAR            reduce using rule 159 (Catches -> Catches Catch .)
    BYTE            reduce using rule 159 (Catches -> Catches Catch .)
    SHORT           reduce using rule 159 (Catches -> Catches Catch .)
    INT             reduce using rule 159 (Catches -> Catches Catch .)
    LONG            reduce using rule 159 (Catches -> Catches Catch .)
    FLOAT           reduce using rule 159 (Catches -> Catches Catch .)
    DOUBLE          reduce using rule 159 (Catches -> Catches Catch .)
    VOID            reduce using rule 159 (Catches -> Catches Catch .)
    OP_INC          reduce using rule 159 (Catches -> Catches Catch .)
    OP_DEC          reduce using rule 159 (Catches -> Catches Catch .)
    +               reduce using rule 159 (Catches -> Catches Catch .)
    -               reduce using rule 159 (Catches -> Catches Catch .)
    ~               reduce using rule 159 (Catches -> Catches Catch .)
    !               reduce using rule 159 (Catches -> Catches Catch .)
    THIS            reduce using rule 159 (Catches -> Catches Catch .)
    SUPER           reduce using rule 159 (Catches -> Catches Catch .)
    NULL            reduce using rule 159 (Catches -> Catches Catch .)
    LROUNPAREN      reduce using rule 159 (Catches -> Catches Catch .)
    LITERAL         reduce using rule 159 (Catches -> Catches Catch .)
    BOOLEAN_CONST   reduce using rule 159 (Catches -> Catches Catch .)
    NEW             reduce using rule 159 (Catches -> Catches Catch .)
    ELSE            reduce using rule 159 (Catches -> Catches Catch .)


state 406

    (163) Finally -> FINALLY Block .

    RCURPAREN       reduce using rule 163 (Finally -> FINALLY Block .)
    FINAL           reduce using rule 163 (Finally -> FINALLY Block .)
    SEMICOLON       reduce using rule 163 (Finally -> FINALLY Block .)
    IDENTIFIER      reduce using rule 163 (Finally -> FINALLY Block .)
    CASE            reduce using rule 163 (Finally -> FINALLY Block .)
    DEFAULT         reduce using rule 163 (Finally -> FINALLY Block .)
    IF              reduce using rule 163 (Finally -> FINALLY Block .)
    SWITCH          reduce using rule 163 (Finally -> FINALLY Block .)
    WHILE           reduce using rule 163 (Finally -> FINALLY Block .)
    DO              reduce using rule 163 (Finally -> FINALLY Block .)
    FOR             reduce using rule 163 (Finally -> FINALLY Block .)
    BREAK           reduce using rule 163 (Finally -> FINALLY Block .)
    CONTINUE        reduce using rule 163 (Finally -> FINALLY Block .)
    RETURN          reduce using rule 163 (Finally -> FINALLY Block .)
    THROW           reduce using rule 163 (Finally -> FINALLY Block .)
    SYNCHRONIZED    reduce using rule 163 (Finally -> FINALLY Block .)
    TRY             reduce using rule 163 (Finally -> FINALLY Block .)
    LCURPAREN       reduce using rule 163 (Finally -> FINALLY Block .)
    BOOLEAN         reduce using rule 163 (Finally -> FINALLY Block .)
    CHAR            reduce using rule 163 (Finally -> FINALLY Block .)
    BYTE            reduce using rule 163 (Finally -> FINALLY Block .)
    SHORT           reduce using rule 163 (Finally -> FINALLY Block .)
    INT             reduce using rule 163 (Finally -> FINALLY Block .)
    LONG            reduce using rule 163 (Finally -> FINALLY Block .)
    FLOAT           reduce using rule 163 (Finally -> FINALLY Block .)
    DOUBLE          reduce using rule 163 (Finally -> FINALLY Block .)
    VOID            reduce using rule 163 (Finally -> FINALLY Block .)
    OP_INC          reduce using rule 163 (Finally -> FINALLY Block .)
    OP_DEC          reduce using rule 163 (Finally -> FINALLY Block .)
    +               reduce using rule 163 (Finally -> FINALLY Block .)
    -               reduce using rule 163 (Finally -> FINALLY Block .)
    ~               reduce using rule 163 (Finally -> FINALLY Block .)
    !               reduce using rule 163 (Finally -> FINALLY Block .)
    THIS            reduce using rule 163 (Finally -> FINALLY Block .)
    SUPER           reduce using rule 163 (Finally -> FINALLY Block .)
    NULL            reduce using rule 163 (Finally -> FINALLY Block .)
    LROUNPAREN      reduce using rule 163 (Finally -> FINALLY Block .)
    LITERAL         reduce using rule 163 (Finally -> FINALLY Block .)
    BOOLEAN_CONST   reduce using rule 163 (Finally -> FINALLY Block .)
    NEW             reduce using rule 163 (Finally -> FINALLY Block .)
    ELSE            reduce using rule 163 (Finally -> FINALLY Block .)


state 407

    (161) CatchHeader -> CATCH LROUNPAREN . TypeSpecifier IDENTIFIER RROUNPAREN
    (162) CatchHeader -> CATCH LROUNPAREN . TypeSpecifier RROUNPAREN
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER

    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70
    IDENTIFIER      shift and go to state 32

    TypeName                       shift and go to state 65
    QualifiedName                  shift and go to state 64
    TypeSpecifier                  shift and go to state 433
    PrimitiveType                  shift and go to state 56

state 408

    (160) Catch -> CatchHeader Block .

    FINALLY         reduce using rule 160 (Catch -> CatchHeader Block .)
    CATCH           reduce using rule 160 (Catch -> CatchHeader Block .)
    RCURPAREN       reduce using rule 160 (Catch -> CatchHeader Block .)
    FINAL           reduce using rule 160 (Catch -> CatchHeader Block .)
    SEMICOLON       reduce using rule 160 (Catch -> CatchHeader Block .)
    IDENTIFIER      reduce using rule 160 (Catch -> CatchHeader Block .)
    CASE            reduce using rule 160 (Catch -> CatchHeader Block .)
    DEFAULT         reduce using rule 160 (Catch -> CatchHeader Block .)
    IF              reduce using rule 160 (Catch -> CatchHeader Block .)
    SWITCH          reduce using rule 160 (Catch -> CatchHeader Block .)
    WHILE           reduce using rule 160 (Catch -> CatchHeader Block .)
    DO              reduce using rule 160 (Catch -> CatchHeader Block .)
    FOR             reduce using rule 160 (Catch -> CatchHeader Block .)
    BREAK           reduce using rule 160 (Catch -> CatchHeader Block .)
    CONTINUE        reduce using rule 160 (Catch -> CatchHeader Block .)
    RETURN          reduce using rule 160 (Catch -> CatchHeader Block .)
    THROW           reduce using rule 160 (Catch -> CatchHeader Block .)
    SYNCHRONIZED    reduce using rule 160 (Catch -> CatchHeader Block .)
    TRY             reduce using rule 160 (Catch -> CatchHeader Block .)
    LCURPAREN       reduce using rule 160 (Catch -> CatchHeader Block .)
    BOOLEAN         reduce using rule 160 (Catch -> CatchHeader Block .)
    CHAR            reduce using rule 160 (Catch -> CatchHeader Block .)
    BYTE            reduce using rule 160 (Catch -> CatchHeader Block .)
    SHORT           reduce using rule 160 (Catch -> CatchHeader Block .)
    INT             reduce using rule 160 (Catch -> CatchHeader Block .)
    LONG            reduce using rule 160 (Catch -> CatchHeader Block .)
    FLOAT           reduce using rule 160 (Catch -> CatchHeader Block .)
    DOUBLE          reduce using rule 160 (Catch -> CatchHeader Block .)
    VOID            reduce using rule 160 (Catch -> CatchHeader Block .)
    OP_INC          reduce using rule 160 (Catch -> CatchHeader Block .)
    OP_DEC          reduce using rule 160 (Catch -> CatchHeader Block .)
    +               reduce using rule 160 (Catch -> CatchHeader Block .)
    -               reduce using rule 160 (Catch -> CatchHeader Block .)
    ~               reduce using rule 160 (Catch -> CatchHeader Block .)
    !               reduce using rule 160 (Catch -> CatchHeader Block .)
    THIS            reduce using rule 160 (Catch -> CatchHeader Block .)
    SUPER           reduce using rule 160 (Catch -> CatchHeader Block .)
    NULL            reduce using rule 160 (Catch -> CatchHeader Block .)
    LROUNPAREN      reduce using rule 160 (Catch -> CatchHeader Block .)
    LITERAL         reduce using rule 160 (Catch -> CatchHeader Block .)
    BOOLEAN_CONST   reduce using rule 160 (Catch -> CatchHeader Block .)
    NEW             reduce using rule 160 (Catch -> CatchHeader Block .)
    ELSE            reduce using rule 160 (Catch -> CatchHeader Block .)


state 409

    (83) ArrayInitializers -> ArrayInitializers COMMA . VariableInitializer
    (84) ArrayInitializers -> ArrayInitializers COMMA .
    (79) VariableInitializer -> . Expression
    (80) VariableInitializer -> . LCURPAREN RCURPAREN
    (81) VariableInitializer -> . LCURPAREN ArrayInitializers RCURPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    RCURPAREN       reduce using rule 84 (ArrayInitializers -> ArrayInitializers COMMA .)
    COMMA           reduce using rule 84 (ArrayInitializers -> ArrayInitializers COMMA .)
    LCURPAREN       shift and go to state 302
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    VariableInitializer            shift and go to state 434
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 304
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 410

    (199) PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .

    DOT             reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    OP_INC          reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    OP_DEC          reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    =               reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    ASS_MUL         reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    ASS_DIV         reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    ASS_MOD         reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    ASS_ADD         reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    ASS_SUB         reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    ASS_SHL         reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    ASS_SHR         reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    ASS_SHRR        reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    ASS_AND         reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    ASS_XOR         reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    ASS_OR          reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    *               reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    /               reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    %               reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    +               reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    -               reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    OP_SHL          reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    OP_SHR          reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    OP_SHRR         reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    <               reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    >               reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    OP_LE           reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    OP_GE           reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    INSTANCEOF      reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    OP_EQ           reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    OP_NE           reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    &               reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    ^               reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    |               reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    OP_LAND         reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    ?               reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    OP_LOR          reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    SEMICOLON       reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    RROUNPAREN      reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    COLON           reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    COMMA           reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    RCURPAREN       reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)
    RSQPAREN        reduce using rule 199 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN .)


state 411

    (183) MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .

    LSQPAREN        reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    DOT             reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_INC          reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_DEC          reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    *               reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    /               reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    %               reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    +               reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    -               reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHL          reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHR          reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHRR         reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    <               reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    >               reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LE           reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_GE           reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    INSTANCEOF      reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_EQ           reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_NE           reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    &               reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ^               reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    |               reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LAND         reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ?               reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LOR          reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    SEMICOLON       reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    RROUNPAREN      reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    COLON           reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    COMMA           reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    RCURPAREN       reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    RSQPAREN        reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    LROUNPAREN      reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    =               reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_MUL         reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_DIV         reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_MOD         reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_ADD         reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_SUB         reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_SHL         reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_SHR         reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_SHRR        reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_AND         reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_XOR         reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_OR          reduce using rule 183 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)


state 412

    (192) ArgumentList -> ArgumentList COMMA . Expression
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 435
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 413

    (177) ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .

    LSQPAREN        reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    DOT             reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_INC          reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_DEC          reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    *               reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    /               reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    %               reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    +               reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    -               reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_SHL          reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_SHR          reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_SHRR         reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    <               reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    >               reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_LE           reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_GE           reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    INSTANCEOF      reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_EQ           reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_NE           reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    &               reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ^               reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    |               reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_LAND         reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ?               reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_LOR          reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    SEMICOLON       reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    RROUNPAREN      reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    COLON           reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    COMMA           reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    RCURPAREN       reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    RSQPAREN        reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    LROUNPAREN      reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    =               reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_MUL         reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_DIV         reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_MOD         reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_ADD         reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_SUB         reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_SHL         reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_SHR         reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_SHRR        reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_AND         reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_XOR         reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_OR          reduce using rule 177 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)


state 414

    (200) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .

    DOT             reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_INC          reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_DEC          reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    =               reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_MUL         reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_DIV         reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_MOD         reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_ADD         reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_SUB         reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_SHL         reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_SHR         reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_SHRR        reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_AND         reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_XOR         reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_OR          reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    *               reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    /               reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    %               reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    +               reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    -               reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_SHL          reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_SHR          reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_SHRR         reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    <               reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    >               reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_LE           reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_GE           reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    INSTANCEOF      reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_EQ           reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_NE           reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    &               reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ^               reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    |               reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_LAND         reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ?               reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_LOR          reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    SEMICOLON       reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    RROUNPAREN      reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    COLON           reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    COMMA           reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    RCURPAREN       reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    RSQPAREN        reduce using rule 200 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)


state 415

    (135) IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN . Statement
    (119) Statement -> . EmptyStatement
    (120) Statement -> . LabelStatement
    (121) Statement -> . ExpressionStatement SEMICOLON
    (122) Statement -> . SelectionStatement
    (123) Statement -> . IterationStatement
    (124) Statement -> . JumpStatement
    (125) Statement -> . GuardingStatement
    (126) Statement -> . Block
    (127) EmptyStatement -> . SEMICOLON
    (128) LabelStatement -> . IDENTIFIER COLON
    (129) LabelStatement -> . CASE ConstantExpression COLON
    (130) LabelStatement -> . DEFAULT COLON
    (131) ExpressionStatement -> . Expression
    (132) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement
    (133) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement
    (134) SelectionStatement -> . SWITCH LROUNPAREN Expression RROUNPAREN Block
    (135) IterationStatement -> . WHILE LROUNPAREN Expression RROUNPAREN Statement
    (136) IterationStatement -> . DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON
    (137) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement
    (138) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (147) JumpStatement -> . BREAK IDENTIFIER SEMICOLON
    (148) JumpStatement -> . BREAK SEMICOLON
    (149) JumpStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (150) JumpStatement -> . CONTINUE SEMICOLON
    (151) JumpStatement -> . RETURN Expression SEMICOLON
    (152) JumpStatement -> . RETURN SEMICOLON
    (153) JumpStatement -> . THROW Expression SEMICOLON
    (154) GuardingStatement -> . SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    SEMICOLON       shift and go to state 150
    IDENTIFIER      shift and go to state 154
    CASE            shift and go to state 149
    DEFAULT         shift and go to state 142
    IF              shift and go to state 175
    SWITCH          shift and go to state 152
    WHILE           shift and go to state 144
    DO              shift and go to state 163
    FOR             shift and go to state 124
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 137
    RETURN          shift and go to state 112
    THROW           shift and go to state 179
    SYNCHRONIZED    shift and go to state 113
    TRY             shift and go to state 126
    LCURPAREN       shift and go to state 69
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    LabelStatement                 shift and go to state 111
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    ExpressionStatement            shift and go to state 103
    JumpStatement                  shift and go to state 143
    RealPostfixExpression          shift and go to state 114
    Statement                      shift and go to state 436
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    GuardingStatement              shift and go to state 151
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    SelectionStatement             shift and go to state 122
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    ComplexPrimary                 shift and go to state 140
    PrimitiveType                  shift and go to state 220
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 159
    Expression                     shift and go to state 156
    Block                          shift and go to state 130
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    PrimaryExpression              shift and go to state 148
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    EmptyStatement                 shift and go to state 109
    SpecialName                    shift and go to state 139
    IterationStatement             shift and go to state 180

state 416

    (207) DimExprs -> DimExprs DimExpr .

    LSQPAREN        reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    LCURPAREN       reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    DOT             reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    OP_INC          reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    OP_DEC          reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    =               reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    ASS_MUL         reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    ASS_DIV         reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    ASS_MOD         reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    ASS_ADD         reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    ASS_SUB         reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    ASS_SHL         reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    ASS_SHR         reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    ASS_SHRR        reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    ASS_AND         reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    ASS_XOR         reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    ASS_OR          reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    *               reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    /               reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    %               reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    +               reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    -               reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    OP_SHL          reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    OP_SHR          reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    OP_SHRR         reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    <               reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    >               reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    OP_LE           reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    OP_GE           reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    INSTANCEOF      reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    OP_EQ           reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    OP_NE           reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    &               reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    ^               reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    |               reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    OP_LAND         reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    ?               reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    OP_LOR          reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    SEMICOLON       reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    RROUNPAREN      reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    COLON           reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    COMMA           reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    RCURPAREN       reduce using rule 207 (DimExprs -> DimExprs DimExpr .)
    RSQPAREN        reduce using rule 207 (DimExprs -> DimExprs DimExpr .)


state 417

    (203) ArrayAllocationExpression -> NEW TypeName DimExprs Dims .
    (210) Dims -> Dims . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LCURPAREN       reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    DOT             reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_INC          reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_DEC          reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    =               reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_MUL         reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_DIV         reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_MOD         reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_ADD         reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_SUB         reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_SHL         reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_SHR         reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_SHRR        reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_AND         reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_XOR         reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_OR          reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    *               reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    /               reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    %               reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    +               reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    -               reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_SHL          reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_SHR          reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_SHRR         reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    <               reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    >               reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LE           reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_GE           reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    INSTANCEOF      reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_EQ           reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_NE           reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    &               reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ^               reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    |               reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LAND         reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ?               reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LOR          reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    SEMICOLON       reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    RROUNPAREN      reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    COLON           reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    COMMA           reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    RCURPAREN       reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    RSQPAREN        reduce using rule 203 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    LSQPAREN        shift and go to state 99

    OP_DIM                         shift and go to state 205

state 418

    (208) DimExpr -> LSQPAREN Expression . RSQPAREN

    RSQPAREN        shift and go to state 437


state 419

    (201) ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList . RROUNPAREN
    (192) ArgumentList -> ArgumentList . COMMA Expression

    RROUNPAREN      shift and go to state 438
    COMMA           shift and go to state 412


state 420

    (202) ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .

    LCURPAREN       reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    DOT             reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_INC          reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_DEC          reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    =               reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_MUL         reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_DIV         reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_MOD         reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_ADD         reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_SUB         reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_SHL         reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_SHR         reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_SHRR        reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_AND         reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_XOR         reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_OR          reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    *               reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    /               reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    %               reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    +               reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    -               reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_SHL          reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_SHR          reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_SHRR         reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    <               reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    >               reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_LE           reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_GE           reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    INSTANCEOF      reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_EQ           reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_NE           reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    &               reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ^               reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    |               reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_LAND         reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ?               reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_LOR          reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    RSQPAREN        reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    RROUNPAREN      reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    COMMA           reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    SEMICOLON       reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    COLON           reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    RCURPAREN       reduce using rule 202 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)


state 421

    (134) SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN . Block
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN

    LCURPAREN       shift and go to state 69

    Block                          shift and go to state 439

state 422

    (263) ConditionalExpression -> ConditionalOrExpression ? Expression COLON . ConditionalExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName

    LROUNPAREN      shift and go to state 228
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    CastExpression                 shift and go to state 164
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    ArithmeticUnaryOperator        shift and go to state 115
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    PrimaryExpression              shift and go to state 148
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ArrayAllocationExpression      shift and go to state 131
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    AdditiveExpression             shift and go to state 157
    ConditionalExpression          shift and go to state 440
    UnaryExpression                shift and go to state 227
    InclusiveOrExpression          shift and go to state 160
    FieldAccess                    shift and go to state 176
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    MethodAccess                   shift and go to state 132
    SpecialName                    shift and go to state 139

state 423

    (136) IterationStatement -> DO Statement WHILE LROUNPAREN . Expression RROUNPAREN SEMICOLON
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    IDENTIFIER      shift and go to state 32
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    ComplexPrimary                 shift and go to state 140
    PrimaryExpression              shift and go to state 148
    PrimitiveType                  shift and go to state 220
    RealPostfixExpression          shift and go to state 114
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    LogicalUnaryExpression         shift and go to state 174
    Expression                     shift and go to state 441
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    UnaryExpression                shift and go to state 159
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    SpecialName                    shift and go to state 139

state 424

    (176) ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .

    LSQPAREN        reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    DOT             reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_INC          reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_DEC          reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    *               reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    /               reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    %               reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    +               reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    -               reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_SHL          reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_SHR          reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_SHRR         reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    <               reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    >               reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_LE           reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_GE           reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    INSTANCEOF      reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_EQ           reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_NE           reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    &               reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ^               reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    |               reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_LAND         reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ?               reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_LOR          reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    SEMICOLON       reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    RROUNPAREN      reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    COLON           reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    COMMA           reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    RCURPAREN       reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    RSQPAREN        reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    LROUNPAREN      reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    =               reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_MUL         reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_DIV         reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_MOD         reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_ADD         reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_SUB         reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_SHL         reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_SHR         reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_SHRR        reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_AND         reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_XOR         reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_OR          reduce using rule 176 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)


state 425

    (132) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN . Statement
    (133) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN . Statement ELSE Statement
    (119) Statement -> . EmptyStatement
    (120) Statement -> . LabelStatement
    (121) Statement -> . ExpressionStatement SEMICOLON
    (122) Statement -> . SelectionStatement
    (123) Statement -> . IterationStatement
    (124) Statement -> . JumpStatement
    (125) Statement -> . GuardingStatement
    (126) Statement -> . Block
    (127) EmptyStatement -> . SEMICOLON
    (128) LabelStatement -> . IDENTIFIER COLON
    (129) LabelStatement -> . CASE ConstantExpression COLON
    (130) LabelStatement -> . DEFAULT COLON
    (131) ExpressionStatement -> . Expression
    (132) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement
    (133) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement
    (134) SelectionStatement -> . SWITCH LROUNPAREN Expression RROUNPAREN Block
    (135) IterationStatement -> . WHILE LROUNPAREN Expression RROUNPAREN Statement
    (136) IterationStatement -> . DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON
    (137) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement
    (138) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (147) JumpStatement -> . BREAK IDENTIFIER SEMICOLON
    (148) JumpStatement -> . BREAK SEMICOLON
    (149) JumpStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (150) JumpStatement -> . CONTINUE SEMICOLON
    (151) JumpStatement -> . RETURN Expression SEMICOLON
    (152) JumpStatement -> . RETURN SEMICOLON
    (153) JumpStatement -> . THROW Expression SEMICOLON
    (154) GuardingStatement -> . SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    SEMICOLON       shift and go to state 150
    IDENTIFIER      shift and go to state 154
    CASE            shift and go to state 149
    DEFAULT         shift and go to state 142
    IF              shift and go to state 175
    SWITCH          shift and go to state 152
    WHILE           shift and go to state 144
    DO              shift and go to state 163
    FOR             shift and go to state 124
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 137
    RETURN          shift and go to state 112
    THROW           shift and go to state 179
    SYNCHRONIZED    shift and go to state 113
    TRY             shift and go to state 126
    LCURPAREN       shift and go to state 69
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    LabelStatement                 shift and go to state 111
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    ExpressionStatement            shift and go to state 103
    JumpStatement                  shift and go to state 143
    RealPostfixExpression          shift and go to state 114
    Statement                      shift and go to state 442
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    GuardingStatement              shift and go to state 151
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    SelectionStatement             shift and go to state 122
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    ComplexPrimary                 shift and go to state 140
    PrimitiveType                  shift and go to state 220
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 159
    Expression                     shift and go to state 156
    Block                          shift and go to state 130
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    PrimaryExpression              shift and go to state 148
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    EmptyStatement                 shift and go to state 109
    SpecialName                    shift and go to state 139
    IterationStatement             shift and go to state 180

state 426

    (81) VariableInitializer -> LCURPAREN ArrayInitializers RCURPAREN .

    COMMA           reduce using rule 81 (VariableInitializer -> LCURPAREN ArrayInitializers RCURPAREN .)
    SEMICOLON       reduce using rule 81 (VariableInitializer -> LCURPAREN ArrayInitializers RCURPAREN .)
    RCURPAREN       reduce using rule 81 (VariableInitializer -> LCURPAREN ArrayInitializers RCURPAREN .)


state 427

    (154) GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .

    RCURPAREN       reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    FINAL           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    SEMICOLON       reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    IDENTIFIER      reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    CASE            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    DEFAULT         reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    IF              reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    SWITCH          reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    WHILE           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    DO              reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    FOR             reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    BREAK           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    CONTINUE        reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    RETURN          reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    THROW           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    SYNCHRONIZED    reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    TRY             reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    LCURPAREN       reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    BOOLEAN         reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    CHAR            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    BYTE            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    SHORT           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    INT             reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    LONG            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    FLOAT           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    DOUBLE          reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    VOID            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    OP_INC          reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    OP_DEC          reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    +               reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    -               reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    ~               reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    !               reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    THIS            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    SUPER           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    NULL            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    LROUNPAREN      reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    LITERAL         reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    BOOLEAN_CONST   reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    NEW             reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)
    ELSE            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement .)


state 428

    (138) IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN . Statement
    (119) Statement -> . EmptyStatement
    (120) Statement -> . LabelStatement
    (121) Statement -> . ExpressionStatement SEMICOLON
    (122) Statement -> . SelectionStatement
    (123) Statement -> . IterationStatement
    (124) Statement -> . JumpStatement
    (125) Statement -> . GuardingStatement
    (126) Statement -> . Block
    (127) EmptyStatement -> . SEMICOLON
    (128) LabelStatement -> . IDENTIFIER COLON
    (129) LabelStatement -> . CASE ConstantExpression COLON
    (130) LabelStatement -> . DEFAULT COLON
    (131) ExpressionStatement -> . Expression
    (132) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement
    (133) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement
    (134) SelectionStatement -> . SWITCH LROUNPAREN Expression RROUNPAREN Block
    (135) IterationStatement -> . WHILE LROUNPAREN Expression RROUNPAREN Statement
    (136) IterationStatement -> . DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON
    (137) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement
    (138) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (147) JumpStatement -> . BREAK IDENTIFIER SEMICOLON
    (148) JumpStatement -> . BREAK SEMICOLON
    (149) JumpStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (150) JumpStatement -> . CONTINUE SEMICOLON
    (151) JumpStatement -> . RETURN Expression SEMICOLON
    (152) JumpStatement -> . RETURN SEMICOLON
    (153) JumpStatement -> . THROW Expression SEMICOLON
    (154) GuardingStatement -> . SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    SEMICOLON       shift and go to state 150
    IDENTIFIER      shift and go to state 154
    CASE            shift and go to state 149
    DEFAULT         shift and go to state 142
    IF              shift and go to state 175
    SWITCH          shift and go to state 152
    WHILE           shift and go to state 144
    DO              shift and go to state 163
    FOR             shift and go to state 124
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 137
    RETURN          shift and go to state 112
    THROW           shift and go to state 179
    SYNCHRONIZED    shift and go to state 113
    TRY             shift and go to state 126
    LCURPAREN       shift and go to state 69
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    LabelStatement                 shift and go to state 111
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    ExpressionStatement            shift and go to state 103
    JumpStatement                  shift and go to state 143
    RealPostfixExpression          shift and go to state 114
    Statement                      shift and go to state 443
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    GuardingStatement              shift and go to state 151
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    SelectionStatement             shift and go to state 122
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    ComplexPrimary                 shift and go to state 140
    PrimitiveType                  shift and go to state 220
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 159
    Expression                     shift and go to state 156
    Block                          shift and go to state 130
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    PrimaryExpression              shift and go to state 148
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    EmptyStatement                 shift and go to state 109
    SpecialName                    shift and go to state 139
    IterationStatement             shift and go to state 180

state 429

    (137) IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr . RROUNPAREN Statement

    RROUNPAREN      shift and go to state 444


state 430

    (144) ForIncr -> ExpressionStatements .
    (146) ExpressionStatements -> ExpressionStatements . COMMA ExpressionStatement

    RROUNPAREN      reduce using rule 144 (ForIncr -> ExpressionStatements .)
    COMMA           shift and go to state 401


state 431

    (142) ForExpr -> Expression SEMICOLON .

    RROUNPAREN      reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    OP_INC          reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    OP_DEC          reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    +               reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    -               reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    ~               reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    !               reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    THIS            reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    SUPER           reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    NULL            reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    LROUNPAREN      reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    LITERAL         reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    NEW             reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    BOOLEAN         reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    CHAR            reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    BYTE            reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    SHORT           reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    INT             reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    LONG            reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    FLOAT           reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    DOUBLE          reduce using rule 142 (ForExpr -> Expression SEMICOLON .)
    VOID            reduce using rule 142 (ForExpr -> Expression SEMICOLON .)


state 432

    (146) ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement .

    SEMICOLON       reduce using rule 146 (ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement .)
    COMMA           reduce using rule 146 (ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement .)
    RROUNPAREN      reduce using rule 146 (ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement .)


state 433

    (161) CatchHeader -> CATCH LROUNPAREN TypeSpecifier . IDENTIFIER RROUNPAREN
    (162) CatchHeader -> CATCH LROUNPAREN TypeSpecifier . RROUNPAREN

    IDENTIFIER      shift and go to state 446
    RROUNPAREN      shift and go to state 445


state 434

    (83) ArrayInitializers -> ArrayInitializers COMMA VariableInitializer .

    RCURPAREN       reduce using rule 83 (ArrayInitializers -> ArrayInitializers COMMA VariableInitializer .)
    COMMA           reduce using rule 83 (ArrayInitializers -> ArrayInitializers COMMA VariableInitializer .)


state 435

    (192) ArgumentList -> ArgumentList COMMA Expression .

    RROUNPAREN      reduce using rule 192 (ArgumentList -> ArgumentList COMMA Expression .)
    COMMA           reduce using rule 192 (ArgumentList -> ArgumentList COMMA Expression .)


state 436

    (135) IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .

    RCURPAREN       reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    FINAL           reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    SEMICOLON       reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    IDENTIFIER      reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    CASE            reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    DEFAULT         reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    IF              reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    SWITCH          reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    WHILE           reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    DO              reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    FOR             reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    BREAK           reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    CONTINUE        reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    RETURN          reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    THROW           reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    SYNCHRONIZED    reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    TRY             reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    LCURPAREN       reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    BOOLEAN         reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    CHAR            reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    BYTE            reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    SHORT           reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    INT             reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    LONG            reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    FLOAT           reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    DOUBLE          reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    VOID            reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    OP_INC          reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    OP_DEC          reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    +               reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    -               reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    ~               reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    !               reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    THIS            reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    SUPER           reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    NULL            reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    LROUNPAREN      reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    LITERAL         reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    BOOLEAN_CONST   reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    NEW             reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)
    ELSE            reduce using rule 135 (IterationStatement -> WHILE LROUNPAREN Expression RROUNPAREN Statement .)


state 437

    (208) DimExpr -> LSQPAREN Expression RSQPAREN .

    LSQPAREN        reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    LCURPAREN       reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    DOT             reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_INC          reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_DEC          reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    =               reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_MUL         reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_DIV         reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_MOD         reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_ADD         reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_SUB         reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_SHL         reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_SHR         reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_SHRR        reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_AND         reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_XOR         reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_OR          reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    *               reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    /               reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    %               reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    +               reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    -               reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_SHL          reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_SHR          reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_SHRR         reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    <               reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    >               reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_LE           reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_GE           reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    INSTANCEOF      reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_EQ           reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_NE           reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    &               reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ^               reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    |               reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_LAND         reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ?               reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_LOR          reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    SEMICOLON       reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    RROUNPAREN      reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    COLON           reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    COMMA           reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    RCURPAREN       reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    RSQPAREN        reduce using rule 208 (DimExpr -> LSQPAREN Expression RSQPAREN .)


state 438

    (201) ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .

    LCURPAREN       reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    DOT             reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_INC          reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_DEC          reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    =               reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_MUL         reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_DIV         reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_MOD         reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_ADD         reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_SUB         reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_SHL         reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_SHR         reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_SHRR        reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_AND         reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_XOR         reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_OR          reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    *               reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    /               reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    %               reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    +               reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    -               reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHL          reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHR          reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHRR         reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    <               reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    >               reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LE           reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_GE           reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    INSTANCEOF      reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_EQ           reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_NE           reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    &               reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ^               reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    |               reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LAND         reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ?               reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LOR          reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    RSQPAREN        reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    RROUNPAREN      reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    COMMA           reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    SEMICOLON       reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    COLON           reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    RCURPAREN       reduce using rule 201 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)


state 439

    (134) SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .

    RCURPAREN       reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    FINAL           reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    SEMICOLON       reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    IDENTIFIER      reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    CASE            reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    DEFAULT         reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    IF              reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    SWITCH          reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    WHILE           reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    DO              reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    FOR             reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    BREAK           reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    CONTINUE        reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    RETURN          reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    THROW           reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    SYNCHRONIZED    reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    TRY             reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    LCURPAREN       reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    BOOLEAN         reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    CHAR            reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    BYTE            reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    SHORT           reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    INT             reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    LONG            reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    FLOAT           reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    DOUBLE          reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    VOID            reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    OP_INC          reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    OP_DEC          reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    +               reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    -               reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    ~               reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    !               reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    THIS            reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    SUPER           reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    NULL            reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    LROUNPAREN      reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    LITERAL         reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    BOOLEAN_CONST   reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    NEW             reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)
    ELSE            reduce using rule 134 (SelectionStatement -> SWITCH LROUNPAREN Expression RROUNPAREN Block .)


state 440

    (263) ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression .

    RROUNPAREN      reduce using rule 263 (ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression .)
    COMMA           reduce using rule 263 (ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression .)
    SEMICOLON       reduce using rule 263 (ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression .)
    COLON           reduce using rule 263 (ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression .)
    RCURPAREN       reduce using rule 263 (ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression .)
    RSQPAREN        reduce using rule 263 (ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression .)


state 441

    (136) IterationStatement -> DO Statement WHILE LROUNPAREN Expression . RROUNPAREN SEMICOLON

    RROUNPAREN      shift and go to state 447


state 442

    (132) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .
    (133) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement . ELSE Statement

  ! shift/reduce conflict for ELSE resolved as shift
    RCURPAREN       reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    FINAL           reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    SEMICOLON       reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    IDENTIFIER      reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    CASE            reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    DEFAULT         reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    IF              reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    SWITCH          reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    WHILE           reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    DO              reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    FOR             reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    BREAK           reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    CONTINUE        reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    RETURN          reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    THROW           reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    SYNCHRONIZED    reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    TRY             reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    LCURPAREN       reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    BOOLEAN         reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    CHAR            reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    BYTE            reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    SHORT           reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    INT             reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    LONG            reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    FLOAT           reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    DOUBLE          reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    VOID            reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    OP_INC          reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    OP_DEC          reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    +               reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    -               reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    ~               reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    !               reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    THIS            reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    SUPER           reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    NULL            reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    LROUNPAREN      reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    LITERAL         reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    BOOLEAN_CONST   reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    NEW             reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .)
    ELSE            shift and go to state 448

  ! ELSE            [ reduce using rule 132 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement .) ]


state 443

    (138) IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .

    RCURPAREN       reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    FINAL           reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    SEMICOLON       reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    IDENTIFIER      reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    CASE            reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    DEFAULT         reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    IF              reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    SWITCH          reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    WHILE           reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    DO              reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    FOR             reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    BREAK           reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    CONTINUE        reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    RETURN          reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    THROW           reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    SYNCHRONIZED    reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    TRY             reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    LCURPAREN       reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    BOOLEAN         reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    CHAR            reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    BYTE            reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    SHORT           reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    INT             reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    LONG            reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    FLOAT           reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    DOUBLE          reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    VOID            reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    OP_INC          reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    OP_DEC          reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    +               reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    -               reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    ~               reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    !               reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    THIS            reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    SUPER           reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    NULL            reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    LROUNPAREN      reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    LITERAL         reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    BOOLEAN_CONST   reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    NEW             reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    ELSE            reduce using rule 138 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)


state 444

    (137) IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN . Statement
    (119) Statement -> . EmptyStatement
    (120) Statement -> . LabelStatement
    (121) Statement -> . ExpressionStatement SEMICOLON
    (122) Statement -> . SelectionStatement
    (123) Statement -> . IterationStatement
    (124) Statement -> . JumpStatement
    (125) Statement -> . GuardingStatement
    (126) Statement -> . Block
    (127) EmptyStatement -> . SEMICOLON
    (128) LabelStatement -> . IDENTIFIER COLON
    (129) LabelStatement -> . CASE ConstantExpression COLON
    (130) LabelStatement -> . DEFAULT COLON
    (131) ExpressionStatement -> . Expression
    (132) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement
    (133) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement
    (134) SelectionStatement -> . SWITCH LROUNPAREN Expression RROUNPAREN Block
    (135) IterationStatement -> . WHILE LROUNPAREN Expression RROUNPAREN Statement
    (136) IterationStatement -> . DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON
    (137) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement
    (138) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (147) JumpStatement -> . BREAK IDENTIFIER SEMICOLON
    (148) JumpStatement -> . BREAK SEMICOLON
    (149) JumpStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (150) JumpStatement -> . CONTINUE SEMICOLON
    (151) JumpStatement -> . RETURN Expression SEMICOLON
    (152) JumpStatement -> . RETURN SEMICOLON
    (153) JumpStatement -> . THROW Expression SEMICOLON
    (154) GuardingStatement -> . SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    SEMICOLON       shift and go to state 150
    IDENTIFIER      shift and go to state 154
    CASE            shift and go to state 149
    DEFAULT         shift and go to state 142
    IF              shift and go to state 175
    SWITCH          shift and go to state 152
    WHILE           shift and go to state 144
    DO              shift and go to state 163
    FOR             shift and go to state 124
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 137
    RETURN          shift and go to state 112
    THROW           shift and go to state 179
    SYNCHRONIZED    shift and go to state 113
    TRY             shift and go to state 126
    LCURPAREN       shift and go to state 69
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    LabelStatement                 shift and go to state 111
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    ExpressionStatement            shift and go to state 103
    JumpStatement                  shift and go to state 143
    RealPostfixExpression          shift and go to state 114
    Statement                      shift and go to state 449
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    GuardingStatement              shift and go to state 151
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    SelectionStatement             shift and go to state 122
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    ComplexPrimary                 shift and go to state 140
    PrimitiveType                  shift and go to state 220
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 159
    Expression                     shift and go to state 156
    Block                          shift and go to state 130
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    PrimaryExpression              shift and go to state 148
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    EmptyStatement                 shift and go to state 109
    SpecialName                    shift and go to state 139
    IterationStatement             shift and go to state 180

state 445

    (162) CatchHeader -> CATCH LROUNPAREN TypeSpecifier RROUNPAREN .

    LCURPAREN       reduce using rule 162 (CatchHeader -> CATCH LROUNPAREN TypeSpecifier RROUNPAREN .)


state 446

    (161) CatchHeader -> CATCH LROUNPAREN TypeSpecifier IDENTIFIER . RROUNPAREN

    RROUNPAREN      shift and go to state 450


state 447

    (136) IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN . SEMICOLON

    SEMICOLON       shift and go to state 451


state 448

    (133) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE . Statement
    (119) Statement -> . EmptyStatement
    (120) Statement -> . LabelStatement
    (121) Statement -> . ExpressionStatement SEMICOLON
    (122) Statement -> . SelectionStatement
    (123) Statement -> . IterationStatement
    (124) Statement -> . JumpStatement
    (125) Statement -> . GuardingStatement
    (126) Statement -> . Block
    (127) EmptyStatement -> . SEMICOLON
    (128) LabelStatement -> . IDENTIFIER COLON
    (129) LabelStatement -> . CASE ConstantExpression COLON
    (130) LabelStatement -> . DEFAULT COLON
    (131) ExpressionStatement -> . Expression
    (132) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement
    (133) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement
    (134) SelectionStatement -> . SWITCH LROUNPAREN Expression RROUNPAREN Block
    (135) IterationStatement -> . WHILE LROUNPAREN Expression RROUNPAREN Statement
    (136) IterationStatement -> . DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON
    (137) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement
    (138) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (147) JumpStatement -> . BREAK IDENTIFIER SEMICOLON
    (148) JumpStatement -> . BREAK SEMICOLON
    (149) JumpStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (150) JumpStatement -> . CONTINUE SEMICOLON
    (151) JumpStatement -> . RETURN Expression SEMICOLON
    (152) JumpStatement -> . RETURN SEMICOLON
    (153) JumpStatement -> . THROW Expression SEMICOLON
    (154) GuardingStatement -> . SYNCHRONIZED LROUNPAREN Expression RROUNPAREN Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (111) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (112) Block -> . LCURPAREN RCURPAREN
    (278) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (215) UnaryExpression -> . OP_INC UnaryExpression
    (216) UnaryExpression -> . OP_DEC UnaryExpression
    (217) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (223) ArithmeticUnaryOperator -> . +
    (224) ArithmeticUnaryOperator -> . -
    (219) LogicalUnaryExpression -> . PostfixExpression
    (220) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (211) PostfixExpression -> . PrimaryExpression
    (212) PostfixExpression -> . RealPostfixExpression
    (221) LogicalUnaryOperator -> . ~
    (222) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (213) RealPostfixExpression -> . PostfixExpression OP_INC
    (214) RealPostfixExpression -> . PostfixExpression OP_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (36) QualifiedName -> . IDENTIFIER
    (37) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (188) SpecialName -> . THIS
    (189) SpecialName -> . SUPER
    (190) SpecialName -> . NULL
    (193) NewAllocationExpression -> . PlainNewAllocationExpression
    (194) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (169) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (195) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (196) PlainNewAllocationExpression -> . ClassAllocationExpression
    (197) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (198) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (199) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN ArrayInitializers RCURPAREN
    (200) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (171) ComplexPrimaryNoParenthesis -> . LITERAL
    (172) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (173) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (174) ComplexPrimaryNoParenthesis -> . FieldAccess
    (175) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (203) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (204) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (205) ArrayAllocationExpression -> . NEW TypeName Dims
    (201) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (202) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (176) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (177) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (178) FieldAccess -> . NotJustName DOT IDENTIFIER
    (179) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (180) FieldAccess -> . QualifiedName DOT THIS
    (181) FieldAccess -> . QualifiedName DOT CLASS
    (182) FieldAccess -> . PrimitiveType DOT CLASS
    (183) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (184) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (239) ShiftExpression -> . AdditiveExpression
    (240) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (241) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (185) MethodAccess -> . ComplexPrimaryNoParenthesis
    (186) MethodAccess -> . SpecialName
    (187) MethodAccess -> . QualifiedName
    (236) AdditiveExpression -> . MultiplicativeExpression
    (237) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (238) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (232) MultiplicativeExpression -> . CastExpression
    (233) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (234) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (225) CastExpression -> . UnaryExpression
    (226) CastExpression -> . LROUNPAREN PrimitiveTypeExpression RROUNPAREN CastExpression
    (227) CastExpression -> . LROUNPAREN ClassTypeExpression RROUNPAREN CastExpression
    (228) CastExpression -> . LROUNPAREN Expression RROUNPAREN LogicalUnaryExpression

    SEMICOLON       shift and go to state 150
    IDENTIFIER      shift and go to state 154
    CASE            shift and go to state 149
    DEFAULT         shift and go to state 142
    IF              shift and go to state 175
    SWITCH          shift and go to state 152
    WHILE           shift and go to state 144
    DO              shift and go to state 163
    FOR             shift and go to state 124
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 137
    RETURN          shift and go to state 112
    THROW           shift and go to state 179
    SYNCHRONIZED    shift and go to state 113
    TRY             shift and go to state 126
    LCURPAREN       shift and go to state 69
    OP_INC          shift and go to state 125
    OP_DEC          shift and go to state 145
    +               shift and go to state 120
    -               shift and go to state 168
    ~               shift and go to state 162
    !               shift and go to state 166
    THIS            shift and go to state 107
    SUPER           shift and go to state 178
    NULL            shift and go to state 165
    LROUNPAREN      shift and go to state 110
    LITERAL         shift and go to state 127
    BOOLEAN_CONST   shift and go to state 177
    NEW             shift and go to state 146
    BOOLEAN         shift and go to state 58
    CHAR            shift and go to state 68
    BYTE            shift and go to state 79
    SHORT           shift and go to state 52
    INT             shift and go to state 76
    LONG            shift and go to state 61
    FLOAT           shift and go to state 78
    DOUBLE          shift and go to state 77
    VOID            shift and go to state 70

    PostfixExpression              shift and go to state 133
    LabelStatement                 shift and go to state 111
    ArithmeticUnaryOperator        shift and go to state 115
    AssignmentExpression           shift and go to state 123
    ExpressionStatement            shift and go to state 103
    JumpStatement                  shift and go to state 143
    RealPostfixExpression          shift and go to state 114
    Statement                      shift and go to state 452
    AndExpression                  shift and go to state 106
    ArrayAccess                    shift and go to state 129
    CastExpression                 shift and go to state 164
    EqualityExpression             shift and go to state 117
    LogicalUnaryOperator           shift and go to state 173
    ComplexPrimaryNoParenthesis    shift and go to state 118
    MultiplicativeExpression       shift and go to state 119
    ClassAllocationExpression      shift and go to state 141
    MethodCall                     shift and go to state 121
    GuardingStatement              shift and go to state 151
    ConditionalOrExpression        shift and go to state 153
    ShiftExpression                shift and go to state 170
    SelectionStatement             shift and go to state 122
    NewAllocationExpression        shift and go to state 155
    NotJustName                    shift and go to state 172
    QualifiedName                  shift and go to state 223
    ComplexPrimary                 shift and go to state 140
    PrimitiveType                  shift and go to state 220
    LogicalUnaryExpression         shift and go to state 174
    UnaryExpression                shift and go to state 159
    Expression                     shift and go to state 156
    Block                          shift and go to state 130
    AdditiveExpression             shift and go to state 157
    ArrayAllocationExpression      shift and go to state 131
    ConditionalExpression          shift and go to state 158
    InclusiveOrExpression          shift and go to state 160
    MethodAccess                   shift and go to state 132
    PrimaryExpression              shift and go to state 148
    ExclusiveOrExpression          shift and go to state 134
    ConditionalAndExpression       shift and go to state 108
    RelationalExpression           shift and go to state 135
    PlainNewAllocationExpression   shift and go to state 136
    FieldAccess                    shift and go to state 176
    EmptyStatement                 shift and go to state 109
    SpecialName                    shift and go to state 139
    IterationStatement             shift and go to state 180

state 449

    (137) IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .

    RCURPAREN       reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    FINAL           reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    SEMICOLON       reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    IDENTIFIER      reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    CASE            reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    DEFAULT         reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    IF              reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    SWITCH          reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    WHILE           reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    DO              reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    FOR             reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    BREAK           reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    CONTINUE        reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    RETURN          reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    THROW           reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    SYNCHRONIZED    reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    TRY             reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    LCURPAREN       reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    BOOLEAN         reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    CHAR            reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    BYTE            reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    SHORT           reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    INT             reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    LONG            reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    FLOAT           reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    DOUBLE          reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    VOID            reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    OP_INC          reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    OP_DEC          reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    +               reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    -               reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    ~               reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    !               reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    THIS            reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    SUPER           reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    NULL            reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    LROUNPAREN      reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    LITERAL         reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    BOOLEAN_CONST   reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    NEW             reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)
    ELSE            reduce using rule 137 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr ForIncr RROUNPAREN Statement .)


state 450

    (161) CatchHeader -> CATCH LROUNPAREN TypeSpecifier IDENTIFIER RROUNPAREN .

    LCURPAREN       reduce using rule 161 (CatchHeader -> CATCH LROUNPAREN TypeSpecifier IDENTIFIER RROUNPAREN .)


state 451

    (136) IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .

    RCURPAREN       reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    FINAL           reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    CASE            reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    DEFAULT         reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    IF              reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    SWITCH          reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    WHILE           reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    DO              reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    FOR             reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    BREAK           reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    CONTINUE        reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    RETURN          reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    THROW           reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    TRY             reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    LCURPAREN       reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    CHAR            reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    BYTE            reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    SHORT           reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    INT             reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    LONG            reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    FLOAT           reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    DOUBLE          reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    VOID            reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    OP_INC          reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    OP_DEC          reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    +               reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    -               reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    ~               reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    !               reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    THIS            reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    SUPER           reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    NULL            reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    LROUNPAREN      reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    LITERAL         reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    NEW             reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)
    ELSE            reduce using rule 136 (IterationStatement -> DO Statement WHILE LROUNPAREN Expression RROUNPAREN SEMICOLON .)


state 452

    (133) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .

    RCURPAREN       reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    FINAL           reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    SEMICOLON       reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    IDENTIFIER      reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    CASE            reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    DEFAULT         reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    IF              reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    SWITCH          reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    WHILE           reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    DO              reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    FOR             reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    BREAK           reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    CONTINUE        reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    RETURN          reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    THROW           reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    SYNCHRONIZED    reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    TRY             reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    LCURPAREN       reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    BOOLEAN         reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    CHAR            reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    BYTE            reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    SHORT           reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    INT             reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    LONG            reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    FLOAT           reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    DOUBLE          reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    VOID            reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    OP_INC          reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    OP_DEC          reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    +               reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    -               reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    ~               reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    !               reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    THIS            reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    SUPER           reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    NULL            reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    LROUNPAREN      reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    LITERAL         reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    BOOLEAN_CONST   reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    NEW             reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)
    ELSE            reduce using rule 133 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Statement ELSE Statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LSQPAREN in state 167 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 442 resolved as shift
