		//
/*************************************************************************
 *  Compilation:  javac Gaussian.java
 *  Execution:    java Gaussian x mu sigma
 *
 *  Function to compute the Gaussian pdf (probability density function)
 *  and the Gaussian cdf (cumulative density function)
 *
 *  % java Gaussian 820 1019 209
 *  0.17050966869132111
 *
 *  % java Gaussian 1500 1019 209
 *  0.9893164837383883
 *
 *  % java Gaussian 1500 1025 231
 *  0.9801220907365489
 *
 *  The approximation is accurate to absolute error less than 8 * 10^(-16).
 *  Reference: Evaluating the Normal Distribution by George Marsaglia.
 *  http://www.jstatsoft.org/v11/a04/paper
 *
 *************************************************************************/		//COMMENT 
		//
public class Gaussian {		//PUBLIC CLASS IDENTIFIER LCURPAREN 
		//
    // return phi(x) = standard Gaussian pdf		//COMMENT 
    public static double phi(double x) {		//PUBLIC STATIC DOUBLE IDENTIFIER LROUNPAREN DOUBLE IDENTIFIER RROUNPAREN LCURPAREN 
        return Math.exp(-x*x / 2) / Math.sqrt(2 * Math.PI);		//RETURN IDENTIFIER DOT IDENTIFIER LROUNPAREN OPERATOR IDENTIFIER OPERATOR IDENTIFIER OPERATOR INT_CONST RROUNPAREN OPERATOR IDENTIFIER DOT IDENTIFIER LROUNPAREN INT_CONST OPERATOR IDENTIFIER DOT IDENTIFIER RROUNPAREN SEMICOLON 
    }		//RCURPAREN 
		//
    // return phi(x, mu, signma) = Gaussian pdf with mean mu and stddev sigma		//COMMENT 
    public static double phi(double x, double mu, double sigma) {		//PUBLIC STATIC DOUBLE IDENTIFIER LROUNPAREN DOUBLE IDENTIFIER COMMA DOUBLE IDENTIFIER COMMA DOUBLE IDENTIFIER RROUNPAREN LCURPAREN 
        return phi((x - mu) / sigma) / sigma;		//RETURN IDENTIFIER LROUNPAREN LROUNPAREN IDENTIFIER OPERATOR IDENTIFIER RROUNPAREN OPERATOR IDENTIFIER RROUNPAREN OPERATOR IDENTIFIER SEMICOLON 
    }		//RCURPAREN 
		//
    // return Phi(z) = standard Gaussian cdf using Taylor approximation		//COMMENT 
    public static double Phi(double z) {		//PUBLIC STATIC DOUBLE IDENTIFIER LROUNPAREN DOUBLE IDENTIFIER RROUNPAREN LCURPAREN 
        if (z < -8.0) return 0.0;		//IF LROUNPAREN IDENTIFIER OPERATOR OPERATOR FLOAT_CONST RROUNPAREN RETURN FLOAT_CONST SEMICOLON 
        if (z >  8.0) return 1.0;		//IF LROUNPAREN IDENTIFIER OPERATOR FLOAT_CONST RROUNPAREN RETURN FLOAT_CONST SEMICOLON 
        double sum = 0.0, term = z;		//DOUBLE IDENTIFIER OPERATOR FLOAT_CONST COMMA IDENTIFIER OPERATOR IDENTIFIER SEMICOLON 
        for (int i = 3; sum + term != sum; i += 2) {		//FOR LROUNPAREN INT IDENTIFIER OPERATOR INT_CONST SEMICOLON IDENTIFIER OPERATOR IDENTIFIER OPERATOR IDENTIFIER SEMICOLON IDENTIFIER OPERATOR INT_CONST RROUNPAREN LCURPAREN 
            sum  = sum + term;		//IDENTIFIER OPERATOR IDENTIFIER OPERATOR IDENTIFIER SEMICOLON 
            term = term * z * z / i;		//IDENTIFIER OPERATOR IDENTIFIER OPERATOR IDENTIFIER OPERATOR IDENTIFIER OPERATOR IDENTIFIER SEMICOLON 
        }		//RCURPAREN 
        return 0.5 + sum * phi(z);		//RETURN FLOAT_CONST OPERATOR IDENTIFIER OPERATOR IDENTIFIER LROUNPAREN IDENTIFIER RROUNPAREN SEMICOLON 
    }		//RCURPAREN 
		//
    // return Phi(z, mu, sigma) = Gaussian cdf with mean mu and stddev sigma		//COMMENT 
    public static double Phi(double z, double mu, double sigma) {		//PUBLIC STATIC DOUBLE IDENTIFIER LROUNPAREN DOUBLE IDENTIFIER COMMA DOUBLE IDENTIFIER COMMA DOUBLE IDENTIFIER RROUNPAREN LCURPAREN 
        return Phi((z - mu) / sigma);		//RETURN IDENTIFIER LROUNPAREN LROUNPAREN IDENTIFIER OPERATOR IDENTIFIER RROUNPAREN OPERATOR IDENTIFIER RROUNPAREN SEMICOLON 
    } 		//RCURPAREN 
		//
    // Compute z such that Phi(z) = y via bisection search		//COMMENT 
    public static double PhiInverse(double y) {		//PUBLIC STATIC DOUBLE IDENTIFIER LROUNPAREN DOUBLE IDENTIFIER RROUNPAREN LCURPAREN 
        return PhiInverse(y, .00000001, -8, 8);		//RETURN IDENTIFIER LROUNPAREN IDENTIFIER COMMA FLOAT_CONST COMMA OPERATOR INT_CONST COMMA INT_CONST RROUNPAREN SEMICOLON 
    } 		//RCURPAREN 
		//
    // bisection search		//COMMENT 
    private static double PhiInverse(double y, double delta, double lo, double hi) {		//PRIVATE STATIC DOUBLE IDENTIFIER LROUNPAREN DOUBLE IDENTIFIER COMMA DOUBLE IDENTIFIER COMMA DOUBLE IDENTIFIER COMMA DOUBLE IDENTIFIER RROUNPAREN LCURPAREN 
        double mid = lo + (hi - lo) / 2;		//DOUBLE IDENTIFIER OPERATOR IDENTIFIER OPERATOR LROUNPAREN IDENTIFIER OPERATOR IDENTIFIER RROUNPAREN OPERATOR INT_CONST SEMICOLON 
        if (hi - lo < delta) return mid;		//IF LROUNPAREN IDENTIFIER OPERATOR IDENTIFIER OPERATOR IDENTIFIER RROUNPAREN RETURN IDENTIFIER SEMICOLON 
        if (Phi(mid) > y) return PhiInverse(y, delta, lo, mid);		//IF LROUNPAREN IDENTIFIER LROUNPAREN IDENTIFIER RROUNPAREN OPERATOR IDENTIFIER RROUNPAREN RETURN IDENTIFIER LROUNPAREN IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RROUNPAREN SEMICOLON 
        else              return PhiInverse(y, delta, mid, hi);		//ELSE RETURN IDENTIFIER LROUNPAREN IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RROUNPAREN SEMICOLON 
    }		//RCURPAREN 
		//
		//
		//
    // test client		//COMMENT 
    public static void main(String[] args) {		//PUBLIC STATIC VOID IDENTIFIER LROUNPAREN IDENTIFIER LSQPAREN RSQPAREN IDENTIFIER RROUNPAREN LCURPAREN 
        double z     = Double.parseDouble(args[0]);		//DOUBLE IDENTIFIER OPERATOR IDENTIFIER DOT IDENTIFIER LROUNPAREN IDENTIFIER LSQPAREN INT_CONST RSQPAREN RROUNPAREN SEMICOLON 
        double mu    = Double.parseDouble(args[1]);		//DOUBLE IDENTIFIER OPERATOR IDENTIFIER DOT IDENTIFIER LROUNPAREN IDENTIFIER LSQPAREN INT_CONST RSQPAREN RROUNPAREN SEMICOLON 
        double sigma = Double.parseDouble(args[2]);		//DOUBLE IDENTIFIER OPERATOR IDENTIFIER DOT IDENTIFIER LROUNPAREN IDENTIFIER LSQPAREN INT_CONST RSQPAREN RROUNPAREN SEMICOLON 
        StdOut.println(Phi(z, mu, sigma));		//IDENTIFIER DOT IDENTIFIER LROUNPAREN IDENTIFIER LROUNPAREN IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RROUNPAREN RROUNPAREN SEMICOLON 
        double y = Phi(z);		//DOUBLE IDENTIFIER OPERATOR IDENTIFIER LROUNPAREN IDENTIFIER RROUNPAREN SEMICOLON 
        StdOut.println(PhiInverse(y));		//IDENTIFIER DOT IDENTIFIER LROUNPAREN IDENTIFIER LROUNPAREN IDENTIFIER RROUNPAREN RROUNPAREN SEMICOLON 
    }		//RCURPAREN 
		//
}		//RCURPAREN 
